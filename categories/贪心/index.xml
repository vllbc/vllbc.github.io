<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>贪心 - 分类 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/categories/%E8%B4%AA%E5%BF%83/</link>
        <description>贪心 - 分类 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 Mar 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/categories/%E8%B4%AA%E5%BF%83/" rel="self" type="application/rss+xml" /><item>
    <title>跳跃游戏</title>
    <link>https://blog.vllbc.top/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
    <pubDate>Mon, 18 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
    <description><![CDATA[<h1 id="跳跃游戏">跳跃游戏</h1>
<blockquote>
<p>Problem:</p>
</blockquote>
<h2 id="思路">思路</h2>
<blockquote>
<p>讲述看到这一题的思路</p>
</blockquote>
<h2 id="解题方法">解题方法</h2>
<blockquote>
<p>描述你的解题方法</p>
</blockquote>
<h2 id="复杂度">复杂度</h2>
<p>时间复杂度:</p>
<blockquote>
<p>添加时间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>
</blockquote>
<p>空间复杂度:</p>
<blockquote>
<p>添加空间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>
</blockquote>
<h2 id="code">Code</h2>
<p>```Python3 []</p>
<pre><code>
# 跳跃游戏ii

# 划分字母区间

[763. 划分字母区间 - 力扣（LeetCode）](https://leetcode.cn/problems/partition-labels/description/?envType=study-plan-v2&amp;envId=top-100-liked)
本题预处理完毕后思路和跳跃游戏2类似，当然也可以使用合并区间的思路来，都是贪心算法。
## Code
```python
class Solution:

    def partitionLabels(self, s: str) -&gt; List[int]:

        from collections import defaultdict

        d = defaultdict(list)

        for i, char in enumerate(s):

            d[char].append(i)

        # 也可以考虑合并区间做了，下面的解法类似跳跃游戏2

        res = []

        start = 0

        max_jump = 0

        for i, char in enumerate(s):

            max_jump = max(max_jump, d[char][-1])

            if i == max_jump:

                res.append(i - start + 1)

                start = i + 1

                max_jump = 0

        return res</code></pre>]]></description>
</item>
</channel>
</rss>
