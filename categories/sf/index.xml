<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>sf - 分类 - vllbc02</title>
        <link>https://example.com/categories/sf/</link>
        <description>sf - 分类 - vllbc02</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>m18265090197@163.com (vllbc)</managingEditor>
            <webMaster>m18265090197@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 15 Apr 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://example.com/categories/sf/" rel="self" type="application/rss+xml" /><item>
    <title>49</title>
    <link>https://example.com/49/</link>
    <pubDate>Thu, 15 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/49/</guid>
    <description><![CDATA[最长递增子序列 题目： https://leetcode-cn.com/problems/longest-increasing-subsequence/ 思路： 动态规划 定义dp[i]为到nums[i]的最长递增子序列的长度，全部都初始化为1,因为本身就是长度为1的递增子序]]></description>
</item>
<item>
    <title>50</title>
    <link>https://example.com/50/</link>
    <pubDate>Thu, 15 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/50/</guid>
    <description><![CDATA[分割等和子集 题目： https://leetcode-cn.com/problems/partition-equal-subset-sum/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china 思路： 典型的01背包问题，利用套路框架做即可 注意做了优化，把原本的二维dp降低了一维 代码： 1 2 3 4 5 6 7 8 9 10 11 class Solution: def canPartition(self,]]></description>
</item>
<item>
    <title>48</title>
    <link>https://example.com/48/</link>
    <pubDate>Wed, 14 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/48/</guid>
    <description><![CDATA[对称二叉树 题目： https://leetcode-cn.com/problems/symmetric-tree/ 思路： 利用双向队列，每次把对称的两个对应的节点放入队列中，然后取出来比较，如果值不相等则返回false,如果一边为空 一边不]]></description>
</item>
<item>
    <title>45</title>
    <link>https://example.com/45/</link>
    <pubDate>Tue, 13 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/45/</guid>
    <description><![CDATA[采购方案 题目： https://leetcode-cn.com/problems/4xy4Wx/ 思路： 题目很简单，思想就是双指针，感觉是个双指针的典型例子就写了下来 先对数组进行从小到大排序，然后双指针从两边移动，如果一直]]></description>
</item>
<item>
    <title>46</title>
    <link>https://example.com/46/</link>
    <pubDate>Tue, 13 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/46/</guid>
    <description><![CDATA[和为s的连续正数序列 题目: https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/ 思路： 滑动窗口即可，滑动窗口就是选取数组的一部分来进行操作，left 和 right只能向右移动 代码： 1 2 3 4 5 6 7]]></description>
</item>
<item>
    <title>47</title>
    <link>https://example.com/47/</link>
    <pubDate>Tue, 13 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/47/</guid>
    <description><![CDATA[滑动窗口中位数 题目： https://leetcode-cn.com/problems/sliding-window-median/ 思路： 很明显的滑动窗口，首先定义一个求中位数的匿名函数，然后一点一点求出来 代码： 1 2 3 4 5 6 7 class Solution: def medianSlidingWindow(self, nums: List[int], k: int) -&gt; List[float]: median =]]></description>
</item>
<item>
    <title>44</title>
    <link>https://example.com/44/</link>
    <pubDate>Mon, 12 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/44/</guid>
    <description><![CDATA[最大数 题目： https://leetcode-cn.com/problems/largest-number/ 思路： 一开始直接暴力搜索，把所有的情况都列举然后比较，结果超时了，最后利用了自定义排序的方法 代码： 1 2 3 4 5 6 7 class Solution: def largestNumber(self, nums: List[int]) -&gt;]]></description>
</item>
<item>
    <title>43</title>
    <link>https://example.com/43/</link>
    <pubDate>Sun, 11 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/43/</guid>
    <description><![CDATA[丑数系列 1.丑数 题目： https://leetcode-cn.com/problems/ugly-number/ 思路： 就是让这个数字不断地除以2.3.5 如果最后变成了1 就说明是个丑数 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution: def]]></description>
</item>
<item>
    <title>42</title>
    <link>https://example.com/42/</link>
    <pubDate>Sat, 27 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/42/</guid>
    <description><![CDATA[至少有k个重复字符的最长字串 题目： https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/ 思路： 利用递归，如果s中字符c的数目小于k,则以c作分割，分成的字串再次调用函数形成递归，然后从众多结果]]></description>
</item>
<item>
    <title>41</title>
    <link>https://example.com/41/</link>
    <pubDate>Wed, 10 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://example.com/41/</guid>
    <description><![CDATA[字符串的排列 题目： https://leetcode-cn.com/problems/permutation-in-string/ 思路： 滑动窗口加字典 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution(object): def checkInclusion(self, s1, s2): counter1 = collections.Counter(s1) N = len(s2) left = 0 right = len(s1) - 1 counter2 = collections.Counter(s2[0:right]) while right &lt; N: counter2[s2[right]] += 1]]></description>
</item>
</channel>
</rss>
