<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python - 分类 - vllbc02</title>
        <link>https://vllbc.top/categories/python/</link>
        <description>python - 分类 - vllbc02</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vllbc02@163.com (vllbc)</managingEditor>
            <webMaster>vllbc02@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 Oct 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://vllbc.top/categories/python/" rel="self" type="application/rss+xml" /><item>
    <title>WTF</title>
    <link>https://vllbc.top/wtf/</link>
    <pubDate>Mon, 18 Oct 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/wtf/</guid>
    <description><![CDATA[可变与不可变 “-=”操作符会调用__isub__函数，而”-“操作符会调用__sub__函数，一般对于可变对象来说“-=”操作符会直接改变s]]></description>
</item>
<item>
    <title>skill</title>
    <link>https://vllbc.top/skill/</link>
    <pubDate>Sun, 10 Oct 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/skill/</guid>
    <description><![CDATA[两个数的交换 # a = 1 # b = 2 # temp = b # b = a # a = temp # print(a,b) a = 1 b = 2 a,b = b,a print(a,b) 2 1 格式化字符串 a = 17 name = &#34;wlb&#34; # print(&#39;%s is %d years old&#39; % (name,a)) # print(&#39;{} is {} years old&#39;.format(name,a)) print(f&#39;{name} is {a} years]]></description>
</item>
<item>
    <title>asyncio</title>
    <link>https://vllbc.top/asyncio/</link>
    <pubDate>Sun, 13 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/asyncio/</guid>
    <description><![CDATA[import threading import time 多线程例子 def spider(): #..... time.sleep(0.02) def main1(): for i in range(100): spider() def main2(): thread_list = [] for i in range(100): thread = threading.Thread(target = spider) thread.start() thread_list.append(thread) for t in thread_list: t.join() if __name__ == &#34;__main__&#34;: start = time.time() main1() end = time.time() print(&#34;time1 :{:.4f}&#34;.format(end-start)) start = time.time() main2() end = time.time() print(&#34;time2 :{:4f}&#34;.format(end-start)) time1 :2.0523 time2 :0.037929 yield def fib(n):]]></description>
</item>
<item>
    <title>pyplot</title>
    <link>https://vllbc.top/pyplot/</link>
    <pubDate>Sun, 02 May 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/pyplot/</guid>
    <description><![CDATA[matplotlib.pyplot学习 绘图标记 import matplotlib.pyplot as plt import numpy as np ypoints = np.array([1,3,4,5,8,9,6,1,3,4,5,2,4]) plt.plot(ypoints, marker = &#39;o&#39;) # &#34;o&#34;代表实心圆 plt.show() maker可用的符号如下： f]]></description>
</item>
<item>
    <title>thread</title>
    <link>https://vllbc.top/thread/</link>
    <pubDate>Thu, 21 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/thread/</guid>
    <description><![CDATA[import threading import time 简单的创建 def run(n): print(&#34;task&#34;, n) time.sleep(1) print(&#39;2s&#39;) time.sleep(1) print(&#39;1s&#39;) time.sleep(1) print(&#39;0s&#39;) time.sleep(1) if __name__ == &#39;__main__&#39;: t1 = threading.Thread(target=run, args=(&#34;t1&#34;,)) t2 = threading.Thread(target=run, args=(&#34;t2&#34;,)) t1.start() t2.start() 通过类创建 class MyThread(threading.Thread): def __init__(self, n): super(MyThread, self).__init__() # 重构run函数必须要写 self.n = n def run(self): print(&#34;task&#34;, self.n) time.sleep(1) print(&#39;2s&#39;) time.sleep(1) print(&#39;1s&#39;) time.sleep(1)]]></description>
</item>
</channel>
</rss>
