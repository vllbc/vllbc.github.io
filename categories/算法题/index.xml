<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>算法题 - 分类 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/</link>
        <description>算法题 - 分类 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 29 Mar 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/" rel="self" type="application/rss+xml" /><item>
    <title>课程表（拓扑排序）</title>
    <link>https://blog.vllbc.top/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</link>
    <pubDate>Fri, 29 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</guid>
    <description><![CDATA[<blockquote>
<p>Problem:</p>
</blockquote>
<h2 id="思路">思路</h2>
<blockquote>
<p>注意拓扑排序最好是邻接表（哈系表实现），并用队列处理后续入度为0的点</p>
</blockquote>
<h2 id="解题方法">解题方法</h2>
<blockquote>
<p>描述你的解题方法</p>
</blockquote>
<h2 id="复杂度">复杂度</h2>
<p>时间复杂度:</p>
<blockquote>
<p>添加时间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>
</blockquote>
<p>空间复杂度:</p>
<blockquote>
<p>添加空间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>]]></description>
</item>
<item>
    <title>跳跃游戏</title>
    <link>https://blog.vllbc.top/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
    <pubDate>Mon, 18 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
    <description><![CDATA[<h1 id="跳跃游戏">跳跃游戏</h1>
<blockquote>
<p>Problem:</p>
</blockquote>
<h2 id="思路">思路</h2>
<blockquote>
<p>讲述看到这一题的思路</p>
</blockquote>
<h2 id="解题方法">解题方法</h2>
<blockquote>
<p>描述你的解题方法</p>
</blockquote>
<h2 id="复杂度">复杂度</h2>
<p>时间复杂度:</p>
<blockquote>
<p>添加时间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>
</blockquote>
<p>空间复杂度:</p>
<blockquote>
<p>添加空间复杂度, 示例： <span class="math inline">\(O(n)\)</span></p>
</blockquote>
<h2 id="code">Code</h2>
<p>```Python3 []</p>
<pre><code>
# 跳跃游戏ii

# 划分字母区间

[763. 划分字母区间 - 力扣（LeetCode）](https://leetcode.cn/problems/partition-labels/description/?envType=study-plan-v2&amp;envId=top-100-liked)
本题预处理完毕后思路和跳跃游戏2类似，当然也可以使用合并区间的思路来，都是贪心算法。
## Code
```python
class Solution:

    def partitionLabels(self, s: str) -&gt; List[int]:

        from collections import defaultdict

        d = defaultdict(list)

        for i, char in enumerate(s):

            d[char].append(i)

        # 也可以考虑合并区间做了，下面的解法类似跳跃游戏2

        res = []

        start = 0

        max_jump = 0

        for i, char in enumerate(s):

            max_jump = max(max_jump, d[char][-1])

            if i == max_jump:

                res.append(i - start + 1)

                start = i + 1

                max_jump = 0

        return res</code></pre>]]></description>
</item>
<item>
    <title>缺失的第一个正数</title>
    <link>https://blog.vllbc.top/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</link>
    <pubDate>Sat, 16 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</guid>
    <description><![CDATA[<p><a
href="https://leetcode.cn/problems/first-missing-positive/?envType=study-plan-v2&amp;envId=top-100-liked">41.
缺失的第一个正数 - 力扣（LeetCode）</a>
空间复杂度o(n)很好想，但o(1)不好想，还是个408考研真题</p>
<p>注意O(n) ==
O(2n)，即相较于边遍历边判断，还是遍历两次更加方便且不会有太多损失。类似思想：<a
href="https://leetcode.cn/problems/set-matrix-zeroes/description/?envType=study-plan-v2&amp;envId=top-100-liked">73.
矩阵置零 - 力扣（LeetCode）</a></p>]]></description>
</item>
<item>
    <title>和为K的子数组</title>
    <link>https://blog.vllbc.top/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
    <pubDate>Thu, 14 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
    <description><![CDATA[<p><a
href="https://leetcode.cn/problems/subarray-sum-equals-k/">题目地址</a>
# 思路 通过前缀和+哈希表，并有简单的数学变换。前缀和即 <span
class="math inline">\(y[i]=y[i-1]+x[i]\)</span>
类比于accumlate函数，注意前缀和思想也可以应用为“前缀积、后缀和、后缀积”等思想。<a
href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-100-liked">238.
除自身以外数组的乘积 - 力扣（LeetCode）</a>
&gt; 使用前缀和的方法可以解决这个问题，因为我们需要找到和为k的连续子数组的个数。通过计算前缀和，我们可以将问题转化为求解两个前缀和之差等于k的情况。
&gt;假设数组的前缀和数组为prefixSum，其中prefixSum[i]表示从数组起始位置到第i个位置的元素之和。那么对于任意的两个下标i和j（i
&lt; j），如果prefixSum[j] - prefixSum[i] =
k，即从第i个位置到第j个位置的元素之和等于k，那么说明从第i+1个位置到第j个位置的连续子数组的和为k。
通过遍历数组，计算每个位置的前缀和，并使用一个哈希表来存储每个前缀和出现的次数。在遍历的过程中，我们检查是否存在prefixSum[j]
-
k的前缀和，如果存在，说明从某个位置到当前位置的连续子数组的和为k，我们将对应的次数累加到结果中。
这样，通过遍历一次数组，我们可以统计出和为k的连续子数组的个数，并且时间复杂度为O(n)，其中n为数组的长度。
# 代码</p>]]></description>
</item>
<item>
    <title>和为K的子数组</title>
    <link>https://blog.vllbc.top/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-1/</link>
    <pubDate>Thu, 14 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-1/</guid>
    <description><![CDATA[<p><a
href="https://leetcode.cn/problems/subarray-sum-equals-k/">题目地址</a>
# 思路 通过前缀和+哈希表，并有简单的数学变换。前缀和即 <span
class="math inline">\(y[i]=y[i-1]+x[i]\)</span>
类比于accumlate函数，注意前缀和思想也可以应用为“前缀积、后缀和、后缀积”等思想。<a
href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-100-liked">238.
除自身以外数组的乘积 - 力扣（LeetCode）</a>
&gt; 使用前缀和的方法可以解决这个问题，因为我们需要找到和为k的连续子数组的个数。通过计算前缀和，我们可以将问题转化为求解两个前缀和之差等于k的情况。
&gt;假设数组的前缀和数组为prefixSum，其中prefixSum[i]表示从数组起始位置到第i个位置的元素之和。那么对于任意的两个下标i和j（i
&lt; j），如果prefixSum[j] - prefixSum[i] =
k，即从第i个位置到第j个位置的元素之和等于k，那么说明从第i+1个位置到第j个位置的连续子数组的和为k。
通过遍历数组，计算每个位置的前缀和，并使用一个哈希表来存储每个前缀和出现的次数。在遍历的过程中，我们检查是否存在prefixSum[j]
-
k的前缀和，如果存在，说明从某个位置到当前位置的连续子数组的和为k，我们将对应的次数累加到结果中。
这样，通过遍历一次数组，我们可以统计出和为k的连续子数组的个数，并且时间复杂度为O(n)，其中n为数组的长度。
# 代码</p>]]></description>
</item>
<item>
    <title>并查集</title>
    <link>https://blog.vllbc.top/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <pubDate>Wed, 13 Mar 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
    <description><![CDATA[<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> find(x):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (p[x] <span class="op">!=</span> x):</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        p[x] <span class="op">=</span> find(p[x])</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> p[x]</span></code></pre></div>
<p>上面是y总的模板，实现了路径压缩。</p>]]></description>
</item>
<item>
    <title>验证外星语词典</title>
    <link>https://blog.vllbc.top/%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/</link>
    <pubDate>Mon, 08 Jan 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/</guid>
    <description><![CDATA[<p>leetcode地址：<a
href="https://leetcode.cn/problems/verifying-an-alien-dictionary/description/">953.
验证外星语词典 - 力扣（LeetCode）</a></p>
<h2 id="简单方法">简单方法</h2>
<p>python列表之间也可以进行比较（太灵活了），比如<code>[1, 2, 3] &lt; [2, 2, 3]</code>成立，即按照字典序进行比较，与其是一样的比较规则。因此对于本题可以利用python的特性轻松解决。
好久没写python了，变得很生疏，一开始写的很蠢：</p>]]></description>
</item>
<item>
    <title>KMP</title>
    <link>https://blog.vllbc.top/kmp/</link>
    <pubDate>Wed, 08 Mar 2023 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/kmp/</guid>
    <description><![CDATA[<p>KMP是字符串匹配问题的算法。“字符串A是否为字符串B的子串?如果是的话出现在B的哪些位置?”该问题就是字符串匹配问题，字符串A称为<strong>模式串</strong>，字符串B称为<strong>主串</strong>。</p>]]></description>
</item>
<item>
    <title>把数字翻译成字符串</title>
    <link>https://blog.vllbc.top/%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
    <pubDate>Thu, 17 Nov 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
    <description><![CDATA[<h1 id="把数字翻译成字符串">把数字翻译成字符串</h1>
<h2 id="题目">题目：</h2>
<p><a
href="https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/</a></p>
<h2 id="思路">思路：</h2>
<p>dp思想，不用管是什么字符，定义dp[i]为长度为i时 有多少个方法</p>
<h2 id="代码">代码:</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Solution:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> translateNum(<span class="va">self</span>, num: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="bu">int</span>:</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        s <span class="op">=</span> <span class="bu">str</span>(num)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">len</span>(s) <span class="op">&lt;</span> <span class="dv">2</span>:</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        dp <span class="op">=</span> [<span class="dv">0</span>] <span class="op">*</span> <span class="bu">len</span>(s)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        dp[<span class="dv">0</span>] <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        dp[<span class="dv">1</span>] <span class="op">=</span> <span class="dv">2</span> <span class="cf">if</span> <span class="bu">int</span>(s[<span class="dv">0</span>] <span class="op">+</span> s[<span class="dv">1</span>]) <span class="op">&lt;</span> <span class="dv">26</span> <span class="cf">else</span> <span class="dv">1</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>,<span class="bu">len</span>(s)):</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>            dp[i] <span class="op">=</span> dp[i<span class="op">-</span><span class="dv">1</span>] <span class="op">+</span> dp[i<span class="op">-</span><span class="dv">2</span>] <span class="cf">if</span> <span class="bu">int</span>(s[i<span class="op">-</span><span class="dv">1</span>] <span class="op">+</span> s[i]) <span class="op">&lt;</span> <span class="dv">26</span> <span class="kw">and</span> s[i<span class="op">-</span><span class="dv">1</span>] <span class="op">!=</span> <span class="st">&#39;0&#39;</span> <span class="cf">else</span> dp[i<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> dp[<span class="op">-</span><span class="dv">1</span>]</span></code></pre></div>
<p>注意如果长度小于等于1 则直接返回1</p>]]></description>
</item>
<item>
    <title>字符串转换整数 (atoi)</title>
    <link>https://blog.vllbc.top/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0-atoi/</link>
    <pubDate>Wed, 26 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0-atoi/</guid>
    <description><![CDATA[<h1 id="字符串转换整数-atoi">字符串转换整数 (atoi)</h1>
<p><a
href="https://leetcode-cn.com/problems/string-to-integer-atoi/">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">#重点是正则表达式</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Solution:</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> myAtoi(s: <span class="bu">str</span>):</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="im">import</span> re</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        ss <span class="op">=</span> re.findall(<span class="st">&quot;^[\+\-]?\d+&quot;</span>,s.strip())</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        res <span class="op">=</span> <span class="bu">int</span>(<span class="op">*</span>ss)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> res <span class="op">&gt;</span> (<span class="dv">231</span><span class="op">-</span><span class="dv">1</span>):</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            res <span class="op">=</span> (<span class="dv">231</span><span class="op">-</span><span class="dv">1</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> res <span class="op">&lt;</span> <span class="op">-</span><span class="dv">231</span>:</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            res <span class="op">=</span> <span class="op">-</span><span class="dv">231</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> res</span></code></pre></div>
<p>WA了四次才整出来，太菜了，以为很简单，没有认真读题，要吸取教训。</p>]]></description>
</item>
</channel>
</rss>
