{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u200b \u8fd9\u662f\u6211\uff08vllbc\uff09\u7684\u7f51\u7ad9\uff0c\u6b22\u8fce\u5927\u5bb6\uff01 \u8fd9\u7b97\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2 \u7528\u6765\u5199\u4e00\u4e9b\u6211\u5e73\u65f6\u5b66\u4e60\u7684\u7b14\u8bb0\u4ec0\u4e48\u7684\uff0c\u6211\u5b66\u7684\u4e1c\u897f\u5f88\u591a\u5f88\u6742\uff0c\u603b\u4e4b\u4ec0\u4e48\u90fd\u6709\u3002 \u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u548c\u6211\u591a\u591a\u4ea4\u6d41 \u8054\u7cfb\u65b9\u5f0f\uff1a qq\uff1a1683070754 \u672c\u7f51\u7ad9\u7528 mkdocs \u7f16\u5199\uff0c\u90e8\u7f72\u5728 githubpage \u4e0a\uff0c\u73b0\u5728\u5df2\u7ecf\u8d2d\u4e70\u57df\u540d print(\"welcome to the my site!!\")","title":"\u9996\u9875"},{"location":"#_1","text":"\u200b \u8fd9\u662f\u6211\uff08vllbc\uff09\u7684\u7f51\u7ad9\uff0c\u6b22\u8fce\u5927\u5bb6\uff01 \u8fd9\u7b97\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2 \u7528\u6765\u5199\u4e00\u4e9b\u6211\u5e73\u65f6\u5b66\u4e60\u7684\u7b14\u8bb0\u4ec0\u4e48\u7684\uff0c\u6211\u5b66\u7684\u4e1c\u897f\u5f88\u591a\u5f88\u6742\uff0c\u603b\u4e4b\u4ec0\u4e48\u90fd\u6709\u3002 \u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u548c\u6211\u591a\u591a\u4ea4\u6d41","title":"\u7b80\u4ecb"},{"location":"#_2","text":"","title":"\u8054\u7cfb\u65b9\u5f0f\uff1a"},{"location":"#qq1683070754","text":"\u672c\u7f51\u7ad9\u7528 mkdocs \u7f16\u5199\uff0c\u90e8\u7f72\u5728 githubpage \u4e0a\uff0c\u73b0\u5728\u5df2\u7ecf\u8d2d\u4e70\u57df\u540d print(\"welcome to the my site!!\")","title":"qq\uff1a1683070754"},{"location":"2021-goal/goal/","text":"2021\u5e74\u76ee\u6807 \u597d\u597d\u5b66\u7b97\u6cd5\uff0c\u8981\u6c42\u8981\u6253\u84dd\u6865\u676f\u62ff\u5956\u3002 ~~\u6bcf\u5929leetcode\u90fd\u8981\u5237\u9898\uff0c\u8fd9\u4e00\u5e74\u8981\u5168\u7eff~~(\u5931\u8d25\uff0c\u8fc7\u5e74\u5fd8\u8bb0\u4e86\u5237\u9898) \u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\uff0c\u4e0d\u80fd\u6ee1\u8db3\u4e8e\u7528\u5e93\u548c\u8c03\u53c2\uff0c\u8981\u8ba4\u771f\u5b66\u4e60\u7406\u8bba\u77e5\u8bc6\uff0c\u624b\u52a8\u63a8\u5bfc\u4e00\u4e9b\u516c\u5f0f \u81f3\u5c11\u5b8c\u6210\u4e00\u4e2a\u9879\u76ee\uff0c\u4ee3\u7801\u81f3\u5c111000\u884c\u4ee5\u4e0a\uff0c\u5e76\u4e14\u7528\u5230\u6570\u636e\u5e93\uff0c\u6d4b\u8bd5\u7b49\u6280\u672f\uff0c\u5e76\u8981\u6c42\u6709\u8f83\u9ad8\u7684\u53ef\u7ef4\u62a4\u6027\uff0c\u5728GitHub\u4e0a\u7ef4\u62a4 \u8981\u65f6\u5e38\u66f4\u65b0\u81ea\u5df1\u7684\u6280\u672f\uff0c\u770b\u4e00\u4e9b\u6280\u672f\u6587\u7ae0\uff0c\u4e30\u5bcc\u81ea\u5df1\u7684\u77e5\u8bc6\u9762 \u535a\u5ba2\u8981\u5e38\u66f4\u65b0\uff0c\u5237\u4e86\u597d\u9898\uff0c\u6216\u8005\u5b66\u4e60\u4e00\u4e9b\u66f4\u8fdb\u9636\u7684\u77e5\u8bc6\uff0c\u8981\u53ca\u65f6\u505a\u7b14\u8bb0\u5e76\u66f4\u65b0\u5728\u535a\u5ba2\u91cc\u9762\u3002 ~~\u597d\u597d\u5b66\u4e60\u9ad8\u6570\u9ad8\u4ee3\u82f1\u8bed\uff0c\u53ef\u4ee5\u8003\u4e00\u4e2a\u597d\u6210\u7ee9\uff0c\u52aa\u529b\u62ff\u5956\u5b66\u91d1\uff0c\u5f25\u8865\u9ad8\u8003\u7684\u9057\u61be\u3002~~(\u5931\u8d25\uff0c\u82f1\u8bed\u6302\u79d1) \u597d\u597d\u7231\u5973\u670b\u53cb\uff0c\u65b0\u7684\u4e00\u5e74\u4e5f\u8981\u6bcf\u5929\u90fd\u5f00\u5f00\u5fc3\u5fc3\u554a\uff01 \u953b\u70bc\u81ea\u5df1\u7684\u5fc3\u6001\uff0c\u8ba9\u81ea\u5df1\u4e0d\u754f\u60e7\u5404\u79cd\u6bd4\u8d5b\u7ade\u8d5b\uff0c\u4f7f\u5fc3\u6001\u66f4\u52a0\u7a33\u5b9a","title":"2021\u5e74\u76ee\u6807"},{"location":"2021-goal/goal/#2021","text":"\u597d\u597d\u5b66\u7b97\u6cd5\uff0c\u8981\u6c42\u8981\u6253\u84dd\u6865\u676f\u62ff\u5956\u3002 ~~\u6bcf\u5929leetcode\u90fd\u8981\u5237\u9898\uff0c\u8fd9\u4e00\u5e74\u8981\u5168\u7eff~~(\u5931\u8d25\uff0c\u8fc7\u5e74\u5fd8\u8bb0\u4e86\u5237\u9898) \u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\uff0c\u4e0d\u80fd\u6ee1\u8db3\u4e8e\u7528\u5e93\u548c\u8c03\u53c2\uff0c\u8981\u8ba4\u771f\u5b66\u4e60\u7406\u8bba\u77e5\u8bc6\uff0c\u624b\u52a8\u63a8\u5bfc\u4e00\u4e9b\u516c\u5f0f \u81f3\u5c11\u5b8c\u6210\u4e00\u4e2a\u9879\u76ee\uff0c\u4ee3\u7801\u81f3\u5c111000\u884c\u4ee5\u4e0a\uff0c\u5e76\u4e14\u7528\u5230\u6570\u636e\u5e93\uff0c\u6d4b\u8bd5\u7b49\u6280\u672f\uff0c\u5e76\u8981\u6c42\u6709\u8f83\u9ad8\u7684\u53ef\u7ef4\u62a4\u6027\uff0c\u5728GitHub\u4e0a\u7ef4\u62a4 \u8981\u65f6\u5e38\u66f4\u65b0\u81ea\u5df1\u7684\u6280\u672f\uff0c\u770b\u4e00\u4e9b\u6280\u672f\u6587\u7ae0\uff0c\u4e30\u5bcc\u81ea\u5df1\u7684\u77e5\u8bc6\u9762 \u535a\u5ba2\u8981\u5e38\u66f4\u65b0\uff0c\u5237\u4e86\u597d\u9898\uff0c\u6216\u8005\u5b66\u4e60\u4e00\u4e9b\u66f4\u8fdb\u9636\u7684\u77e5\u8bc6\uff0c\u8981\u53ca\u65f6\u505a\u7b14\u8bb0\u5e76\u66f4\u65b0\u5728\u535a\u5ba2\u91cc\u9762\u3002 ~~\u597d\u597d\u5b66\u4e60\u9ad8\u6570\u9ad8\u4ee3\u82f1\u8bed\uff0c\u53ef\u4ee5\u8003\u4e00\u4e2a\u597d\u6210\u7ee9\uff0c\u52aa\u529b\u62ff\u5956\u5b66\u91d1\uff0c\u5f25\u8865\u9ad8\u8003\u7684\u9057\u61be\u3002~~(\u5931\u8d25\uff0c\u82f1\u8bed\u6302\u79d1) \u597d\u597d\u7231\u5973\u670b\u53cb\uff0c\u65b0\u7684\u4e00\u5e74\u4e5f\u8981\u6bcf\u5929\u90fd\u5f00\u5f00\u5fc3\u5fc3\u554a\uff01 \u953b\u70bc\u81ea\u5df1\u7684\u5fc3\u6001\uff0c\u8ba9\u81ea\u5df1\u4e0d\u754f\u60e7\u5404\u79cd\u6bd4\u8d5b\u7ade\u8d5b\uff0c\u4f7f\u5fc3\u6001\u66f4\u52a0\u7a33\u5b9a","title":"2021\u5e74\u76ee\u6807"},{"location":"AI_learn/AI_PATH/","text":"\u901a\u8fc7\u770b\u5434\u6069\u8fbe\u7684 \u673a\u5668\u5b66\u4e60 \u548c \u6df1\u5ea6\u5b66\u4e60 \u89c6\u9891\u5165\u95e8\uff0c\u7136\u540e\u770b\u914d\u5957\u7684\u8bfe\u540e\u4e60\u9898\u4e0e\u7b14\u8bb0 \u673a\u5668\u5b66\u4e60\u7b14\u8bb0 \u6df1\u5ea6\u5b66\u4e60\u7b14\u8bb0 \u4e70\u7684\u4e66\u4e5f\u8981\u8fc7\u8fc7\uff0c\u8ddf\u7740\u5b9e\u73b0\u4e00\u4e0b \u4e00\u5b9a\u8981\u5b9e\u8df5\uff01\u81ea\u5df1\u5199\u4ee3\u7801\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d github \u4e0a\u7684 100days \u9879\u76ee\u8ddf\u7740\u5b8c\u6210\u4e00\u4e0b \u5c3d\u91cf\u90fd\u7528 pytorch \u548c numpy \u5b9e\u73b0\u4e00\u4e0b \u6240\u4ee5\u4e5f\u8981\u5b66\u4e60 pytorch\uff01\uff01\uff01 \u6570\u636e\u5904\u7406\u53bb\u5b9e\u9a8c\u697c\u5b66\u4e60 pandas \u603b\u4e4b\u90fd\u5f88\u91cd\u8981\uff01\uff01","title":"\u5b66\u4e60\u9014\u5f84"},{"location":"AI_learn/AI_PATH/#_1","text":"\u673a\u5668\u5b66\u4e60\u7b14\u8bb0 \u6df1\u5ea6\u5b66\u4e60\u7b14\u8bb0","title":"\u901a\u8fc7\u770b\u5434\u6069\u8fbe\u7684\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u89c6\u9891\u5165\u95e8\uff0c\u7136\u540e\u770b\u914d\u5957\u7684\u8bfe\u540e\u4e60\u9898\u4e0e\u7b14\u8bb0"},{"location":"AI_learn/AI_PATH/#_2","text":"","title":"\u4e70\u7684\u4e66\u4e5f\u8981\u8fc7\u8fc7\uff0c\u8ddf\u7740\u5b9e\u73b0\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#_3","text":"","title":"\u4e00\u5b9a\u8981\u5b9e\u8df5\uff01\u81ea\u5df1\u5199\u4ee3\u7801\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d"},{"location":"AI_learn/AI_PATH/#github100days","text":"","title":"github\u4e0a\u7684100days\u9879\u76ee\u8ddf\u7740\u5b8c\u6210\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#pytorchnumpy","text":"","title":"\u5c3d\u91cf\u90fd\u7528pytorch\u548cnumpy\u5b9e\u73b0\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#pytorch","text":"","title":"\u6240\u4ee5\u4e5f\u8981\u5b66\u4e60pytorch\uff01\uff01\uff01"},{"location":"AI_learn/AI_PATH/#pandas","text":"","title":"\u6570\u636e\u5904\u7406\u53bb\u5b9e\u9a8c\u697c\u5b66\u4e60pandas"},{"location":"AI_learn/AI_PATH/#_4","text":"","title":"\u603b\u4e4b\u90fd\u5f88\u91cd\u8981\uff01\uff01"},{"location":"AI_learn/ganzhiqi/","text":"","title":"\u611f\u77e5\u5668"},{"location":"AI_learn/nnLogistic/","text":"\u7ec3\u4e601-\u5177\u6709\u795e\u7ecf\u7f51\u7edc\u601d\u7ef4\u7684Logistic\u56de\u5f52 1 \u6570\u636e\u9884\u5904\u7406 1.1 \u6570\u636e\u52a0\u8f7d\u548c\u67e5\u770b \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u6709\u9700\u8981\u5f15\u5165\u7684\u5e93\uff1a numpy \uff1a\u662f\u7528Python\u8fdb\u884c\u79d1\u5b66\u8ba1\u7b97\u7684\u57fa\u672c\u8f6f\u4ef6\u5305\u3002 h5py\uff1a\u662f\u4e0eH5\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u7684\u5e38\u7528\u8f6f\u4ef6\u5305\u3002 matplotlib\uff1a\u662f\u4e00\u4e2a\u8457\u540d\u7684\u5e93\uff0c\u7528\u4e8e\u5728Python\u4e2d\u7ed8\u5236\u56fe\u8868\u3002 import numpy as np import matplotlib.pyplot as plt import h5py /opt/conda/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`. from ._conv import register_converters as _register_converters \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u8fd0\u884cload_dataset\u51fd\u6570\u6765\u8bfb\u53d6\u6570\u636e\u6587\u4ef6\u4e2d\u6240\u5b58\u50a8\u7684\u6570\u636e\uff0c\u5e76\u8fd4\u56de\uff1a train_set_x_orig \uff1a\u4fdd\u5b58\u7684\u662f\u8bad\u7ec3\u96c6\u91cc\u9762\u7684\u56fe\u50cf\u6570\u636e(209\u5f2064x64\u7684\u56fe\u50cf)\uff1b train_set_y_orig \uff1a\u4fdd\u5b58\u7684\u662f\u8bad\u7ec3\u96c6\u7684\u56fe\u50cf\u5bf9\u5e94\u7684\u5206\u7c7b\u503c\uff0c\u5176\u4e2d0\u8868\u793a\u4e0d\u662f\u732b\uff0c1\u8868\u793a\u662f\u732b\u3002 test_set_x_orig \uff1a\u4fdd\u5b58\u7684\u662f\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u50cf\u6570\u636e(50\u5f2064x64\u7684\u56fe\u50cf)\uff1b test_set_y_orig \uff1a \u4fdd\u5b58\u7684\u662f\u6d4b\u8bd5\u96c6\u7684\u56fe\u50cf\u5bf9\u5e94\u7684\u5206\u7c7b\u503c\u3002 classes \uff1a \u4fdd\u5b58\u7684\u662f\u4ee5\u5b57\u8282\u7c7b\u578b\u4fdd\u5b58\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u6570\u636e\u4e3a\uff1a[b\u2019non-cat\u2019 b\u2019cat\u2019]\u3002 \u73b0\u5728\u6211\u4eec\u5c31\u8981\u628a\u8fd9\u4e9b\u6570\u636e\u52a0\u8f7d\u5230\u4e3b\u7a0b\u5e8f\u91cc\u9762\uff1a def load_dataset(): train_dataset = h5py.File('train_catvnoncat.h5', \"r\") train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels test_dataset = h5py.File('test_catvnoncat.h5', \"r\") test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0])) test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0])) return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes train_set_x_orig , train_set_y , test_set_x_orig , test_set_y , classes = load_dataset() \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u52a0\u8f7d\u7684\u6587\u4ef6\u91cc\u9762\u7684\u56fe\u7247\u90fd\u662f\u4e9b\u4ec0\u4e48\u6837\u5b50\u7684\u4ee5\u53ca\u5b58\u50a8\u7684\u5206\u7c7b\u503c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6211\u4eec\u6539\u53d8index\u503c\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e0d\u540c\u7d22\u5f15\u503c\u7684\u56fe\u7247\uff0c\u4e14train_set_y\u7684\u503c\u4ee3\u8868\u4e86\u8be5\u56fe\u50cf\u662f\u5426\u4e3a\u4e00\u53ea\u732b\u3002 index = 56 plt.imshow(train_set_x_orig[index]) print(\"train_set_y=\" + str(train_set_y[0][index])) print(\"y=\" + str(train_set_y[:,index]) + \", it's a \" + classes[np.squeeze(train_set_y[:,index])].decode(\"utf-8\") + \"' picture\") train_set_y=1 y=[1], it's a cat' picture index = 1 plt.imshow(train_set_x_orig[index]) print(\"train_set_y=\" + str(train_set_y[0][index])) print(\"y=\" + str(train_set_y[:,index]) + \", it's a \" + classes[np.squeeze(train_set_y[:,index])].decode(\"utf-8\") + \"' picture\") train_set_y=0 y=[0], it's a non-cat' picture 1.2 \u6570\u636e\u53d8\u6362 \u63a5\u4e0b\u6765\u770b\u4e00\u770b\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u7684\u5177\u4f53\u4fe1\u606f\uff0c\u9996\u5148\u4ecb\u7ecd\u4e09\u4e2a\u53d8\u91cf\u7684\u542b\u4e49\uff1a - m_train \uff1a\u8bad\u7ec3\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 - m_test \uff1a\u6d4b\u8bd5\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 - num_px \uff1a \u8bad\u7ec3\u3001\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u7247\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff08\u5747\u4e3a64x64\uff09\u3002 train_set_x_orig \u662f\u4e00\u4e2a\u7ef4\u5ea6\u4e3a(m_\u200b\u200btrain\uff0cnum_px\uff0cnum_px\uff0c3\uff09\u7684\u6570\u7ec4\u3002 m_train = train_set_y.shape[1] #\u8bad\u7ec3\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 m_test = test_set_y.shape[1] #\u6d4b\u8bd5\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 num_px = train_set_x_orig.shape[1] #\u8bad\u7ec3\u3001\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u7247\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff08\u5747\u4e3a64x64\uff09\u3002 #\u73b0\u5728\u770b\u4e00\u770b\u6211\u4eec\u52a0\u8f7d\u7684\u4e1c\u897f\u7684\u5177\u4f53\u60c5\u51b5 print (\"\u8bad\u7ec3\u96c6\u7684\u6570\u91cf: m_train = \" + str(m_train)) print (\"\u6d4b\u8bd5\u96c6\u7684\u6570\u91cf : m_test = \" + str(m_test)) print (\"\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd/\u9ad8 : num_px = \" + str(num_px)) print (\"\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f : (\" + str(num_px) + \", \" + str(num_px) + \", 3)\") print (\"\u8bad\u7ec3\u96c6_\u56fe\u7247\u7684\u7ef4\u6570 : \" + str(train_set_x_orig.shape)) print (\"\u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(train_set_y.shape)) print (\"\u6d4b\u8bd5\u96c6_\u56fe\u7247\u7684\u7ef4\u6570: \" + str(test_set_x_orig.shape)) print (\"\u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570: \" + str(test_set_y.shape)) \u8bad\u7ec3\u96c6\u7684\u6570\u91cf: m_train = 209 \u6d4b\u8bd5\u96c6\u7684\u6570\u91cf : m_test = 50 \u6bcf\u5f20\u56fe\u7247\u7684\u5bbd/\u9ad8 : num_px = 64 \u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f : (64, 64, 3) \u8bad\u7ec3\u96c6_\u56fe\u7247\u7684\u7ef4\u6570 : (209, 64, 64, 3) \u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 209) \u6d4b\u8bd5\u96c6_\u56fe\u7247\u7684\u7ef4\u6570: (50, 64, 64, 3) \u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570: (1, 50) \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8981\u628a\u7ef4\u5ea6\u4e3a (64,64,3) \u7684numpy\u6570\u7ec4\u91cd\u65b0\u6784\u9020\u4e3a (64*64*3,1) \u7684\u6570\u7ec4\uff0c\u8981\u4e58\u4ee53\u7684\u539f\u56e0\u662f\u6bcf\u5f20\u56fe\u7247\u662f\u7531 64x64 \u50cf\u7d20\u6784\u6210\u7684\uff0c\u800c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7531\uff08R\uff0cG\uff0cB\uff09\u4e09\u539f\u8272\u6784\u6210\u7684\uff0c\u6240\u4ee5\u8981\u4e58\u4ee53\u3002 \u5728\u6b64\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u96c6\u662f\u4e00\u4e2anumpy\u6570\u7ec4\uff0c \u6bcf\u5217\u4ee3\u8868\u4e00\u4e2a\u5e73\u5766\u7684\u56fe\u50cf \uff0c\u5e94\u8be5\u6709m_train\u548cm_test\u5217\u3002 \u5f53\u4f60\u60f3\u5c06\u5f62\u72b6\uff08a\uff0cb\uff0cc\uff0cd\uff09\u7684\u77e9\u9635X\u5e73\u94fa\u6210\u5f62\u72b6\uff08b * c * d\uff0ca\uff09\u7684\u77e9\u9635X_flatten\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a #X_flatten = X.reshape(X.shape [0]\uff0c-1).T \uff03X.T\u662fX\u7684\u8f6c\u7f6e #\u5c06\u8bad\u7ec3\u96c6\u7684\u7ef4\u5ea6\u964d\u4f4e\u5e76\u8f6c\u7f6e\u3002 train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0],-1).T #\u5c06\u6d4b\u8bd5\u96c6\u7684\u7ef4\u5ea6\u964d\u4f4e\u5e76\u8f6c\u7f6e\u3002 test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T \u8fd9\u4e00\u6bb5\u610f\u601d\u662f\u6307\u628a\u6570\u7ec4\u53d8\u4e3a209\u884c\u7684\u77e9\u9635\uff08\u56e0\u4e3a\u8bad\u7ec3\u96c6\u91cc\u6709209\u5f20\u56fe\u7247\uff09\u6211\u4eec\u53ef\u4ee5\u7528-1\u4f7f\u5f97\u7a0b\u5e8f\u7b97\u51fa\u6765\u662f12288\u5217\uff0c\u6211\u518d\u6700\u540e\u7528\u4e00\u4e2aT\u8868\u793a\u8f6c\u7f6e\uff0c\u8fd9\u5c31\u53d8\u6210\u4e8612288\u884c\uff0c209\u5217\u3002 \u6d4b\u8bd5\u96c6\u7684\u64cd\u4f5c\u4e5f\u4e00\u6837\u3002 \u7136\u540e\u6211\u4eec\u770b\u770b\u964d\u7ef4\u4e4b\u540e\u7684\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684\uff1a print (\"\u8bad\u7ec3\u96c6\u964d\u7ef4\u6700\u540e\u7684\u7ef4\u5ea6\uff1a \" + str(train_set_x_flatten.shape)) print (\"\u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(train_set_y.shape)) print (\"\u6d4b\u8bd5\u96c6\u964d\u7ef4\u4e4b\u540e\u7684\u7ef4\u5ea6: \" + str(test_set_x_flatten.shape)) print (\"\u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(test_set_y.shape)) \u8bad\u7ec3\u96c6\u964d\u7ef4\u6700\u540e\u7684\u7ef4\u5ea6\uff1a (12288, 209) \u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 209) \u6d4b\u8bd5\u96c6\u964d\u7ef4\u4e4b\u540e\u7684\u7ef4\u5ea6: (12288, 50) \u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 50) \u4e3a\u4e86\u8868\u793a\u5f69\u8272\u56fe\u50cf\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u6307\u5b9a\u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\uff08RGB\uff09\uff0c\u56e0\u6b64\u50cf\u7d20\u503c\u5b9e\u9645\u4e0a\u662f\u4ece0\u5230255\u8303\u56f4\u5185\u7684\u4e09\u4e2a\u6570\u5b57\u7684\u5411\u91cf\u3002 \u673a\u5668\u5b66\u4e60\u4e2d\u4e00\u4e2a\u5e38\u89c1\u7684\u9884\u5904\u7406\u6b65\u9aa4\u662f \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5c45\u4e2d\u548c\u6807\u51c6\u5316 \uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u51cf\u53bb\u6bcf\u4e2a\u793a\u4f8b\u4e2d\u6574\u4e2anumpy\u6570\u7ec4\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u793a\u4f8b\u9664\u4ee5\u6574\u4e2anumpy\u6570\u7ec4\u7684\u6807\u51c6\u504f\u5dee\u3002 \u4f46\u5bf9\u4e8e\u56fe\u7247\u6570\u636e\u96c6\uff0c\u5b83\u66f4\u7b80\u5355\uff0c\u66f4\u65b9\u4fbf\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5c06 \u6570\u636e\u96c6\u7684\u6bcf\u4e00\u884c\u9664\u4ee5255 \uff08\u50cf\u7d20\u901a\u9053\u7684\u6700\u5927\u503c\uff09\uff0c\u56e0\u4e3a\u5728RGB\u4e2d\u4e0d\u5b58\u5728\u6bd4255\u5927\u7684\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u7684\u9664\u4ee5255\uff0c\u8ba9\u6807\u51c6\u5316\u7684\u6570\u636e\u4f4d\u4e8e[0,1]\u4e4b\u95f4\u3002 train_set_x = train_set_x_flatten / 255 test_set_x = test_set_x_flatten / 255 2 \u795e\u7ecf\u7f51\u7edc\u7684\u642d\u5efa \u6570\u636e\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u6211\u4eec\u9700\u8981\u5f00\u59cb\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002 \u4ee5\u4e0b\u662f\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a \u5bf9\u4e8e $x(i)$: $${{z}^{(i)}}={{w}^{T}}{{x}^{(i)}}+b$$ $$\\hat{y}^{(i)}=a(i)=sigmoid(z(i))$$ $$L\\left( \\hat{y},y \\right)=-y\\log(\\hat{y})-(1-y)\\log (1-\\hat{y})$$ \u7136\u540e\u901a\u8fc7\u5bf9\u6240\u6709\u8bad\u7ec3\u6837\u4f8b\u6c42\u548c\u6765\u8ba1\u7b97\u6210\u672c: $$ J\\left( w,b \\right)=\\frac{1}{m}\\sum\\limits_{i=1}^{m}{L\\left( {{{\\hat{y}}}^{(i)}},{{y}^{(i)}} \\right)}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}{\\left( -{{y}^{(i)}}\\log {{{\\hat{y}}}^{(i)}}-(1-{{y}^{(i)}})\\log (1-{{{\\hat{y}}}^{(i)}}) \\right)} $$ \u5efa\u7acb\u795e\u7ecf\u7f51\u7edc\u7684\u4e3b\u8981\u6b65\u9aa4\u662f\uff1a 1. \u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\uff08\u4f8b\u5982\u8f93\u5165\u7279\u5f81\u7684\u6570\u91cf\uff09 2. \u521d\u59cb\u5316\u6a21\u578b\u7684\u53c2\u6570 3. \u5faa\u73af\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u635f\u5931\uff08\u6b63\u5411\u4f20\u64ad\uff09 2. \u8ba1\u7b97\u5f53\u524d\u68af\u5ea6\uff08\u53cd\u5411\u4f20\u64ad\uff09 3. \u66f4\u65b0\u53c2\u6570\uff08\u68af\u5ea6\u4e0b\u964d\uff09 2.1 Sigmoid\u51fd\u6570 \u73b0\u5728\u6784\u5efasigmoid()\uff0c\u9700\u8981\u4f7f\u7528 $sigmoid(w ^ T x + b)$ \u8ba1\u7b97\u6765\u505a\u51fa\u9884\u6d4b\u3002 \u5176\u4e2d\uff0csigmoid\u4ee3\u8868\u4e00\u4e2a\u5e38\u7528\u7684\u903b\u8f91\u51fd\u6570\u4e3aS\u5f62\u51fd\u6570\uff08Sigmoid function\uff09\uff0c\u516c\u5f0f\u4e3a\uff1a \\[g\\left( z \\right)=\\frac{1}{1+{{e}^{-z}}}\\] \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u7f16\u5199\u4ee3\u7801\u5b9e\u73b0Sigmoid\u51fd\u6570 \uff0c\u7f16\u5199\u540e\u8bd5\u7740\u6d4b\u8bd5\u4e00\u4e9b\u503c\uff0c\u5982\u679c x \u7684\u6b63\u503c\u8f83\u5927\uff0c\u5219\u51fd\u6570\u503c\u5e94\u63a5\u8fd11\uff1b\u5982\u679c x \u7684\u8d1f\u503c\u8f83\u5927\uff0c\u5219\u51fd\u6570\u503c\u5e94\u63a5\u8fd10\u3002\u800c\u5bf9\u4e8e x \u7b49\u4e8e0\u65f6\uff0c\u5219\u51fd\u6570\u503c\u4e3a0.5\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def sigmoid(z): \"\"\" \u53c2\u6570\uff1a z - \u4efb\u4f55\u5927\u5c0f\u7684\u6807\u91cf\u6216numpy\u6570\u7ec4\u3002 \u8fd4\u56de\uff1a s - sigmoid\uff08z\uff09 \"\"\" s = 1/(1+np.exp(-z)) return s #\u6d4b\u8bd5sigmoid() print(\"====================\u6d4b\u8bd5sigmoid====================\") print (\"sigmoid(0) = \" + str(sigmoid(0))) print (\"sigmoid(9.2) = \" + str(sigmoid(9.2))) ====================\u6d4b\u8bd5sigmoid==================== sigmoid(0) = 0.5 sigmoid(9.2) = 0.9998989708060922 2.2 \u521d\u59cb\u5316\u53c2\u6570 \u63a5\u4e0b\u6765\uff0c\u5728\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u53c2\u6570w\u548cb\uff0c\u5c06w\u521d\u59cb\u5316\u4e3a\u6307\u5b9a\u7ef4\u5ea6\u7684\u96f6\u5411\u91cf\uff0cb\u521d\u59cb\u5316\u4e3a0\u3002 def initialize_with_zeros(dim): \"\"\" \u6b64\u51fd\u6570\u4e3aw\u521b\u5efa\u4e00\u4e2a\u7ef4\u5ea6\u4e3a\uff08dim\uff0c1\uff09\u76840\u5411\u91cf\uff0c\u5e76\u5c06b\u521d\u59cb\u5316\u4e3a0\u3002 \u53c2\u6570\uff1a dim - \u6211\u4eec\u60f3\u8981\u7684w\u77e2\u91cf\u7684\u5927\u5c0f\uff08\u6216\u8005\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u53c2\u6570\u6570\u91cf\uff09 \u8fd4\u56de\uff1a w - \u7ef4\u5ea6\u4e3a\uff08dim\uff0c1\uff09\u7684\u521d\u59cb\u5316\u5411\u91cf\u3002 b - \u521d\u59cb\u5316\u7684\u6807\u91cf\uff08\u5bf9\u5e94\u4e8e\u504f\u5dee\uff09 \"\"\" w = np.zeros((dim,1)) b = 0 #\u4f7f\u7528\u65ad\u8a00\u6765\u786e\u4fdd\u6211\u8981\u7684\u6570\u636e\u662f\u6b63\u786e\u7684 assert(w.shape == (dim, 1)) #w\u7684\u7ef4\u5ea6\u662f(dim,1) assert(isinstance(b, float) or isinstance(b, int)) #b\u7684\u7c7b\u578b\u662ffloat\u6216\u8005\u662fint return (w , b) 2.3 \u6210\u672c\u51fd\u6570\u548c\u68af\u5ea6 \u5bf9\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\u540e\uff0c\u53ef\u4ee5\u63a5\u7740\u5b9e\u73b0\u524d\u5411\u548c\u540e\u5411\u4f20\u64ad\u7684\u6210\u672c\u51fd\u6570\u53ca\u5176\u68af\u5ea6\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u53c2\u6570\u5b66\u4e60\uff0c\u6700\u5c0f\u5316\u6210\u672c\u3002 \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9e\u73b0propagate\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0\u524d\u5411\u4f20\u64ad\u7684\u6210\u672c\u8ba1\u7b97\u548c\u540e\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u8ba1\u7b97 \u3002 \u53c2\u6570$w$\u548c$b$\u68af\u5ea6\u7684\u6c42\u89e3\uff1a $$ \\frac{\\partial J}{\\partial w}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}\\frac{\\partial J}{\\partial a^{(i)}}\\frac{\\partial a^{(i)}}{\\partial z^{(i)}}\\frac{\\partial z^{(i)}}{\\partial w} $$ $$ \\frac{\\partial J}{\\partial a^{(i)}}= -\\frac{y}{a^{(i)}}+\\frac{1-y}{1-a^{(i)}} $$ $$ \\frac{\\partial g(z)}{\\partial z}=-\\frac{1}{(1+e^{-z})^2}(-e^{-z})=\\frac{e^{-z}}{1+e^{-z}}=\\frac{1}{1+{{e}^{-z}}}\\times(1-\\frac{1}{1+{{e}^{-z}}})=g(z)(1-g(z)) $$ \u6240\u4ee5 $$ \\frac{\\partial a^{(i)}}{\\partial z^{(i)}}=a^{(i)}(1-a^{(i)}) $$ $$ \\frac{\\partial z^{(i)}}{\\partial w}=x^{(i)} $$ \u53ef\u5f97\uff0c $$ \\frac{\\partial J}{\\partial w}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}(a^{(i)}-y)x^{(i)} $$ \u6c42\u548c\u53ef\u4ee5\u4f7f\u7528numpy\u7684dot\u51fd\u6570\u901a\u8fc7\u5185\u79ef\u8ba1\u7b97\u6765\u5b9e\u73b0\u3002 \u540c\u6837\u5730\uff0c\u63a8\u5bfc\u53ef\u5f97\uff0c $$ \\frac{\\partial J}{\\partial b}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}(a^{(i)}-y) $$ \u8981\u70b9 \uff1a \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u9700\u8981\u4e0e\u51fd\u6570\u8bf4\u660e\u4e2d\u76f8\u540c\uff0c\u5176\u4e2d\u8fd4\u56de\u503cdw,db\u9700\u8981\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u8fdb\u884c\u8fd4\u56de\uff1b \u5728\u51fd\u6570\u4e2d\u9700\u8981\u5b9e\u73b0\u6b63\u5411\u4f20\u64ad\u8ba1\u7b97\u6210\u672c\u548c\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u68af\u5ea6\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def propagate(w, b, X, Y): \"\"\" \u5b9e\u73b0\u524d\u5411\u548c\u540e\u5411\u4f20\u64ad\u7684\u6210\u672c\u51fd\u6570\u53ca\u5176\u68af\u5ea6\u3002 \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u77e9\u9635\u7c7b\u578b\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u91cf\uff09 Y - \u771f\u6b63\u7684\u201c\u6807\u7b7e\u201d\u77e2\u91cf\uff08\u5982\u679c\u975e\u732b\u5219\u4e3a0\uff0c\u5982\u679c\u662f\u732b\u5219\u4e3a1\uff09\uff0c\u77e9\u9635\u7ef4\u5ea6\u4e3a(1,\u8bad\u7ec3\u6570\u636e\u6570\u91cf) \u8fd4\u56de\uff1a cost- \u903b\u8f91\u56de\u5f52\u7684\u8d1f\u5bf9\u6570\u4f3c\u7136\u6210\u672c dw - \u76f8\u5bf9\u4e8ew\u7684\u635f\u5931\u68af\u5ea6\uff0c\u56e0\u6b64\u4e0ew\u76f8\u540c\u7684\u5f62\u72b6 db - \u76f8\u5bf9\u4e8eb\u7684\u635f\u5931\u68af\u5ea6\uff0c\u56e0\u6b64\u4e0eb\u7684\u5f62\u72b6\u76f8\u540c \"\"\" m = X.shape[1] #\u6b63\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u6fc0\u6d3b\u503c\u3002 A = sigmoid(np.dot(w.T,X) + b) #\u8ba1\u7b97\u6210\u672c cost = -(1/m)*np.sum(Y*np.log(A)+(1-Y)*np.log(1-A)) #\u53cd\u5411\u4f20\u64ad dw = (1/m)*np.dot(X,(A-Y).T) db = (1/m)*np.sum(A-Y) #\u4f7f\u7528\u65ad\u8a00\u786e\u4fdd\u6211\u7684\u6570\u636e\u662f\u6b63\u786e\u7684 assert(dw.shape == w.shape) assert(db.dtype == float) cost = np.squeeze(cost) assert(cost.shape == ()) #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u628adw\u548cdb\u4fdd\u5b58\u8d77\u6765\u3002 grads ={\"dw\":dw,\"db\":db} return (grads , cost) #\u6d4b\u8bd5\u4e00\u4e0bpropagate print(\"====================\u6d4b\u8bd5propagate====================\") #\u521d\u59cb\u5316\u4e00\u4e9b\u53c2\u6570 w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) grads, cost = propagate(w, b, X, Y) print (\"dw = \" + str(grads[\"dw\"])) print (\"db = \" + str(grads[\"db\"])) print (\"cost = \" + str(cost)) ====================\u6d4b\u8bd5propagate==================== 6.000064773192205 dw = [[0.99993216] [1.99980262]] db = 0.49993523062470574 cost = 6.000064773192205 2.4 \u4f18\u5316\u51fd\u6570 \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9a\u4e49optimize\u51fd\u6570\u901a\u8fc7\u4f7f\u7528propagate\u51fd\u6570\u8ba1\u7b97\u6210\u672c\u548c\u68af\u5ea6\u6765\u6700\u5c0f\u5316\u6210\u672c\uff0c\u5e76\u5b66\u4e60\u6700\u4f18\u53c2\u6570w\u548cb \u3002\u5bf9\u4e8e\u53c2\u6570 $\\theta$ \uff0c\u66f4\u65b0\u89c4\u5219\u662f $ \\theta = \\theta - \\alpha \\text{ } d\\theta$\uff08\u68af\u5ea6\u4e0b\u964d\u6cd5\uff09\uff0c\u5176\u4e2d $\\alpha$ \u662f\u5b66\u4e60\u7387\u3002 \u8981\u70b9 \uff1a - \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u5217\u8868\u5982\u51fd\u6570\u8bf4\u660e\u4e2d\u6240\u793a\uff0c\u6ce8\u610f\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578b\uff1b - \u6211\u4eec\u9700\u8981\u5199\u4e0b\u4e24\u4e2a\u6b65\u9aa4\u5e76\u904d\u5386\u5b83\u4eec\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u53c2\u6570\u7684\u6210\u672c\u548c\u68af\u5ea6\uff0c\u4f7f\u7528propagate\uff08\uff09\u3002 2. \u4f7f\u7528w\u548cb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\u5219\u66f4\u65b0\u53c2\u6570\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def optimize(w , b , X , Y , num_iterations , learning_rate , print_cost = False): \"\"\" \u6b64\u51fd\u6570\u901a\u8fc7\u8fd0\u884c\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u6765\u4f18\u5316w\u548cb \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\uff09\u7684\u6570\u7ec4\u3002 Y - \u771f\u6b63\u7684\u201c\u6807\u7b7e\u201d\u77e2\u91cf\uff08\u5982\u679c\u975e\u732b\u5219\u4e3a0\uff0c\u5982\u679c\u662f\u732b\u5219\u4e3a1\uff09\uff0c\u77e9\u9635\u7ef4\u5ea6\u4e3a(1,\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf) num_iterations - \u4f18\u5316\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570 learning_rate - \u68af\u5ea6\u4e0b\u964d\u66f4\u65b0\u89c4\u5219\u7684\u5b66\u4e60\u7387 print_cost - \u6bcf100\u6b65\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c \u8fd4\u56de\uff1a params - \u5305\u542b\u6743\u91cdw\u548c\u504f\u5deeb\u7684`\u5b57\u5178` grads - \u5305\u542b\u6743\u91cd\u548c\u504f\u5dee\u76f8\u5bf9\u4e8e\u6210\u672c\u51fd\u6570\u7684\u68af\u5ea6\u7684`\u5b57\u5178` costs - \u4f18\u5316\u671f\u95f4\u8ba1\u7b97\u7684\u6240\u6709\u6210\u672c`\u5217\u8868`\uff0c\u5c06\u7528\u4e8e\u7ed8\u5236\u5b66\u4e60\u66f2\u7ebf\u3002 \"\"\" costs = [] for i in range(num_iterations): grads, cost = propagate(w,b,X,Y) dw = grads[\"dw\"] db = grads[\"db\"] w = w - learning_rate*dw #\u66f4\u65b0\u53c2\u6570w b = b - learning_rate*db #\u66f4\u65b0\u53c2\u6570b #\u8bb0\u5f55\u6210\u672c if i % 100 == 0: costs.append(cost) #\u6253\u5370\u6210\u672c\u6570\u636e if (print_cost) and (i % 100 == 0): print(\"\u8fed\u4ee3\u7684\u6b21\u6570: %i \uff0c \u8bef\u5dee\u503c\uff1a %f\" % (i,cost)) params = { \"w\" : w, \"b\" : b } grads = { \"dw\": dw, \"db\": db } return (params , grads , costs) #\u6d4b\u8bd5optimize print(\"====================\u6d4b\u8bd5optimize====================\") w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) params , grads , costs = optimize(w , b , X , Y , num_iterations=100 , learning_rate = 0.009 , print_cost = False) print (\"w = \" + str(params[\"w\"])) print (\"b = \" + str(params[\"b\"])) print (\"dw = \" + str(grads[\"dw\"])) print (\"db = \" + str(grads[\"db\"])) ====================\u6d4b\u8bd5optimize==================== w = [[0.1124579 ] [0.23106775]] b = 1.5593049248448891 dw = [[0.90158428] [1.76250842]] db = 0.4304620716786828 2.5 \u5b9e\u73b0\u9884\u6d4b\u51fd\u6570 \u901a\u8fc7\u4f18\u5316\u51fd\u6570\u53ef\u4ee5\u8f93\u51fa\u5df2\u5b66\u4e60\u7684w\u548cb\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528w\u548cb\u6765\u9884\u6d4b\u6570\u636e\u96c6X\u7684\u6807\u7b7e\u3002 \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9e\u73b0\u9884\u6d4b\u51fd\u6570predict\uff08\uff09 \u3002 \u8ba1\u7b97\u9884\u6d4b\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a 1. \u8ba1\u7b97$\\bar{Y}=A=\\sigma(w^TX+b)$ 2. \u5c06a\u7684\u503c\u53d8\u4e3a0\uff08\u5982\u679c\u6fc0\u6d3b\u503c<= 0.5\uff09\u6216\u8005\u4e3a1\uff08\u5982\u679c\u6fc0\u6d3b\u503c> 0.5\uff09 \u7136\u540e\u5c06\u9884\u6d4b\u503c\u5b58\u50a8\u5728\u5411\u91cfY_prediction\u4e2d\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def predict(w , b , X ): \"\"\" \u4f7f\u7528\u5b66\u4e60\u903b\u8f91\u56de\u5f52\u53c2\u6570logistic \uff08w\uff0cb\uff09\u9884\u6d4b\u6807\u7b7e\u662f0\u8fd8\u662f1\uff0c \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\uff09\u7684\u6570\u636e \u8fd4\u56de\uff1a Y_prediction - \u5305\u542bX\u4e2d\u6240\u6709\u56fe\u7247\u7684\u6240\u6709\u9884\u6d4b\u30100 | 1\u3011\u7684\u4e00\u4e2anumpy\u6570\u7ec4\uff08\u5411\u91cf\uff09 \"\"\" #\u8ba1\u7b97\u9884\u6d4b\u732b\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u7684\u6982\u7387 m = X.shape[1] #\u56fe\u7247\u7684\u6570\u91cf Y_prediction = np.zeros((1,m)) #\u8ba1\u9884\u6d4b\u732b\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u7684\u6982\u7387 A = sigmoid(np.dot(w.T,X)+b) for i in range(A.shape[1]): #\u5c06\u6982\u7387a [0\uff0ci]\u8f6c\u6362\u4e3a\u5b9e\u9645\u9884\u6d4bp [0\uff0ci] Y_prediction[0,i] = \"1\" if A[0,i] > 0.5 else \"0\" #\u4f7f\u7528\u65ad\u8a00 assert(Y_prediction.shape == (1,m)) return Y_prediction #\u6d4b\u8bd5predict print(\"====================\u6d4b\u8bd5predict====================\") w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) print(\"predictions = \" + str(predict(w, b, X))) ====================\u6d4b\u8bd5predict==================== predictions = [[1. 1.]] 2.6 \u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6a21\u578b \u56de\u987e\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u6b65\u9aa4\uff1a 1. \u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\uff08\u4f8b\u5982\u8f93\u5165\u7279\u5f81\u7684\u6570\u91cf\uff09 2. \u521d\u59cb\u5316\u6a21\u578b\u7684\u53c2\u6570 3. \u5faa\u73af\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u635f\u5931\uff08\u6b63\u5411\u4f20\u64ad\uff09 2. \u8ba1\u7b97\u5f53\u524d\u68af\u5ea6\uff08\u53cd\u5411\u4f20\u64ad\uff09 3. \u66f4\u65b0\u53c2\u6570\uff08\u68af\u5ea6\u4e0b\u964d\uff09 \u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u53c2\u6570\u7684\u521d\u59cb\u5316\u3001\u6210\u672c\u548c\u68af\u5ea6\u7684\u8ba1\u7b97\u3001\u53c2\u6570\u66f4\u65b0\u51fd\u6570\u4ee5\u53ca\u9884\u6d4b\u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u642d\u5efa\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5b9a\u4e49model()\u51fd\u6570 \u3002 \u8981\u70b9 \uff1a - \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u5217\u8868\u5982\u51fd\u6570\u8bf4\u660e\u6240\u793a\uff1b - \u9700\u8981\u5206\u522b\u8ba1\u7b97\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387\u5e76\u8f93\u51fa\u3002 def model(X_train , Y_train , X_test , Y_test , num_iterations = 2000 , learning_rate = 0.5 , print_cost = False): \"\"\" \u901a\u8fc7\u8c03\u7528\u4e4b\u524d\u5b9e\u73b0\u7684\u51fd\u6570\u6765\u6784\u5efa\u903b\u8f91\u56de\u5f52\u6a21\u578b \u53c2\u6570\uff1a X_train - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0cm_train\uff09\u7684\u8bad\u7ec3\u96c6 Y_train - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff081\uff0cm_train\uff09\uff08\u77e2\u91cf\uff09\u7684\u8bad\u7ec3\u6807\u7b7e\u96c6 X_test - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0cm_test\uff09\u7684\u6d4b\u8bd5\u96c6 Y_test - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff081\uff0cm_test\uff09\u7684\uff08\u5411\u91cf\uff09\u7684\u6d4b\u8bd5\u6807\u7b7e\u96c6 num_iterations - \u8868\u793a\u7528\u4e8e\u4f18\u5316\u53c2\u6570\u7684\u8fed\u4ee3\u6b21\u6570\u7684\u8d85\u53c2\u6570 learning_rate - \u8868\u793aoptimize\uff08\uff09\u66f4\u65b0\u89c4\u5219\u4e2d\u4f7f\u7528\u7684\u5b66\u4e60\u901f\u7387\u7684\u8d85\u53c2\u6570 print_cost - \u8bbe\u7f6e\u4e3atrue\u4ee5\u6bcf100\u6b21\u8fed\u4ee3\u6253\u5370\u6210\u672c \u8fd4\u56de\uff1a d - \u5305\u542b\u6709\u5173\u6a21\u578b\u4fe1\u606f\u7684\u5b57\u5178\u3002 \"\"\" w , b = initialize_with_zeros(X_train.shape[0]) parameters , grads , costs = optimize(w,b,X_train,Y_train,num_iterations,learning_rate,print_cost) #\u4ece\u5b57\u5178\u201c\u53c2\u6570\u201d\u4e2d\u68c0\u7d22\u53c2\u6570w\u548cb w , b = parameters[\"w\"],parameters[\"b\"] #\u9884\u6d4b\u6d4b\u8bd5/\u8bad\u7ec3\u96c6\u7684\u4f8b\u5b50 Y_prediction_test = predict(w,b,X_test) Y_prediction_train = predict(w,b,X_train) #\u6253\u5370\u8bad\u7ec3\u540e\u7684\u51c6\u786e\u6027 print(\"\u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a\" , format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100) ,\"%\") print(\"\u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a\" , format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100) ,\"%\") d = { \"costs\" : costs, \"Y_prediction_test\" : Y_prediction_test, \"Y_prediciton_train\" : Y_prediction_train, \"w\" : w, \"b\" : b, \"learning_rate\" : learning_rate, \"num_iterations\" : num_iterations } return d print(\"====================\u6d4b\u8bd5model====================\") #\u8fd9\u91cc\u52a0\u8f7d\u7684\u662f\u771f\u5b9e\u7684\u6570\u636e\uff0c\u8bf7\u53c2\u89c1\u4e0a\u9762\u7684\u4ee3\u7801\u90e8\u5206\u3002 d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True) ====================\u6d4b\u8bd5model==================== \u8fed\u4ee3\u7684\u6b21\u6570: 0 \uff0c \u8bef\u5dee\u503c\uff1a 0.693147 \u8fed\u4ee3\u7684\u6b21\u6570: 100 \uff0c \u8bef\u5dee\u503c\uff1a 0.584508 \u8fed\u4ee3\u7684\u6b21\u6570: 200 \uff0c \u8bef\u5dee\u503c\uff1a 0.466949 \u8fed\u4ee3\u7684\u6b21\u6570: 300 \uff0c \u8bef\u5dee\u503c\uff1a 0.376007 \u8fed\u4ee3\u7684\u6b21\u6570: 400 \uff0c \u8bef\u5dee\u503c\uff1a 0.331463 \u8fed\u4ee3\u7684\u6b21\u6570: 500 \uff0c \u8bef\u5dee\u503c\uff1a 0.303273 \u8fed\u4ee3\u7684\u6b21\u6570: 600 \uff0c \u8bef\u5dee\u503c\uff1a 0.279880 \u8fed\u4ee3\u7684\u6b21\u6570: 700 \uff0c \u8bef\u5dee\u503c\uff1a 0.260042 \u8fed\u4ee3\u7684\u6b21\u6570: 800 \uff0c \u8bef\u5dee\u503c\uff1a 0.242941 \u8fed\u4ee3\u7684\u6b21\u6570: 900 \uff0c \u8bef\u5dee\u503c\uff1a 0.228004 \u8fed\u4ee3\u7684\u6b21\u6570: 1000 \uff0c \u8bef\u5dee\u503c\uff1a 0.214820 \u8fed\u4ee3\u7684\u6b21\u6570: 1100 \uff0c \u8bef\u5dee\u503c\uff1a 0.203078 \u8fed\u4ee3\u7684\u6b21\u6570: 1200 \uff0c \u8bef\u5dee\u503c\uff1a 0.192544 \u8fed\u4ee3\u7684\u6b21\u6570: 1300 \uff0c \u8bef\u5dee\u503c\uff1a 0.183033 \u8fed\u4ee3\u7684\u6b21\u6570: 1400 \uff0c \u8bef\u5dee\u503c\uff1a 0.174399 \u8fed\u4ee3\u7684\u6b21\u6570: 1500 \uff0c \u8bef\u5dee\u503c\uff1a 0.166521 \u8fed\u4ee3\u7684\u6b21\u6570: 1600 \uff0c \u8bef\u5dee\u503c\uff1a 0.159305 \u8fed\u4ee3\u7684\u6b21\u6570: 1700 \uff0c \u8bef\u5dee\u503c\uff1a 0.152667 \u8fed\u4ee3\u7684\u6b21\u6570: 1800 \uff0c \u8bef\u5dee\u503c\uff1a 0.146542 \u8fed\u4ee3\u7684\u6b21\u6570: 1900 \uff0c \u8bef\u5dee\u503c\uff1a 0.140872 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 99.04306220095694 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 70.0 % 3 \u6a21\u578b\u7ed3\u679c\u5206\u6790 \u5728\u4e0a\u8ff0\u7684\u6a21\u578b\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e0a\u7684\u4e0d\u540c\u8868\u73b0\u3002\u5f53\u6211\u4eec\u4fee\u6539\u5b66\u4e60\u7387\u548c\u8fed\u4ee3\u6b21\u6570\u65f6\uff0c\u51c6\u786e\u7387\u4f1a\u6709\u4e9b\u8bb8\u7684\u53d8\u5316\u3002\u73b0\u5728\u6211\u4eec\u5c06\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6210\u672c\u4f18\u5316\u8fc7\u7a0b\u53ef\u89c6\u5316\uff0c\u76f4\u89c2\u7684\u89c2\u5bdf\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u3002 #\u7ed8\u5236\u56fe costs = np.squeeze(d['costs']) plt.plot(costs) plt.ylabel('cost') plt.xlabel('iterations (per hundreds)') plt.title(\"Learning rate =\" + str(d[\"learning_rate\"])) plt.show() \u53ef\u4ee5\u770b\u5230\u5728\u6bcf\u6b21\u7684\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6210\u672c\u503c\u90fd\u5728\u964d\u4f4e\uff0c\u8bf4\u660e\u6a21\u578b\u53c2\u6570\u6b63\u5728\u88ab\u5b66\u4e60\u3002 3.1 \u5b66\u4e60\u7387\u7684\u9009\u62e9 \u5728\u6a21\u578b\u53c2\u6570\u4e2d\u6709\u4e00\u4e2a\u201c\u5b66\u4e60\u7387\u201d\u7684\u6982\u5ff5\uff0c\u5b66\u4e60\u7387\u51b3\u5b9a\u4e86\u6a21\u578b\u66f4\u65b0\u53c2\u6570\u7684\u901f\u5ea6\uff0c\u5982\u679c\u5b66\u4e60\u7387\u8bbe\u7f6e\u7684\u8fc7\u9ad8\uff0c\u6a21\u578b\u53ef\u80fd\u4f1a\u201c\u8d85\u8fc7\u201d\u6700\u5c0f\u503c\uff0c\u53cd\u4e4b\uff0c\u5219\u4f1a\u9020\u6210\u8fc7\u6162\u7684\u6536\u655b\u901f\u5ea6\u3002 \u63a5\u4e0b\u6765\uff0c\u53ef\u4ee5\u6bd4\u8f83\u4e00\u4e0b\u5728\u4f60\u7684\u6a21\u578b\u4e0a\u9009\u7528\u4e0d\u540c\u5b66\u4e60\u7387\u65f6\u6a21\u578b\u7684\u53d8\u5316\u3002 learning_rates = [0.01, 0.001, 0.0001] models = {} for i in learning_rates: print (\"learning rate is: \" + str(i)) models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False) print ('\\n' + \"-------------------------------------------------------\" + '\\n') for i in learning_rates: plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"])) plt.ylabel('cost') plt.xlabel('iterations') legend = plt.legend(loc='upper center', shadow=True) frame = legend.get_frame() frame.set_facecolor('0.90') plt.show() learning rate is: 0.01 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 99.52153110047847 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 68.0 % ------------------------------------------------------- learning rate is: 0.001 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 88.99521531100478 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 64.0 % ------------------------------------------------------- learning rate is: 0.0001 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 68.42105263157895 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 36.0 % -------------------------------------------------------","title":"\u795e\u7ecf\u7f51\u7edc\u903b\u8f91\u56de\u5f52"},{"location":"AI_learn/nnLogistic/#1-logistic","text":"","title":"\u7ec3\u4e601-\u5177\u6709\u795e\u7ecf\u7f51\u7edc\u601d\u7ef4\u7684Logistic\u56de\u5f52"},{"location":"AI_learn/nnLogistic/#1","text":"","title":"1 \u6570\u636e\u9884\u5904\u7406"},{"location":"AI_learn/nnLogistic/#11","text":"\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u6709\u9700\u8981\u5f15\u5165\u7684\u5e93\uff1a numpy \uff1a\u662f\u7528Python\u8fdb\u884c\u79d1\u5b66\u8ba1\u7b97\u7684\u57fa\u672c\u8f6f\u4ef6\u5305\u3002 h5py\uff1a\u662f\u4e0eH5\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u7684\u5e38\u7528\u8f6f\u4ef6\u5305\u3002 matplotlib\uff1a\u662f\u4e00\u4e2a\u8457\u540d\u7684\u5e93\uff0c\u7528\u4e8e\u5728Python\u4e2d\u7ed8\u5236\u56fe\u8868\u3002 import numpy as np import matplotlib.pyplot as plt import h5py /opt/conda/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`. from ._conv import register_converters as _register_converters \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u8fd0\u884cload_dataset\u51fd\u6570\u6765\u8bfb\u53d6\u6570\u636e\u6587\u4ef6\u4e2d\u6240\u5b58\u50a8\u7684\u6570\u636e\uff0c\u5e76\u8fd4\u56de\uff1a train_set_x_orig \uff1a\u4fdd\u5b58\u7684\u662f\u8bad\u7ec3\u96c6\u91cc\u9762\u7684\u56fe\u50cf\u6570\u636e(209\u5f2064x64\u7684\u56fe\u50cf)\uff1b train_set_y_orig \uff1a\u4fdd\u5b58\u7684\u662f\u8bad\u7ec3\u96c6\u7684\u56fe\u50cf\u5bf9\u5e94\u7684\u5206\u7c7b\u503c\uff0c\u5176\u4e2d0\u8868\u793a\u4e0d\u662f\u732b\uff0c1\u8868\u793a\u662f\u732b\u3002 test_set_x_orig \uff1a\u4fdd\u5b58\u7684\u662f\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u50cf\u6570\u636e(50\u5f2064x64\u7684\u56fe\u50cf)\uff1b test_set_y_orig \uff1a \u4fdd\u5b58\u7684\u662f\u6d4b\u8bd5\u96c6\u7684\u56fe\u50cf\u5bf9\u5e94\u7684\u5206\u7c7b\u503c\u3002 classes \uff1a \u4fdd\u5b58\u7684\u662f\u4ee5\u5b57\u8282\u7c7b\u578b\u4fdd\u5b58\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u6570\u636e\u4e3a\uff1a[b\u2019non-cat\u2019 b\u2019cat\u2019]\u3002 \u73b0\u5728\u6211\u4eec\u5c31\u8981\u628a\u8fd9\u4e9b\u6570\u636e\u52a0\u8f7d\u5230\u4e3b\u7a0b\u5e8f\u91cc\u9762\uff1a def load_dataset(): train_dataset = h5py.File('train_catvnoncat.h5', \"r\") train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels test_dataset = h5py.File('test_catvnoncat.h5', \"r\") test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0])) test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0])) return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes train_set_x_orig , train_set_y , test_set_x_orig , test_set_y , classes = load_dataset() \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u52a0\u8f7d\u7684\u6587\u4ef6\u91cc\u9762\u7684\u56fe\u7247\u90fd\u662f\u4e9b\u4ec0\u4e48\u6837\u5b50\u7684\u4ee5\u53ca\u5b58\u50a8\u7684\u5206\u7c7b\u503c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6211\u4eec\u6539\u53d8index\u503c\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e0d\u540c\u7d22\u5f15\u503c\u7684\u56fe\u7247\uff0c\u4e14train_set_y\u7684\u503c\u4ee3\u8868\u4e86\u8be5\u56fe\u50cf\u662f\u5426\u4e3a\u4e00\u53ea\u732b\u3002 index = 56 plt.imshow(train_set_x_orig[index]) print(\"train_set_y=\" + str(train_set_y[0][index])) print(\"y=\" + str(train_set_y[:,index]) + \", it's a \" + classes[np.squeeze(train_set_y[:,index])].decode(\"utf-8\") + \"' picture\") train_set_y=1 y=[1], it's a cat' picture index = 1 plt.imshow(train_set_x_orig[index]) print(\"train_set_y=\" + str(train_set_y[0][index])) print(\"y=\" + str(train_set_y[:,index]) + \", it's a \" + classes[np.squeeze(train_set_y[:,index])].decode(\"utf-8\") + \"' picture\") train_set_y=0 y=[0], it's a non-cat' picture","title":"1.1 \u6570\u636e\u52a0\u8f7d\u548c\u67e5\u770b"},{"location":"AI_learn/nnLogistic/#12","text":"\u63a5\u4e0b\u6765\u770b\u4e00\u770b\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u7684\u5177\u4f53\u4fe1\u606f\uff0c\u9996\u5148\u4ecb\u7ecd\u4e09\u4e2a\u53d8\u91cf\u7684\u542b\u4e49\uff1a - m_train \uff1a\u8bad\u7ec3\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 - m_test \uff1a\u6d4b\u8bd5\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 - num_px \uff1a \u8bad\u7ec3\u3001\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u7247\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff08\u5747\u4e3a64x64\uff09\u3002 train_set_x_orig \u662f\u4e00\u4e2a\u7ef4\u5ea6\u4e3a(m_\u200b\u200btrain\uff0cnum_px\uff0cnum_px\uff0c3\uff09\u7684\u6570\u7ec4\u3002 m_train = train_set_y.shape[1] #\u8bad\u7ec3\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 m_test = test_set_y.shape[1] #\u6d4b\u8bd5\u96c6\u91cc\u56fe\u7247\u7684\u6570\u91cf\u3002 num_px = train_set_x_orig.shape[1] #\u8bad\u7ec3\u3001\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u56fe\u7247\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff08\u5747\u4e3a64x64\uff09\u3002 #\u73b0\u5728\u770b\u4e00\u770b\u6211\u4eec\u52a0\u8f7d\u7684\u4e1c\u897f\u7684\u5177\u4f53\u60c5\u51b5 print (\"\u8bad\u7ec3\u96c6\u7684\u6570\u91cf: m_train = \" + str(m_train)) print (\"\u6d4b\u8bd5\u96c6\u7684\u6570\u91cf : m_test = \" + str(m_test)) print (\"\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd/\u9ad8 : num_px = \" + str(num_px)) print (\"\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f : (\" + str(num_px) + \", \" + str(num_px) + \", 3)\") print (\"\u8bad\u7ec3\u96c6_\u56fe\u7247\u7684\u7ef4\u6570 : \" + str(train_set_x_orig.shape)) print (\"\u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(train_set_y.shape)) print (\"\u6d4b\u8bd5\u96c6_\u56fe\u7247\u7684\u7ef4\u6570: \" + str(test_set_x_orig.shape)) print (\"\u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570: \" + str(test_set_y.shape)) \u8bad\u7ec3\u96c6\u7684\u6570\u91cf: m_train = 209 \u6d4b\u8bd5\u96c6\u7684\u6570\u91cf : m_test = 50 \u6bcf\u5f20\u56fe\u7247\u7684\u5bbd/\u9ad8 : num_px = 64 \u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f : (64, 64, 3) \u8bad\u7ec3\u96c6_\u56fe\u7247\u7684\u7ef4\u6570 : (209, 64, 64, 3) \u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 209) \u6d4b\u8bd5\u96c6_\u56fe\u7247\u7684\u7ef4\u6570: (50, 64, 64, 3) \u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570: (1, 50) \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8981\u628a\u7ef4\u5ea6\u4e3a (64,64,3) \u7684numpy\u6570\u7ec4\u91cd\u65b0\u6784\u9020\u4e3a (64*64*3,1) \u7684\u6570\u7ec4\uff0c\u8981\u4e58\u4ee53\u7684\u539f\u56e0\u662f\u6bcf\u5f20\u56fe\u7247\u662f\u7531 64x64 \u50cf\u7d20\u6784\u6210\u7684\uff0c\u800c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7531\uff08R\uff0cG\uff0cB\uff09\u4e09\u539f\u8272\u6784\u6210\u7684\uff0c\u6240\u4ee5\u8981\u4e58\u4ee53\u3002 \u5728\u6b64\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u96c6\u662f\u4e00\u4e2anumpy\u6570\u7ec4\uff0c \u6bcf\u5217\u4ee3\u8868\u4e00\u4e2a\u5e73\u5766\u7684\u56fe\u50cf \uff0c\u5e94\u8be5\u6709m_train\u548cm_test\u5217\u3002 \u5f53\u4f60\u60f3\u5c06\u5f62\u72b6\uff08a\uff0cb\uff0cc\uff0cd\uff09\u7684\u77e9\u9635X\u5e73\u94fa\u6210\u5f62\u72b6\uff08b * c * d\uff0ca\uff09\u7684\u77e9\u9635X_flatten\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a #X_flatten = X.reshape(X.shape [0]\uff0c-1).T \uff03X.T\u662fX\u7684\u8f6c\u7f6e #\u5c06\u8bad\u7ec3\u96c6\u7684\u7ef4\u5ea6\u964d\u4f4e\u5e76\u8f6c\u7f6e\u3002 train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0],-1).T #\u5c06\u6d4b\u8bd5\u96c6\u7684\u7ef4\u5ea6\u964d\u4f4e\u5e76\u8f6c\u7f6e\u3002 test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T \u8fd9\u4e00\u6bb5\u610f\u601d\u662f\u6307\u628a\u6570\u7ec4\u53d8\u4e3a209\u884c\u7684\u77e9\u9635\uff08\u56e0\u4e3a\u8bad\u7ec3\u96c6\u91cc\u6709209\u5f20\u56fe\u7247\uff09\u6211\u4eec\u53ef\u4ee5\u7528-1\u4f7f\u5f97\u7a0b\u5e8f\u7b97\u51fa\u6765\u662f12288\u5217\uff0c\u6211\u518d\u6700\u540e\u7528\u4e00\u4e2aT\u8868\u793a\u8f6c\u7f6e\uff0c\u8fd9\u5c31\u53d8\u6210\u4e8612288\u884c\uff0c209\u5217\u3002 \u6d4b\u8bd5\u96c6\u7684\u64cd\u4f5c\u4e5f\u4e00\u6837\u3002 \u7136\u540e\u6211\u4eec\u770b\u770b\u964d\u7ef4\u4e4b\u540e\u7684\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684\uff1a print (\"\u8bad\u7ec3\u96c6\u964d\u7ef4\u6700\u540e\u7684\u7ef4\u5ea6\uff1a \" + str(train_set_x_flatten.shape)) print (\"\u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(train_set_y.shape)) print (\"\u6d4b\u8bd5\u96c6\u964d\u7ef4\u4e4b\u540e\u7684\u7ef4\u5ea6: \" + str(test_set_x_flatten.shape)) print (\"\u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : \" + str(test_set_y.shape)) \u8bad\u7ec3\u96c6\u964d\u7ef4\u6700\u540e\u7684\u7ef4\u5ea6\uff1a (12288, 209) \u8bad\u7ec3\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 209) \u6d4b\u8bd5\u96c6\u964d\u7ef4\u4e4b\u540e\u7684\u7ef4\u5ea6: (12288, 50) \u6d4b\u8bd5\u96c6_\u6807\u7b7e\u7684\u7ef4\u6570 : (1, 50) \u4e3a\u4e86\u8868\u793a\u5f69\u8272\u56fe\u50cf\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u6307\u5b9a\u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\uff08RGB\uff09\uff0c\u56e0\u6b64\u50cf\u7d20\u503c\u5b9e\u9645\u4e0a\u662f\u4ece0\u5230255\u8303\u56f4\u5185\u7684\u4e09\u4e2a\u6570\u5b57\u7684\u5411\u91cf\u3002 \u673a\u5668\u5b66\u4e60\u4e2d\u4e00\u4e2a\u5e38\u89c1\u7684\u9884\u5904\u7406\u6b65\u9aa4\u662f \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5c45\u4e2d\u548c\u6807\u51c6\u5316 \uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u51cf\u53bb\u6bcf\u4e2a\u793a\u4f8b\u4e2d\u6574\u4e2anumpy\u6570\u7ec4\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u793a\u4f8b\u9664\u4ee5\u6574\u4e2anumpy\u6570\u7ec4\u7684\u6807\u51c6\u504f\u5dee\u3002 \u4f46\u5bf9\u4e8e\u56fe\u7247\u6570\u636e\u96c6\uff0c\u5b83\u66f4\u7b80\u5355\uff0c\u66f4\u65b9\u4fbf\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5c06 \u6570\u636e\u96c6\u7684\u6bcf\u4e00\u884c\u9664\u4ee5255 \uff08\u50cf\u7d20\u901a\u9053\u7684\u6700\u5927\u503c\uff09\uff0c\u56e0\u4e3a\u5728RGB\u4e2d\u4e0d\u5b58\u5728\u6bd4255\u5927\u7684\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u7684\u9664\u4ee5255\uff0c\u8ba9\u6807\u51c6\u5316\u7684\u6570\u636e\u4f4d\u4e8e[0,1]\u4e4b\u95f4\u3002 train_set_x = train_set_x_flatten / 255 test_set_x = test_set_x_flatten / 255","title":"1.2 \u6570\u636e\u53d8\u6362"},{"location":"AI_learn/nnLogistic/#2","text":"\u6570\u636e\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u6211\u4eec\u9700\u8981\u5f00\u59cb\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002 \u4ee5\u4e0b\u662f\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a \u5bf9\u4e8e $x(i)$: $${{z}^{(i)}}={{w}^{T}}{{x}^{(i)}}+b$$ $$\\hat{y}^{(i)}=a(i)=sigmoid(z(i))$$ $$L\\left( \\hat{y},y \\right)=-y\\log(\\hat{y})-(1-y)\\log (1-\\hat{y})$$ \u7136\u540e\u901a\u8fc7\u5bf9\u6240\u6709\u8bad\u7ec3\u6837\u4f8b\u6c42\u548c\u6765\u8ba1\u7b97\u6210\u672c: $$ J\\left( w,b \\right)=\\frac{1}{m}\\sum\\limits_{i=1}^{m}{L\\left( {{{\\hat{y}}}^{(i)}},{{y}^{(i)}} \\right)}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}{\\left( -{{y}^{(i)}}\\log {{{\\hat{y}}}^{(i)}}-(1-{{y}^{(i)}})\\log (1-{{{\\hat{y}}}^{(i)}}) \\right)} $$ \u5efa\u7acb\u795e\u7ecf\u7f51\u7edc\u7684\u4e3b\u8981\u6b65\u9aa4\u662f\uff1a 1. \u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\uff08\u4f8b\u5982\u8f93\u5165\u7279\u5f81\u7684\u6570\u91cf\uff09 2. \u521d\u59cb\u5316\u6a21\u578b\u7684\u53c2\u6570 3. \u5faa\u73af\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u635f\u5931\uff08\u6b63\u5411\u4f20\u64ad\uff09 2. \u8ba1\u7b97\u5f53\u524d\u68af\u5ea6\uff08\u53cd\u5411\u4f20\u64ad\uff09 3. \u66f4\u65b0\u53c2\u6570\uff08\u68af\u5ea6\u4e0b\u964d\uff09","title":"2 \u795e\u7ecf\u7f51\u7edc\u7684\u642d\u5efa"},{"location":"AI_learn/nnLogistic/#21-sigmoid","text":"\u73b0\u5728\u6784\u5efasigmoid()\uff0c\u9700\u8981\u4f7f\u7528 $sigmoid(w ^ T x + b)$ \u8ba1\u7b97\u6765\u505a\u51fa\u9884\u6d4b\u3002 \u5176\u4e2d\uff0csigmoid\u4ee3\u8868\u4e00\u4e2a\u5e38\u7528\u7684\u903b\u8f91\u51fd\u6570\u4e3aS\u5f62\u51fd\u6570\uff08Sigmoid function\uff09\uff0c\u516c\u5f0f\u4e3a\uff1a \\[g\\left( z \\right)=\\frac{1}{1+{{e}^{-z}}}\\] \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u7f16\u5199\u4ee3\u7801\u5b9e\u73b0Sigmoid\u51fd\u6570 \uff0c\u7f16\u5199\u540e\u8bd5\u7740\u6d4b\u8bd5\u4e00\u4e9b\u503c\uff0c\u5982\u679c x \u7684\u6b63\u503c\u8f83\u5927\uff0c\u5219\u51fd\u6570\u503c\u5e94\u63a5\u8fd11\uff1b\u5982\u679c x \u7684\u8d1f\u503c\u8f83\u5927\uff0c\u5219\u51fd\u6570\u503c\u5e94\u63a5\u8fd10\u3002\u800c\u5bf9\u4e8e x \u7b49\u4e8e0\u65f6\uff0c\u5219\u51fd\u6570\u503c\u4e3a0.5\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def sigmoid(z): \"\"\" \u53c2\u6570\uff1a z - \u4efb\u4f55\u5927\u5c0f\u7684\u6807\u91cf\u6216numpy\u6570\u7ec4\u3002 \u8fd4\u56de\uff1a s - sigmoid\uff08z\uff09 \"\"\" s = 1/(1+np.exp(-z)) return s #\u6d4b\u8bd5sigmoid() print(\"====================\u6d4b\u8bd5sigmoid====================\") print (\"sigmoid(0) = \" + str(sigmoid(0))) print (\"sigmoid(9.2) = \" + str(sigmoid(9.2))) ====================\u6d4b\u8bd5sigmoid==================== sigmoid(0) = 0.5 sigmoid(9.2) = 0.9998989708060922","title":"2.1 Sigmoid\u51fd\u6570"},{"location":"AI_learn/nnLogistic/#22","text":"\u63a5\u4e0b\u6765\uff0c\u5728\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u53c2\u6570w\u548cb\uff0c\u5c06w\u521d\u59cb\u5316\u4e3a\u6307\u5b9a\u7ef4\u5ea6\u7684\u96f6\u5411\u91cf\uff0cb\u521d\u59cb\u5316\u4e3a0\u3002 def initialize_with_zeros(dim): \"\"\" \u6b64\u51fd\u6570\u4e3aw\u521b\u5efa\u4e00\u4e2a\u7ef4\u5ea6\u4e3a\uff08dim\uff0c1\uff09\u76840\u5411\u91cf\uff0c\u5e76\u5c06b\u521d\u59cb\u5316\u4e3a0\u3002 \u53c2\u6570\uff1a dim - \u6211\u4eec\u60f3\u8981\u7684w\u77e2\u91cf\u7684\u5927\u5c0f\uff08\u6216\u8005\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u53c2\u6570\u6570\u91cf\uff09 \u8fd4\u56de\uff1a w - \u7ef4\u5ea6\u4e3a\uff08dim\uff0c1\uff09\u7684\u521d\u59cb\u5316\u5411\u91cf\u3002 b - \u521d\u59cb\u5316\u7684\u6807\u91cf\uff08\u5bf9\u5e94\u4e8e\u504f\u5dee\uff09 \"\"\" w = np.zeros((dim,1)) b = 0 #\u4f7f\u7528\u65ad\u8a00\u6765\u786e\u4fdd\u6211\u8981\u7684\u6570\u636e\u662f\u6b63\u786e\u7684 assert(w.shape == (dim, 1)) #w\u7684\u7ef4\u5ea6\u662f(dim,1) assert(isinstance(b, float) or isinstance(b, int)) #b\u7684\u7c7b\u578b\u662ffloat\u6216\u8005\u662fint return (w , b)","title":"2.2 \u521d\u59cb\u5316\u53c2\u6570"},{"location":"AI_learn/nnLogistic/#23","text":"\u5bf9\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\u540e\uff0c\u53ef\u4ee5\u63a5\u7740\u5b9e\u73b0\u524d\u5411\u548c\u540e\u5411\u4f20\u64ad\u7684\u6210\u672c\u51fd\u6570\u53ca\u5176\u68af\u5ea6\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u53c2\u6570\u5b66\u4e60\uff0c\u6700\u5c0f\u5316\u6210\u672c\u3002 \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9e\u73b0propagate\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0\u524d\u5411\u4f20\u64ad\u7684\u6210\u672c\u8ba1\u7b97\u548c\u540e\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u8ba1\u7b97 \u3002 \u53c2\u6570$w$\u548c$b$\u68af\u5ea6\u7684\u6c42\u89e3\uff1a $$ \\frac{\\partial J}{\\partial w}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}\\frac{\\partial J}{\\partial a^{(i)}}\\frac{\\partial a^{(i)}}{\\partial z^{(i)}}\\frac{\\partial z^{(i)}}{\\partial w} $$ $$ \\frac{\\partial J}{\\partial a^{(i)}}= -\\frac{y}{a^{(i)}}+\\frac{1-y}{1-a^{(i)}} $$ $$ \\frac{\\partial g(z)}{\\partial z}=-\\frac{1}{(1+e^{-z})^2}(-e^{-z})=\\frac{e^{-z}}{1+e^{-z}}=\\frac{1}{1+{{e}^{-z}}}\\times(1-\\frac{1}{1+{{e}^{-z}}})=g(z)(1-g(z)) $$ \u6240\u4ee5 $$ \\frac{\\partial a^{(i)}}{\\partial z^{(i)}}=a^{(i)}(1-a^{(i)}) $$ $$ \\frac{\\partial z^{(i)}}{\\partial w}=x^{(i)} $$ \u53ef\u5f97\uff0c $$ \\frac{\\partial J}{\\partial w}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}(a^{(i)}-y)x^{(i)} $$ \u6c42\u548c\u53ef\u4ee5\u4f7f\u7528numpy\u7684dot\u51fd\u6570\u901a\u8fc7\u5185\u79ef\u8ba1\u7b97\u6765\u5b9e\u73b0\u3002 \u540c\u6837\u5730\uff0c\u63a8\u5bfc\u53ef\u5f97\uff0c $$ \\frac{\\partial J}{\\partial b}=\\frac{1}{m}\\sum\\limits_{i=1}^{m}(a^{(i)}-y) $$ \u8981\u70b9 \uff1a \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u9700\u8981\u4e0e\u51fd\u6570\u8bf4\u660e\u4e2d\u76f8\u540c\uff0c\u5176\u4e2d\u8fd4\u56de\u503cdw,db\u9700\u8981\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u8fdb\u884c\u8fd4\u56de\uff1b \u5728\u51fd\u6570\u4e2d\u9700\u8981\u5b9e\u73b0\u6b63\u5411\u4f20\u64ad\u8ba1\u7b97\u6210\u672c\u548c\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u68af\u5ea6\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def propagate(w, b, X, Y): \"\"\" \u5b9e\u73b0\u524d\u5411\u548c\u540e\u5411\u4f20\u64ad\u7684\u6210\u672c\u51fd\u6570\u53ca\u5176\u68af\u5ea6\u3002 \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u77e9\u9635\u7c7b\u578b\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u91cf\uff09 Y - \u771f\u6b63\u7684\u201c\u6807\u7b7e\u201d\u77e2\u91cf\uff08\u5982\u679c\u975e\u732b\u5219\u4e3a0\uff0c\u5982\u679c\u662f\u732b\u5219\u4e3a1\uff09\uff0c\u77e9\u9635\u7ef4\u5ea6\u4e3a(1,\u8bad\u7ec3\u6570\u636e\u6570\u91cf) \u8fd4\u56de\uff1a cost- \u903b\u8f91\u56de\u5f52\u7684\u8d1f\u5bf9\u6570\u4f3c\u7136\u6210\u672c dw - \u76f8\u5bf9\u4e8ew\u7684\u635f\u5931\u68af\u5ea6\uff0c\u56e0\u6b64\u4e0ew\u76f8\u540c\u7684\u5f62\u72b6 db - \u76f8\u5bf9\u4e8eb\u7684\u635f\u5931\u68af\u5ea6\uff0c\u56e0\u6b64\u4e0eb\u7684\u5f62\u72b6\u76f8\u540c \"\"\" m = X.shape[1] #\u6b63\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u6fc0\u6d3b\u503c\u3002 A = sigmoid(np.dot(w.T,X) + b) #\u8ba1\u7b97\u6210\u672c cost = -(1/m)*np.sum(Y*np.log(A)+(1-Y)*np.log(1-A)) #\u53cd\u5411\u4f20\u64ad dw = (1/m)*np.dot(X,(A-Y).T) db = (1/m)*np.sum(A-Y) #\u4f7f\u7528\u65ad\u8a00\u786e\u4fdd\u6211\u7684\u6570\u636e\u662f\u6b63\u786e\u7684 assert(dw.shape == w.shape) assert(db.dtype == float) cost = np.squeeze(cost) assert(cost.shape == ()) #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u628adw\u548cdb\u4fdd\u5b58\u8d77\u6765\u3002 grads ={\"dw\":dw,\"db\":db} return (grads , cost) #\u6d4b\u8bd5\u4e00\u4e0bpropagate print(\"====================\u6d4b\u8bd5propagate====================\") #\u521d\u59cb\u5316\u4e00\u4e9b\u53c2\u6570 w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) grads, cost = propagate(w, b, X, Y) print (\"dw = \" + str(grads[\"dw\"])) print (\"db = \" + str(grads[\"db\"])) print (\"cost = \" + str(cost)) ====================\u6d4b\u8bd5propagate==================== 6.000064773192205 dw = [[0.99993216] [1.99980262]] db = 0.49993523062470574 cost = 6.000064773192205","title":"2.3 \u6210\u672c\u51fd\u6570\u548c\u68af\u5ea6"},{"location":"AI_learn/nnLogistic/#24","text":"\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9a\u4e49optimize\u51fd\u6570\u901a\u8fc7\u4f7f\u7528propagate\u51fd\u6570\u8ba1\u7b97\u6210\u672c\u548c\u68af\u5ea6\u6765\u6700\u5c0f\u5316\u6210\u672c\uff0c\u5e76\u5b66\u4e60\u6700\u4f18\u53c2\u6570w\u548cb \u3002\u5bf9\u4e8e\u53c2\u6570 $\\theta$ \uff0c\u66f4\u65b0\u89c4\u5219\u662f $ \\theta = \\theta - \\alpha \\text{ } d\\theta$\uff08\u68af\u5ea6\u4e0b\u964d\u6cd5\uff09\uff0c\u5176\u4e2d $\\alpha$ \u662f\u5b66\u4e60\u7387\u3002 \u8981\u70b9 \uff1a - \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u5217\u8868\u5982\u51fd\u6570\u8bf4\u660e\u4e2d\u6240\u793a\uff0c\u6ce8\u610f\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578b\uff1b - \u6211\u4eec\u9700\u8981\u5199\u4e0b\u4e24\u4e2a\u6b65\u9aa4\u5e76\u904d\u5386\u5b83\u4eec\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u53c2\u6570\u7684\u6210\u672c\u548c\u68af\u5ea6\uff0c\u4f7f\u7528propagate\uff08\uff09\u3002 2. \u4f7f\u7528w\u548cb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\u5219\u66f4\u65b0\u53c2\u6570\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def optimize(w , b , X , Y , num_iterations , learning_rate , print_cost = False): \"\"\" \u6b64\u51fd\u6570\u901a\u8fc7\u8fd0\u884c\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u6765\u4f18\u5316w\u548cb \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\uff09\u7684\u6570\u7ec4\u3002 Y - \u771f\u6b63\u7684\u201c\u6807\u7b7e\u201d\u77e2\u91cf\uff08\u5982\u679c\u975e\u732b\u5219\u4e3a0\uff0c\u5982\u679c\u662f\u732b\u5219\u4e3a1\uff09\uff0c\u77e9\u9635\u7ef4\u5ea6\u4e3a(1,\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf) num_iterations - \u4f18\u5316\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570 learning_rate - \u68af\u5ea6\u4e0b\u964d\u66f4\u65b0\u89c4\u5219\u7684\u5b66\u4e60\u7387 print_cost - \u6bcf100\u6b65\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c \u8fd4\u56de\uff1a params - \u5305\u542b\u6743\u91cdw\u548c\u504f\u5deeb\u7684`\u5b57\u5178` grads - \u5305\u542b\u6743\u91cd\u548c\u504f\u5dee\u76f8\u5bf9\u4e8e\u6210\u672c\u51fd\u6570\u7684\u68af\u5ea6\u7684`\u5b57\u5178` costs - \u4f18\u5316\u671f\u95f4\u8ba1\u7b97\u7684\u6240\u6709\u6210\u672c`\u5217\u8868`\uff0c\u5c06\u7528\u4e8e\u7ed8\u5236\u5b66\u4e60\u66f2\u7ebf\u3002 \"\"\" costs = [] for i in range(num_iterations): grads, cost = propagate(w,b,X,Y) dw = grads[\"dw\"] db = grads[\"db\"] w = w - learning_rate*dw #\u66f4\u65b0\u53c2\u6570w b = b - learning_rate*db #\u66f4\u65b0\u53c2\u6570b #\u8bb0\u5f55\u6210\u672c if i % 100 == 0: costs.append(cost) #\u6253\u5370\u6210\u672c\u6570\u636e if (print_cost) and (i % 100 == 0): print(\"\u8fed\u4ee3\u7684\u6b21\u6570: %i \uff0c \u8bef\u5dee\u503c\uff1a %f\" % (i,cost)) params = { \"w\" : w, \"b\" : b } grads = { \"dw\": dw, \"db\": db } return (params , grads , costs) #\u6d4b\u8bd5optimize print(\"====================\u6d4b\u8bd5optimize====================\") w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) params , grads , costs = optimize(w , b , X , Y , num_iterations=100 , learning_rate = 0.009 , print_cost = False) print (\"w = \" + str(params[\"w\"])) print (\"b = \" + str(params[\"b\"])) print (\"dw = \" + str(grads[\"dw\"])) print (\"db = \" + str(grads[\"db\"])) ====================\u6d4b\u8bd5optimize==================== w = [[0.1124579 ] [0.23106775]] b = 1.5593049248448891 dw = [[0.90158428] [1.76250842]] db = 0.4304620716786828","title":"2.4 \u4f18\u5316\u51fd\u6570"},{"location":"AI_learn/nnLogistic/#25","text":"\u901a\u8fc7\u4f18\u5316\u51fd\u6570\u53ef\u4ee5\u8f93\u51fa\u5df2\u5b66\u4e60\u7684w\u548cb\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528w\u548cb\u6765\u9884\u6d4b\u6570\u636e\u96c6X\u7684\u6807\u7b7e\u3002 \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u5b9e\u73b0\u9884\u6d4b\u51fd\u6570predict\uff08\uff09 \u3002 \u8ba1\u7b97\u9884\u6d4b\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a 1. \u8ba1\u7b97$\\bar{Y}=A=\\sigma(w^TX+b)$ 2. \u5c06a\u7684\u503c\u53d8\u4e3a0\uff08\u5982\u679c\u6fc0\u6d3b\u503c<= 0.5\uff09\u6216\u8005\u4e3a1\uff08\u5982\u679c\u6fc0\u6d3b\u503c> 0.5\uff09 \u7136\u540e\u5c06\u9884\u6d4b\u503c\u5b58\u50a8\u5728\u5411\u91cfY_prediction\u4e2d\u3002 ###\u5728\u8fd9\u91cc\u586b\u5165\u4ee3\u7801### def predict(w , b , X ): \"\"\" \u4f7f\u7528\u5b66\u4e60\u903b\u8f91\u56de\u5f52\u53c2\u6570logistic \uff08w\uff0cb\uff09\u9884\u6d4b\u6807\u7b7e\u662f0\u8fd8\u662f1\uff0c \u53c2\u6570\uff1a w - \u6743\u91cd\uff0c\u5927\u5c0f\u4e0d\u7b49\u7684\u6570\u7ec4\uff08num_px * num_px * 3\uff0c1\uff09 b - \u504f\u5dee\uff0c\u4e00\u4e2a\u6807\u91cf X - \u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0c\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\uff09\u7684\u6570\u636e \u8fd4\u56de\uff1a Y_prediction - \u5305\u542bX\u4e2d\u6240\u6709\u56fe\u7247\u7684\u6240\u6709\u9884\u6d4b\u30100 | 1\u3011\u7684\u4e00\u4e2anumpy\u6570\u7ec4\uff08\u5411\u91cf\uff09 \"\"\" #\u8ba1\u7b97\u9884\u6d4b\u732b\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u7684\u6982\u7387 m = X.shape[1] #\u56fe\u7247\u7684\u6570\u91cf Y_prediction = np.zeros((1,m)) #\u8ba1\u9884\u6d4b\u732b\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u7684\u6982\u7387 A = sigmoid(np.dot(w.T,X)+b) for i in range(A.shape[1]): #\u5c06\u6982\u7387a [0\uff0ci]\u8f6c\u6362\u4e3a\u5b9e\u9645\u9884\u6d4bp [0\uff0ci] Y_prediction[0,i] = \"1\" if A[0,i] > 0.5 else \"0\" #\u4f7f\u7528\u65ad\u8a00 assert(Y_prediction.shape == (1,m)) return Y_prediction #\u6d4b\u8bd5predict print(\"====================\u6d4b\u8bd5predict====================\") w, b, X, Y = np.array([[1], [2]]), 2, np.array([[1,2], [3,4]]), np.array([[1, 0]]) print(\"predictions = \" + str(predict(w, b, X))) ====================\u6d4b\u8bd5predict==================== predictions = [[1. 1.]]","title":"2.5 \u5b9e\u73b0\u9884\u6d4b\u51fd\u6570"},{"location":"AI_learn/nnLogistic/#26","text":"\u56de\u987e\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u6b65\u9aa4\uff1a 1. \u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\uff08\u4f8b\u5982\u8f93\u5165\u7279\u5f81\u7684\u6570\u91cf\uff09 2. \u521d\u59cb\u5316\u6a21\u578b\u7684\u53c2\u6570 3. \u5faa\u73af\uff1a 1. \u8ba1\u7b97\u5f53\u524d\u635f\u5931\uff08\u6b63\u5411\u4f20\u64ad\uff09 2. \u8ba1\u7b97\u5f53\u524d\u68af\u5ea6\uff08\u53cd\u5411\u4f20\u64ad\uff09 3. \u66f4\u65b0\u53c2\u6570\uff08\u68af\u5ea6\u4e0b\u964d\uff09 \u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u53c2\u6570\u7684\u521d\u59cb\u5316\u3001\u6210\u672c\u548c\u68af\u5ea6\u7684\u8ba1\u7b97\u3001\u53c2\u6570\u66f4\u65b0\u51fd\u6570\u4ee5\u53ca\u9884\u6d4b\u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981 \u642d\u5efa\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5b9a\u4e49model()\u51fd\u6570 \u3002 \u8981\u70b9 \uff1a - \u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u5217\u8868\u5982\u51fd\u6570\u8bf4\u660e\u6240\u793a\uff1b - \u9700\u8981\u5206\u522b\u8ba1\u7b97\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387\u5e76\u8f93\u51fa\u3002 def model(X_train , Y_train , X_test , Y_test , num_iterations = 2000 , learning_rate = 0.5 , print_cost = False): \"\"\" \u901a\u8fc7\u8c03\u7528\u4e4b\u524d\u5b9e\u73b0\u7684\u51fd\u6570\u6765\u6784\u5efa\u903b\u8f91\u56de\u5f52\u6a21\u578b \u53c2\u6570\uff1a X_train - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0cm_train\uff09\u7684\u8bad\u7ec3\u96c6 Y_train - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff081\uff0cm_train\uff09\uff08\u77e2\u91cf\uff09\u7684\u8bad\u7ec3\u6807\u7b7e\u96c6 X_test - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff08num_px * num_px * 3\uff0cm_test\uff09\u7684\u6d4b\u8bd5\u96c6 Y_test - numpy\u7684\u6570\u7ec4,\u7ef4\u5ea6\u4e3a\uff081\uff0cm_test\uff09\u7684\uff08\u5411\u91cf\uff09\u7684\u6d4b\u8bd5\u6807\u7b7e\u96c6 num_iterations - \u8868\u793a\u7528\u4e8e\u4f18\u5316\u53c2\u6570\u7684\u8fed\u4ee3\u6b21\u6570\u7684\u8d85\u53c2\u6570 learning_rate - \u8868\u793aoptimize\uff08\uff09\u66f4\u65b0\u89c4\u5219\u4e2d\u4f7f\u7528\u7684\u5b66\u4e60\u901f\u7387\u7684\u8d85\u53c2\u6570 print_cost - \u8bbe\u7f6e\u4e3atrue\u4ee5\u6bcf100\u6b21\u8fed\u4ee3\u6253\u5370\u6210\u672c \u8fd4\u56de\uff1a d - \u5305\u542b\u6709\u5173\u6a21\u578b\u4fe1\u606f\u7684\u5b57\u5178\u3002 \"\"\" w , b = initialize_with_zeros(X_train.shape[0]) parameters , grads , costs = optimize(w,b,X_train,Y_train,num_iterations,learning_rate,print_cost) #\u4ece\u5b57\u5178\u201c\u53c2\u6570\u201d\u4e2d\u68c0\u7d22\u53c2\u6570w\u548cb w , b = parameters[\"w\"],parameters[\"b\"] #\u9884\u6d4b\u6d4b\u8bd5/\u8bad\u7ec3\u96c6\u7684\u4f8b\u5b50 Y_prediction_test = predict(w,b,X_test) Y_prediction_train = predict(w,b,X_train) #\u6253\u5370\u8bad\u7ec3\u540e\u7684\u51c6\u786e\u6027 print(\"\u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a\" , format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100) ,\"%\") print(\"\u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a\" , format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100) ,\"%\") d = { \"costs\" : costs, \"Y_prediction_test\" : Y_prediction_test, \"Y_prediciton_train\" : Y_prediction_train, \"w\" : w, \"b\" : b, \"learning_rate\" : learning_rate, \"num_iterations\" : num_iterations } return d print(\"====================\u6d4b\u8bd5model====================\") #\u8fd9\u91cc\u52a0\u8f7d\u7684\u662f\u771f\u5b9e\u7684\u6570\u636e\uff0c\u8bf7\u53c2\u89c1\u4e0a\u9762\u7684\u4ee3\u7801\u90e8\u5206\u3002 d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True) ====================\u6d4b\u8bd5model==================== \u8fed\u4ee3\u7684\u6b21\u6570: 0 \uff0c \u8bef\u5dee\u503c\uff1a 0.693147 \u8fed\u4ee3\u7684\u6b21\u6570: 100 \uff0c \u8bef\u5dee\u503c\uff1a 0.584508 \u8fed\u4ee3\u7684\u6b21\u6570: 200 \uff0c \u8bef\u5dee\u503c\uff1a 0.466949 \u8fed\u4ee3\u7684\u6b21\u6570: 300 \uff0c \u8bef\u5dee\u503c\uff1a 0.376007 \u8fed\u4ee3\u7684\u6b21\u6570: 400 \uff0c \u8bef\u5dee\u503c\uff1a 0.331463 \u8fed\u4ee3\u7684\u6b21\u6570: 500 \uff0c \u8bef\u5dee\u503c\uff1a 0.303273 \u8fed\u4ee3\u7684\u6b21\u6570: 600 \uff0c \u8bef\u5dee\u503c\uff1a 0.279880 \u8fed\u4ee3\u7684\u6b21\u6570: 700 \uff0c \u8bef\u5dee\u503c\uff1a 0.260042 \u8fed\u4ee3\u7684\u6b21\u6570: 800 \uff0c \u8bef\u5dee\u503c\uff1a 0.242941 \u8fed\u4ee3\u7684\u6b21\u6570: 900 \uff0c \u8bef\u5dee\u503c\uff1a 0.228004 \u8fed\u4ee3\u7684\u6b21\u6570: 1000 \uff0c \u8bef\u5dee\u503c\uff1a 0.214820 \u8fed\u4ee3\u7684\u6b21\u6570: 1100 \uff0c \u8bef\u5dee\u503c\uff1a 0.203078 \u8fed\u4ee3\u7684\u6b21\u6570: 1200 \uff0c \u8bef\u5dee\u503c\uff1a 0.192544 \u8fed\u4ee3\u7684\u6b21\u6570: 1300 \uff0c \u8bef\u5dee\u503c\uff1a 0.183033 \u8fed\u4ee3\u7684\u6b21\u6570: 1400 \uff0c \u8bef\u5dee\u503c\uff1a 0.174399 \u8fed\u4ee3\u7684\u6b21\u6570: 1500 \uff0c \u8bef\u5dee\u503c\uff1a 0.166521 \u8fed\u4ee3\u7684\u6b21\u6570: 1600 \uff0c \u8bef\u5dee\u503c\uff1a 0.159305 \u8fed\u4ee3\u7684\u6b21\u6570: 1700 \uff0c \u8bef\u5dee\u503c\uff1a 0.152667 \u8fed\u4ee3\u7684\u6b21\u6570: 1800 \uff0c \u8bef\u5dee\u503c\uff1a 0.146542 \u8fed\u4ee3\u7684\u6b21\u6570: 1900 \uff0c \u8bef\u5dee\u503c\uff1a 0.140872 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 99.04306220095694 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 70.0 %","title":"2.6 \u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6a21\u578b"},{"location":"AI_learn/nnLogistic/#3","text":"\u5728\u4e0a\u8ff0\u7684\u6a21\u578b\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e0a\u7684\u4e0d\u540c\u8868\u73b0\u3002\u5f53\u6211\u4eec\u4fee\u6539\u5b66\u4e60\u7387\u548c\u8fed\u4ee3\u6b21\u6570\u65f6\uff0c\u51c6\u786e\u7387\u4f1a\u6709\u4e9b\u8bb8\u7684\u53d8\u5316\u3002\u73b0\u5728\u6211\u4eec\u5c06\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6210\u672c\u4f18\u5316\u8fc7\u7a0b\u53ef\u89c6\u5316\uff0c\u76f4\u89c2\u7684\u89c2\u5bdf\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u3002 #\u7ed8\u5236\u56fe costs = np.squeeze(d['costs']) plt.plot(costs) plt.ylabel('cost') plt.xlabel('iterations (per hundreds)') plt.title(\"Learning rate =\" + str(d[\"learning_rate\"])) plt.show() \u53ef\u4ee5\u770b\u5230\u5728\u6bcf\u6b21\u7684\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6210\u672c\u503c\u90fd\u5728\u964d\u4f4e\uff0c\u8bf4\u660e\u6a21\u578b\u53c2\u6570\u6b63\u5728\u88ab\u5b66\u4e60\u3002","title":"3 \u6a21\u578b\u7ed3\u679c\u5206\u6790"},{"location":"AI_learn/nnLogistic/#31","text":"\u5728\u6a21\u578b\u53c2\u6570\u4e2d\u6709\u4e00\u4e2a\u201c\u5b66\u4e60\u7387\u201d\u7684\u6982\u5ff5\uff0c\u5b66\u4e60\u7387\u51b3\u5b9a\u4e86\u6a21\u578b\u66f4\u65b0\u53c2\u6570\u7684\u901f\u5ea6\uff0c\u5982\u679c\u5b66\u4e60\u7387\u8bbe\u7f6e\u7684\u8fc7\u9ad8\uff0c\u6a21\u578b\u53ef\u80fd\u4f1a\u201c\u8d85\u8fc7\u201d\u6700\u5c0f\u503c\uff0c\u53cd\u4e4b\uff0c\u5219\u4f1a\u9020\u6210\u8fc7\u6162\u7684\u6536\u655b\u901f\u5ea6\u3002 \u63a5\u4e0b\u6765\uff0c\u53ef\u4ee5\u6bd4\u8f83\u4e00\u4e0b\u5728\u4f60\u7684\u6a21\u578b\u4e0a\u9009\u7528\u4e0d\u540c\u5b66\u4e60\u7387\u65f6\u6a21\u578b\u7684\u53d8\u5316\u3002 learning_rates = [0.01, 0.001, 0.0001] models = {} for i in learning_rates: print (\"learning rate is: \" + str(i)) models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False) print ('\\n' + \"-------------------------------------------------------\" + '\\n') for i in learning_rates: plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"])) plt.ylabel('cost') plt.xlabel('iterations') legend = plt.legend(loc='upper center', shadow=True) frame = legend.get_frame() frame.set_facecolor('0.90') plt.show() learning rate is: 0.01 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 99.52153110047847 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 68.0 % ------------------------------------------------------- learning rate is: 0.001 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 88.99521531100478 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 64.0 % ------------------------------------------------------- learning rate is: 0.0001 \u8bad\u7ec3\u96c6\u51c6\u786e\u6027\uff1a 68.42105263157895 % \u6d4b\u8bd5\u96c6\u51c6\u786e\u6027\uff1a 36.0 % -------------------------------------------------------","title":"3.1 \u5b66\u4e60\u7387\u7684\u9009\u62e9"},{"location":"AI_learn/opencv-learn/","text":"opencv\u5b66\u4e60 \u5f00\u59cb \u6700\u7b80\u5355\u7684\u5c55\u793a\u4e00\u5f20\u56fe\u7247 import cv2 filepath = 'test.jpg' img = cv2.imread(filepath) cv2.namedWindow('Image') cv2.imshow('Image',img) cv2.waitKey(0) cv2.destoryAllWindows() \u4eba\u8138\u8bc6\u522b import cv2 img = cv2.imread(\"test2.jpg\") gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) classifier = cv2.CascadeClassifier( \"haarcascade_frontalface_default.xml\" ) color = (0,255,0) faceRects = classifier.detectMultiScale( gray, scaleFactor=1.2, minNeighbors=3, minSize=(32, 32)) if len(faceRects): # \u5927\u4e8e0\u5219\u68c0\u6d4b\u5230\u4eba\u8138 for faceRect in faceRects: # \u5355\u72ec\u6846\u51fa\u6bcf\u4e00\u5f20\u4eba\u8138 x, y, w, h = faceRect # \u6846\u51fa\u4eba\u8138 cv2.rectangle(img, (x, y), (x + h, y + w), color, 2) # \u5de6\u773c cv2.circle(img, (x + w // 4, y + h // 4 + 30), min(w // 8, h // 8), color) #\u53f3\u773c cv2.circle(img, (x + 3 * w // 4, y + h // 4 + 30), min(w // 8, h // 8), color) #\u5634\u5df4 cv2.rectangle(img, (x + 3 * w // 8, y + 3 * h // 4), (x + 5 * w // 8, y + 7 * h // 8), color) cv2.imshow(\"image\", img) # \u663e\u793a\u56fe\u50cf c = cv2.waitKey(10) cv2.waitKey(0) cv2.destroyAllWindows() \u6444\u50cf\u5934\u4eba\u8138\u8bc6\u522b import cv2 def discern(img): gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) cap = cv2.CascadeClassifier( \"haarcascade_frontalface_default.xml\" ) faceRects = cap.detectMultiScale( gray, scaleFactor=1.2, minNeighbors=3, minSize=(50, 50)) if len(faceRects): for faceRect in faceRects: x, y, w, h = faceRect cv2.rectangle(img, (x, y), (x + h, y + w), (0, 255, 0), 2) # \u6846\u51fa\u4eba\u8138 cv2.imshow(\"Image\", img) cap = cv2.VideoCapture(0,cv2.CAP_DSHOW) while True: ret,img = cap.read() discern(img) if cv2.waitKey(1) & 0xFF == ord(\"q\"): break cap.release() cv2.destroyAllWindows() \u5728\u56fe\u7247\u4e0a\u52a0\u6587\u5b57 import numpy from PIL import Image, ImageDraw, ImageFont import cv2 def cv2ImgAddText(img, text, left, top, textColor=(0,0,0), textSize=100): if (isinstance(img, numpy.ndarray)): #\u5224\u65ad\u662f\u5426OpenCV\u56fe\u7247\u7c7b\u578b img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) fontText = ImageFont.truetype( \"font/simsun.ttc\", textSize, encoding=\"utf-8\") draw = ImageDraw.Draw(img) draw.text((left, top), text, textColor,font=fontText) return cv2.cvtColor(numpy.asarray(img), cv2.COLOR_RGB2BGR) img = cv2.imread(\"test2.jpg\") img = cv2ImgAddText(img,\"\u4f60\u597d\",140,100) cv2.imshow(\"Image\",img) cv2.waitKey(0) cv2.destroyAllWindows()","title":"opencv\u5b66\u4e60"},{"location":"AI_learn/opencv-learn/#opencv","text":"","title":"opencv\u5b66\u4e60"},{"location":"AI_learn/opencv-learn/#_1","text":"\u6700\u7b80\u5355\u7684\u5c55\u793a\u4e00\u5f20\u56fe\u7247 import cv2 filepath = 'test.jpg' img = cv2.imread(filepath) cv2.namedWindow('Image') cv2.imshow('Image',img) cv2.waitKey(0) cv2.destoryAllWindows()","title":"\u5f00\u59cb"},{"location":"AI_learn/opencv-learn/#_2","text":"import cv2 img = cv2.imread(\"test2.jpg\") gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) classifier = cv2.CascadeClassifier( \"haarcascade_frontalface_default.xml\" ) color = (0,255,0) faceRects = classifier.detectMultiScale( gray, scaleFactor=1.2, minNeighbors=3, minSize=(32, 32)) if len(faceRects): # \u5927\u4e8e0\u5219\u68c0\u6d4b\u5230\u4eba\u8138 for faceRect in faceRects: # \u5355\u72ec\u6846\u51fa\u6bcf\u4e00\u5f20\u4eba\u8138 x, y, w, h = faceRect # \u6846\u51fa\u4eba\u8138 cv2.rectangle(img, (x, y), (x + h, y + w), color, 2) # \u5de6\u773c cv2.circle(img, (x + w // 4, y + h // 4 + 30), min(w // 8, h // 8), color) #\u53f3\u773c cv2.circle(img, (x + 3 * w // 4, y + h // 4 + 30), min(w // 8, h // 8), color) #\u5634\u5df4 cv2.rectangle(img, (x + 3 * w // 8, y + 3 * h // 4), (x + 5 * w // 8, y + 7 * h // 8), color) cv2.imshow(\"image\", img) # \u663e\u793a\u56fe\u50cf c = cv2.waitKey(10) cv2.waitKey(0) cv2.destroyAllWindows()","title":"\u4eba\u8138\u8bc6\u522b"},{"location":"AI_learn/opencv-learn/#_3","text":"import cv2 def discern(img): gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) cap = cv2.CascadeClassifier( \"haarcascade_frontalface_default.xml\" ) faceRects = cap.detectMultiScale( gray, scaleFactor=1.2, minNeighbors=3, minSize=(50, 50)) if len(faceRects): for faceRect in faceRects: x, y, w, h = faceRect cv2.rectangle(img, (x, y), (x + h, y + w), (0, 255, 0), 2) # \u6846\u51fa\u4eba\u8138 cv2.imshow(\"Image\", img) cap = cv2.VideoCapture(0,cv2.CAP_DSHOW) while True: ret,img = cap.read() discern(img) if cv2.waitKey(1) & 0xFF == ord(\"q\"): break cap.release() cv2.destroyAllWindows()","title":"\u6444\u50cf\u5934\u4eba\u8138\u8bc6\u522b"},{"location":"AI_learn/opencv-learn/#_4","text":"import numpy from PIL import Image, ImageDraw, ImageFont import cv2 def cv2ImgAddText(img, text, left, top, textColor=(0,0,0), textSize=100): if (isinstance(img, numpy.ndarray)): #\u5224\u65ad\u662f\u5426OpenCV\u56fe\u7247\u7c7b\u578b img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) fontText = ImageFont.truetype( \"font/simsun.ttc\", textSize, encoding=\"utf-8\") draw = ImageDraw.Draw(img) draw.text((left, top), text, textColor,font=fontText) return cv2.cvtColor(numpy.asarray(img), cv2.COLOR_RGB2BGR) img = cv2.imread(\"test2.jpg\") img = cv2ImgAddText(img,\"\u4f60\u597d\",140,100) cv2.imshow(\"Image\",img) cv2.waitKey(0) cv2.destroyAllWindows()","title":"\u5728\u56fe\u7247\u4e0a\u52a0\u6587\u5b57"},{"location":"AI_learn/tdxj/","text":"\u68af\u5ea6\u4e0b\u964d\u516c\u5f0f\u63a8\u5bfc \u4e0a\u81ea\u4e60\u65e0\u804a\u63a8\u7684\uff0c\u6709\u9519\u8bef\u5e0c\u671b\u53ef\u4ee5\u6307\u51fa\uff01\u611f\u6fc0\u4e0d\u5c3d","title":"\u68af\u5ea6\u4e0b\u964d\u516c\u5f0f\u63a8\u5bfc"},{"location":"AI_learn/tdxj/#_1","text":"\u4e0a\u81ea\u4e60\u65e0\u804a\u63a8\u7684\uff0c\u6709\u9519\u8bef\u5e0c\u671b\u53ef\u4ee5\u6307\u51fa\uff01\u611f\u6fc0\u4e0d\u5c3d","title":"\u68af\u5ea6\u4e0b\u964d\u516c\u5f0f\u63a8\u5bfc"},{"location":"Cookbook/chapter1/","text":"\u73b0\u5728\u6709\u4e00\u4e2a\u5305\u542b N \u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u6216\u8005\u662f\u5e8f\u5217\uff0c\u600e\u6837\u5c06\u5b83\u91cc\u9762\u7684\u503c\u89e3\u538b\u540e\u540c\u65f6\u8d4b\u503c\u7ed9 N \u4e2a\u53d8\u91cf\uff1f p = (4,5) x,y = p print(x,y) 4 5 \u5982\u679c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7\u53d8\u91cf\u4e2a\u6570\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValueError \u3002 \u90a3\u4e48\u600e\u6837\u624d\u80fd\u4ece\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u89e3\u538b\u51fa N \u4e2a\u5143\u7d20\u51fa\u6765\uff1f data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] name,shares,price,(year,*date) = data name,year,date ('ACME', 2012, [12, 21]) data = ['wlb',18,18265090197,131232141] name,age,*phone = data print(name,age,phone) wlb 18 [18265090197, 131232141] *trailing, current = [10, 8, 7, 1, 9, 5, 10, 3] print(trailing,current) [10, 8, 7, 1, 9, 5, 10] 3 \u5728\u8fed\u4ee3\u64cd\u4f5c\u6216\u8005\u5176\u4ed6\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u600e\u6837\u53ea\u4fdd\u7559\u6700\u540e\u6709\u9650\u51e0\u4e2a\u5143\u7d20\u7684\u5386\u53f2\u8bb0\u5f55\uff1f from collections import deque q = deque(maxlen=3) #\u9650\u5236\u957f\u5ea6 q.append(1) q.append(2) q.append(3) q deque([1, 2, 3]) q.append(4) q deque([2, 3, 4]) q.append(5) q deque([3, 4, 5]) q = deque() q.append(1) q.append(2) q.append(3) q.appendleft(4) q deque([4, 1, 2, 3]) q.pop() 3 q.popleft() 4 \u600e\u6837\u4ece\u4e00\u4e2a\u96c6\u5408\u4e2d\u83b7\u5f97\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684 N \u4e2a\u5143\u7d20\u5217\u8868\uff1f import heapq nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] print(heapq.nlargest(3,nums)) #\u6700\u5927\u7684\u4e09\u4e2a\u6570 [42, 37, 23] print(heapq.nsmallest(3,nums)) #\u6700\u5c0f\u7684\u4e09\u4e2a\u6570 [-4, 1, 2] portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1},{'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}] print(heapq.nlargest(3,portfolio,lambda s:s['price'])) print(heapq.nsmallest(3,portfolio,lambda s:s['price'])) [{'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'ACME', 'shares': 75, 'price': 115.65}, {'name': 'IBM', 'shares': 100, 'price': 91.1}] [{'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}] nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] import heapq heap = list(nums) heapq.heapify(heap) heap [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8] \u5806\u6700\u91cd\u8981\u7684\u7279\u6027\u5c31\u662fheap[0]\u603b\u662f\u6700\u5c0f\u90a3\u4e2a\u7684\u5143\u7d20\u3002\u6b64\u5916\uff0c\u63a5\u4e0b\u6765\u7684\u5143\u7d20\u53ef\u4f9d\u6b21\u901a\u8fc7heapq.heappop()\u65b9\u6cd5\u8f7b\u677e\u627e\u5230\u3002\u8be5\u65b9\u6cd5\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u5c0f\u7684\uff09\u5f39\u51fa\uff0c\u7136\u540e\u4ee5\u7b2c\u4e8c\u5c0f\u7684\u5143\u7d20\u53d6\u800c\u4ee3\u4e4b\uff08\u8fd9\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u662fO(logN)\uff0cN\u4ee3\u8868\u5806\u7684\u5927\u5c0f\uff09 heapq.heappop(heap) -4 heap [1, 2, 2, 23, 7, 8, 18, 23, 42, 37] heapq.heappop(heap) 1 \u600e\u6837\u5b9e\u73b0\u4e00\u4e2a\u6309\u4f18\u5148\u7ea7\u6392\u5e8f\u7684\u961f\u5217\uff1f \u5e76\u4e14\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a\u9762\u6bcf\u6b21 pop \u64cd\u4f5c\u603b\u662f\u8fd4\u56de\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u90a3\u4e2a\u5143\u7d20 \u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217 import heapq class PriorityQueue: def __init__(self): self._queue = [] self._index = 0 def push(self, item, priority): heapq.heappush(self._queue, (-priority, self._index, item)) self._index += 1 def pop(self): return heapq.heappop(self._queue)[-1] class Item: def __init__(self,name): self.name = name def __repr__(self): return f\"Item('{self.name}')\" q = PriorityQueue() q.push(Item('foo'),1) q.push(Item('bar'),5) q.push(Item('spam'),4) q.push(Item('grok'),1) q._queue [(-5, 1, Item('bar')), (-1, 0, Item('foo')), (-4, 2, Item('spam')), (-1, 3, Item('grok'))] q.pop() Item('bar') q._queue [(-4, 2, Item('spam')), (-1, 0, Item('foo')), (-1, 3, Item('grok'))] q.pop() Item('spam') q._queue [(-1, 0, Item('foo')), (-1, 3, Item('grok'))] \u600e\u6837\u5b9e\u73b0\u4e00\u4e2a\u952e\u5bf9\u5e94\u591a\u4e2a\u503c\u7684\u5b57\u5178\uff08\u4e5f\u53eb multidict\uff09\uff1f from collections import defaultdict d = defaultdict(list) d['a'].append(1) d['a'].append(2) d['b'].append(4) d defaultdict(list, {'a': [1, 2], 'b': [4]}) d = defaultdict(set) d['a'].add(1) d['a'].add(2) d['b'].add(4) d defaultdict(set, {'a': {1, 2}, 'b': {4}}) \u5bf9\u6bd4 d = {} for key, value in pairs: if key not in d: d[key] = [] d[key].append(value) d = defaultdict(list) for key, value in pairs: d[key].append(value) \u4f60\u60f3\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u5e76\u4e14\u5728\u8fed\u4ee3\u6216\u5e8f\u5217\u5316\u8fd9\u4e2a\u5b57\u5178\u7684\u65f6\u5019\u80fd\u591f\u63a7\u5236\u5143\u7d20\u7684\u987a\u5e8f\u3002 #\u4e3a\u4e86\u80fd\u63a7\u5236\u4e00\u4e2a\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 OrderedDict \u7c7b\u3002 \u5728\u8fed\u4ee3\u64cd\u4f5c\u7684\u65f6\u5019\u5b83\u4f1a\u4fdd\u6301\u5143\u7d20\u88ab\u63d2\u5165\u65f6\u7684\u987a\u5e8f from collections import OrderedDict d = OrderedDict() d['foo'] = 1 d['bar'] = 2 d['spam'] = 3 d['grok'] = 4 for k,v in d.items(): print(k,v) foo 1 bar 2 spam 3 grok 4 \u600e\u6837\u5728\u6570\u636e\u5b57\u5178\u4e2d\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u64cd\u4f5c\uff08\u6bd4\u5982\u6c42\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\u3001\u6392\u5e8f\u7b49\u7b49\uff09\uff1f prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } min_price = min(zip(prices.values(), prices.keys())) #\u7528zip\u53cd\u8f6c min_price (10.75, 'FB') max_price = max(zip(prices.values(),prices.keys())) max_price (612.78, 'AAPL') #\u4e5f\u53ef\u4ee5\u6392\u5e8f sorted(zip(prices.values(),prices.keys())) [(10.75, 'FB'), (37.2, 'HPQ'), (45.23, 'ACME'), (205.55, 'IBM'), (612.78, 'AAPL')] prices_and_names = zip(prices.values(), prices.keys()) print(min(prices_and_names)) # OK print(max(prices_and_names)) # ValueError: max() arg is an empty sequence #\u610f\u601d\u5c31\u662fzip()\u751f\u6210\u7684\u662f\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\u7684\u8fed\u4ee3\u5668 prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } #max \u548c min \u4e5f\u53ef\u4ee5\u4f20\u5165key \u4ee5\u83b7\u5f97\u7b26\u5408\u81ea\u5df1\u6761\u4ef6\u7684\u6700\u5927\u6700\u5c0f\u503c print(max(prices,key=lambda k:prices[k]),min(prices,key=lambda k:prices[k])) #\u6839\u636evalues\u83b7\u53d6\u6700\u5927\u6700\u5c0f\u503c\u7684\u952e #\u8fd9\u6837\u5982\u679c\u60f3\u83b7\u53d6\u503c\u8fd8\u8981\u8fdb\u884c\u53d6\u503c\u64cd\u4f5cprices[xxx],\u6240\u4ee5\u4e0a\u9762\u7684zip\u662f\u6700\u597d\u7684\u9009\u62e9 AAPL FB \u600e\u6837\u5728\u4e24\u4e2a\u5b57\u5178\u4e2d\u5bfb\u5bfb\u627e\u76f8\u540c\u70b9\uff08\u6bd4\u5982\u76f8\u540c\u7684\u952e\u3001\u76f8\u540c\u7684\u503c\u7b49\u7b49\uff09\uff1f a = { 'x' : 1, 'y' : 2, 'z' : 3 } b = { 'w' : 10, 'x' : 11, 'y' : 2 } #\u5982\u679c\u627e\u5230\u4e24\u4e2a\u5b57\u5178\u91cd\u590d\u7684\u952e? #\u53ef\u4ee5\u4f7f\u7528\u4ea4\u96c6\u64cd\u4f5c a.keys() & b.keys() {'x', 'y'} a.items() & b.items() {('y', 2)} #\u5047\u5982\u4f60\u60f3\u4ee5\u73b0\u6709\u5b57\u5178\u6784\u9020\u4e00\u4e2a\u6392\u9664\u51e0\u4e2a\u6307\u5b9a\u952e\u7684\u65b0\u5b57\u5178\u3002 \u4e0b\u9762\u5229\u7528\u5b57\u5178\u63a8\u5bfc\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u9700\u6c42 c = {key:a[key] for key in a.keys() - {'z', 'w'}} # c is {'x': 1, 'y': 2} \u600e\u6837\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u9762\u4fdd\u6301\u5143\u7d20\u987a\u5e8f\u7684\u540c\u65f6\u6d88\u9664\u91cd\u590d\u7684\u503c\uff1f def dedupe(items): seen = set() for item in items: if item not in seen: yield item seen.add(item) #\u53ea\u9002\u7528\u4e8e\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684 \u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u5305\u542b\u4e86\u5927\u91cf\u65e0\u6cd5\u76f4\u89c6\u7684\u786c\u7f16\u7801\u5207\u7247\uff0c\u5e76\u4e14\u4f60\u60f3\u6e05\u7406\u4e00\u4e0b\u4ee3\u7801\u3002 record = '....................100 .......513.25 ..........' cost = int(record[20:23]) * float(record[31:37]) cost 51325.0 SHARES = slice(20, 23) PRICE = slice(31, 37) cost = int(record[SHARES]) * float(record[PRICE]) cost 51325.0 \u663e\u7136\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ef\u7ef4\u62a4\u6027\u66f4\u5f3a items = [0, 1, 2, 3, 4, 5, 6] a = slice(2,4) print(items[2:4],items[a]) [2, 3] [2, 3] items[a] = [10,11] items [0, 1, 10, 11, 4, 5, 6] a = slice(5,50,2) a.start,a.stop,a.step (5, 50, 2) #\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5207\u7247\u7684 indices(size) \u65b9\u6cd5\u5c06\u5b83\u6620\u5c04\u5230\u4e00\u4e2a\u5df2\u77e5\u5927\u5c0f\u7684\u5e8f\u5217\u4e0a\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u7ec4 (start, stop, step) \uff0c\u6240\u6709\u7684\u503c\u90fd\u4f1a\u88ab\u7f29\u5c0f\uff0c\u76f4\u5230\u9002\u5408\u8fd9\u4e2a\u5df2\u77e5\u5e8f\u5217\u7684\u8fb9\u754c\u4e3a\u6b62\u3002 s = 'HelloWorld' a.indices(len(s)) (5, 10, 2) for i in range(*a.indices(len(s))): #\u5c06a\u89e3\u5305 print(s[i]) W r d \u600e\u6837\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u5462\uff1f #\u7b54\u6848\u662fcollections.Counter() words = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ] from collections import Counter word_counts = Counter(words) word_counts Counter({'around': 2, \"don't\": 1, 'eyes': 8, 'into': 3, 'look': 4, 'my': 3, 'not': 1, 'the': 5, 'under': 1, \"you're\": 1}) top_three = word_counts.most_common(3) #\u51fa\u73b0\u6700\u591a\u7684\u4e09\u4e2a\u5355\u8bcd print(top_three) [('eyes', 8), ('the', 5), ('look', 4)] #\u5982\u679c\u60f3\u589e\u52a0\u6b21\u6570 morewords = ['why','are','you','not','looking','in','my','eyes'] word_counts.update(morewords) word_counts Counter({'are': 1, 'around': 2, \"don't\": 1, 'eyes': 9, 'in': 1, 'into': 3, 'look': 4, 'looking': 1, 'my': 4, 'not': 2, 'the': 5, 'under': 1, 'why': 1, 'you': 1, \"you're\": 1}) a = Counter(words) b = Counter(morewords) print(a) print(b) Counter({'eyes': 8, 'the': 5, 'look': 4, 'into': 3, 'my': 3, 'around': 2, 'not': 1, \"don't\": 1, \"you're\": 1, 'under': 1}) Counter({'why': 1, 'are': 1, 'you': 1, 'not': 1, 'looking': 1, 'in': 1, 'my': 1, 'eyes': 1}) c = a + b #Counter\u751f\u6210\u5bf9\u8c61\u53ef\u4ee5\u52a0\u6cd5\u8fd0\u7b97 \u4e00\u822c\u5b57\u5178\u4e0d\u80fd\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97 c Counter({'are': 1, 'around': 2, \"don't\": 1, 'eyes': 9, 'in': 1, 'into': 3, 'look': 4, 'looking': 1, 'my': 4, 'not': 2, 'the': 5, 'under': 1, 'why': 1, 'you': 1, \"you're\": 1}) d = a - b #\u51cf\u6cd5\u8fd0\u7b97 d Counter({'around': 2, \"don't\": 1, 'eyes': 7, 'into': 3, 'look': 4, 'my': 2, 'the': 5, 'under': 1, \"you're\": 1}) \u4f60\u6709\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u6216\u67d0\u51e0\u4e2a\u5b57\u5178\u5b57\u6bb5\u6765\u6392\u5e8f\u8fd9\u4e2a\u5217\u8868\u3002 rows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ] sorted(rows,key=lambda x:x['uid']) [{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}] from operator import itemgetter rows_by_fname = sorted(rows, key=itemgetter('fname')) rows_by_uid = sorted(rows, key=itemgetter('uid')) print(rows_by_fname) print(rows_by_uid) [{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}] [{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}] rows_by_lfname = sorted(rows, key=itemgetter('lname','fname')) #\u4f20\u5165\u591a\u4e2a\u53c2\u6570 print(rows_by_lfname) [{'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}] min(rows, key=itemgetter('uid')) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} min(rows,key = lambda x:x['uid']) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} \u4e0a\u8ff0\u5217\u5b50\u8bf4\u660e,lambda\u548coperator.itemgetter()\u5b9e\u73b0\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684,\u4f46\u8c03\u7528\u5e93\u901f\u5ea6\u5feb\u4e00\u70b9 \u4f60\u60f3\u6392\u5e8f\u7c7b\u578b\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u652f\u6301\u539f\u751f\u7684\u6bd4\u8f83\u64cd\u4f5c\u3002 class User: def __init__(self, user_id): self.user_id = user_id def __repr__(self): return 'User({})'.format(self.user_id) def sort_notcompare(): users = [User(23), User(3), User(99)] print(users) print(sorted(users, key=lambda u: u.user_id)) sort_notcompare() [User(23), User(3), User(99)] [User(3), User(23), User(99)] \u4f60\u6709\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u5b9e\u4f8b\u7684\u5e8f\u5217\uff0c\u7136\u540e\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u7279\u5b9a\u7684\u5b57\u6bb5\u6bd4\u5982 date \u6765\u5206\u7ec4\u8fed\u4ee3\u8bbf\u95ee\u3002 from itertools import groupby rows = [ {'address': '5412 N CLARK', 'date': '07/01/2012'}, {'address': '5148 N CLARK', 'date': '07/04/2012'}, {'address': '5800 E 58TH', 'date': '07/02/2012'}, {'address': '2122 N CLARK', 'date': '07/03/2012'}, {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'}, {'address': '1060 W ADDISON', 'date': '07/02/2012'}, {'address': '4801 N BROADWAY', 'date': '07/01/2012'}, {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}, ] rows.sort(key=lambda x:x['date']) #\u6ce8\u610f\u8981\u4e8b\u5148\u6392\u5e8f for date, items in groupby(rows, key=itemgetter('date')): print(date) for i in items: print(' ', i) 07/01/2012 {'address': '5412 N CLARK', 'date': '07/01/2012'} {'address': '4801 N BROADWAY', 'date': '07/01/2012'} 07/02/2012 {'address': '5800 E 58TH', 'date': '07/02/2012'} {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'} {'address': '1060 W ADDISON', 'date': '07/02/2012'} 07/03/2012 {'address': '2122 N CLARK', 'date': '07/03/2012'} 07/04/2012 {'address': '5148 N CLARK', 'date': '07/04/2012'} {'address': '1039 W GRANVILLE', 'date': '07/04/2012'} #\u7528groupby\u4e4b\u524d\u5fc5\u987b\u8981\u5148\u6392\u597d\u5e8f,\u5728\u6bcf\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 #\u5982\u679c\u4f60\u4ec5\u4ec5\u53ea\u662f\u60f3\u6839\u636e date \u5b57\u6bb5\u5c06\u6570\u636e\u5206\u7ec4\u5230\u4e00\u4e2a\u5927\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u53bb\uff0c\u5e76\u4e14\u5141\u8bb8\u968f\u673a\u8bbf\u95ee\uff0c \u90a3\u4e48\u4f60\u6700\u597d\u4f7f\u7528 defaultdict() \u6765\u6784\u5efa\u4e00\u4e2a\u591a\u503c\u5b57\u5178 from collections import defaultdict rows_by_date = defaultdict(list) for row in rows: rows_by_date[row['date']].append(row) for d in rows_by_date['07/04/2012']: print(d) {'address': '5148 N CLARK', 'date': '07/04/2012'} {'address': '1039 W GRANVILLE', 'date': '07/04/2012'} \u4f60\u6709\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u60f3\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u4ece\u4e2d\u63d0\u53d6\u51fa\u9700\u8981\u7684\u503c\u6216\u8005\u662f\u7f29\u77ed\u5e8f\u5217 mylist = [1, 4, -5, 10, -7, 2, 3, -1] #\u6700\u7b80\u5355\u7684\u5c31\u662f\u5217\u8868\u63a8\u5bfc\u4e86 [n for n in mylist if n > 0] [1, 4, 10, 2, 3] #\u663e\u7136\u4f1a\u5360\u7528\u5927\u91cf\u5185\u5b58,\u8fd9\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u7528\u751f\u6210\u5668 pos = (n for n in mylist if n > 0) pos <generator object <genexpr> at 0x0000022DE651DBA0> #\u4f46\u8fd9\u4e24\u79cd\u65b9\u6cd5\u53c8\u4e0d\u591f\u4f18\u96c5,\u6211\u8ffd\u6c42\u7684\u662f\u4f18\u96c5\u7684\u5b8c\u6210\u4efb\u52a1,\u6240\u4ee5\u7528\u5230\u4e86filter print(filter(lambda x:x > 0,mylist)) print(list(filter(lambda x :x > 0,mylist))) <filter object at 0x0000022DE66E5198> [1, 4, 10, 2, 3] #\u53e6\u5916\u4e00\u4e2a\u503c\u5f97\u5173\u6ce8\u7684\u8fc7\u6ee4\u5de5\u5177\u5c31\u662f itertools.compress() \uff0c \u5b83\u4ee5\u4e00\u4e2a iterable \u5bf9\u8c61\u548c\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684 Boolean \u9009\u62e9\u5668\u5e8f\u5217\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u8f93\u51fa iterable \u5bf9\u8c61\u4e2d\u5bf9\u5e94\u9009\u62e9\u5668\u4e3a True \u7684\u5143\u7d20\u3002 addresses = [ '5412 N CLARK', '5148 N CLARK', '5800 E 58TH', '2122 N CLARK', '5645 N RAVENSWOOD', '1060 W ADDISON', '4801 N BROADWAY', '1039 W GRANVILLE', ] counts = [ 0, 3, 10, 4, 1, 7, 6, 1] from itertools import compress more5 = [n > 5 for n in counts] list(compress(addresses, more5)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY'] #\u5728\u770b\u4e66\u65f6,\u6211\u60f3\u5230\u4e86\u522b\u7684\u65b9\u6cd5 d = dict(zip(addresses,counts)) list(filter(lambda x:d[x] > 5,d)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY'] \u4f60\u60f3\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5b83\u662f\u53e6\u5916\u4e00\u4e2a\u5b57\u5178\u7684\u5b50\u96c6\u3002 prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } # Make a dictionary of all prices over 200 p1 = {key: value for key, value in prices.items() if value > 200} # Make a dictionary of tech stocks tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'} p2 = {key: value for key, value in prices.items() if key in tech_names} print(p1) print(p2) {'AAPL': 612.78, 'IBM': 205.55} {'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.2} \u4f60\u6709\u4e00\u6bb5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u5217\u8868\u6216\u8005\u5143\u7ec4\u4e2d\u5143\u7d20\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u65f6\u5019\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\uff0c \u4e8e\u662f\u4f60\u60f3\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u5143\u7d20\u3002 from collections import namedtuple Subscriber = namedtuple('Subscriber', ['addr', 'joined']) sub = Subscriber('jonesy@example.com','2021-01-02') sub.addr,sub.joined ('jonesy@example.com', '2021-01-02') data = namedtuple('data', ['name', 'year', 'height']) lists = ['wlb',18,180] sub = data(*lists) sub.year 18 #\u60f3\u4fee\u6539\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539,\u8981\u8c03\u7528\u65b9\u6cd5 sub = sub._replace(height=190) sub data(name='wlb', year=18, height=190) \u4f60\u9700\u8981\u5728\u6570\u636e\u5e8f\u5217\u4e0a\u6267\u884c\u805a\u96c6\u51fd\u6570\uff08\u6bd4\u5982 sum() , min() , max() \uff09\uff0c \u4f46\u662f\u9996\u5148\u4f60\u9700\u8981\u5148\u8f6c\u6362\u6216\u8005\u8fc7\u6ee4\u6570\u636e nums = [1, 2, 3, 4, 5] s = sum(x * x for x in nums) s 55 s = sum((x * x for x in nums)) # \u663e\u5f0f\u7684\u4f20\u9012\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5bf9\u8c61 s = sum(x * x for x in nums) # \u66f4\u52a0\u4f18\u96c5\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7701\u7565\u4e86\u62ec\u53f7 \u5728\u4f7f\u7528\u4e00\u4e9b\u805a\u96c6\u51fd\u6570\u6bd4\u5982 min() \u548c max() \u7684\u65f6\u5019\u4f60\u53ef\u80fd\u66f4\u52a0\u503e\u5411\u4e8e\u4f7f\u7528\u751f\u6210\u5668\u7248\u672c\uff0c \u5b83\u4eec\u63a5\u53d7\u7684\u4e00\u4e2a key \u5173\u952e\u5b57\u53c2\u6570\u6216\u8bb8\u5bf9\u4f60\u5f88\u6709\u5e2e\u52a9 \u73b0\u5728\u6709\u591a\u4e2a\u5b57\u5178\u6216\u8005\u6620\u5c04\uff0c\u4f60\u60f3\u5c06\u5b83\u4eec\u4ece\u903b\u8f91\u4e0a\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u6620\u5c04\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c \u6bd4\u5982\u67e5\u627e\u503c\u6216\u8005\u68c0\u67e5\u67d0\u4e9b\u952e\u662f\u5426\u5b58\u5728\u3002 a = {'x': 1, 'z': 3 } b = {'y': 2, 'z': 4 } from collections import ChainMap c = ChainMap(a,b) print(c['x']) # Outputs 1 (from a) print(c['y']) # Outputs 2 (from b) print(c['z']) # Outputs 3 (from a) 1 2 3 \u5982\u679c\u51fa\u73b0\u91cd\u590d\u952e\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6620\u5c04\u503c\u4f1a\u88ab\u8fd4\u56de\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u7a0b\u5e8f\u4e2d\u7684 c['z'] \u603b\u662f\u4f1a\u8fd4\u56de\u5b57\u5178 a \u4e2d\u5bf9\u5e94\u7684\u503c\uff0c\u800c\u4e0d\u662f b \u4e2d\u5bf9\u5e94\u7684\u503c\u3002 \u4f5c\u4e3a ChainMap \u7684\u66ff\u4ee3\uff0c\u4f60\u53ef\u80fd\u4f1a\u8003\u8651\u4f7f\u7528 update() \u65b9\u6cd5\u5c06\u4e24\u4e2a\u5b57\u5178\u5408\u5e76. \u8fd9\u6837\u4e5f\u80fd\u884c\u5f97\u901a\uff0c\u4f46\u662f\u5b83\u9700\u8981\u4f60\u521b\u5efa\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b57\u5178\u5bf9\u8c61\uff08\u6216\u8005\u662f\u7834\u574f\u73b0\u6709\u5b57\u5178\u7ed3\u6784\uff09\u3002 \u540c\u65f6\uff0c\u5982\u679c\u539f\u5b57\u5178\u505a\u4e86\u66f4\u65b0\uff0c\u8fd9\u79cd\u6539\u53d8\u4e0d\u4f1a\u53cd\u5e94\u5230\u65b0\u7684\u5408\u5e76\u5b57\u5178\u4e2d\u53bb\u3002 ChainMap \u4f7f\u7528\u539f\u6765\u7684\u5b57\u5178\uff0c\u5b83\u81ea\u5df1\u4e0d\u521b\u5efa\u65b0\u7684\u5b57\u5178\u3002\u6240\u4ee5\u5b83\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4e0a\u9762\u6240\u8bf4\u7684\u7ed3\u679c\uff0c","title":"\u7b2c\u4e00\u7ae0"},{"location":"Cookbook/chapter1/#n-n","text":"p = (4,5) x,y = p print(x,y) 4 5","title":"\u73b0\u5728\u6709\u4e00\u4e2a\u5305\u542b N \u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u6216\u8005\u662f\u5e8f\u5217\uff0c\u600e\u6837\u5c06\u5b83\u91cc\u9762\u7684\u503c\u89e3\u538b\u540e\u540c\u65f6\u8d4b\u503c\u7ed9 N \u4e2a\u53d8\u91cf\uff1f"},{"location":"Cookbook/chapter1/#valueerror-n","text":"data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] name,shares,price,(year,*date) = data name,year,date ('ACME', 2012, [12, 21]) data = ['wlb',18,18265090197,131232141] name,age,*phone = data print(name,age,phone) wlb 18 [18265090197, 131232141] *trailing, current = [10, 8, 7, 1, 9, 5, 10, 3] print(trailing,current) [10, 8, 7, 1, 9, 5, 10] 3","title":"\u5982\u679c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7\u53d8\u91cf\u4e2a\u6570\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValueError \u3002 \u90a3\u4e48\u600e\u6837\u624d\u80fd\u4ece\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u89e3\u538b\u51fa N \u4e2a\u5143\u7d20\u51fa\u6765\uff1f"},{"location":"Cookbook/chapter1/#_1","text":"from collections import deque q = deque(maxlen=3) #\u9650\u5236\u957f\u5ea6 q.append(1) q.append(2) q.append(3) q deque([1, 2, 3]) q.append(4) q deque([2, 3, 4]) q.append(5) q deque([3, 4, 5]) q = deque() q.append(1) q.append(2) q.append(3) q.appendleft(4) q deque([4, 1, 2, 3]) q.pop() 3 q.popleft() 4","title":"\u5728\u8fed\u4ee3\u64cd\u4f5c\u6216\u8005\u5176\u4ed6\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u600e\u6837\u53ea\u4fdd\u7559\u6700\u540e\u6709\u9650\u51e0\u4e2a\u5143\u7d20\u7684\u5386\u53f2\u8bb0\u5f55\uff1f"},{"location":"Cookbook/chapter1/#n","text":"import heapq nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] print(heapq.nlargest(3,nums)) #\u6700\u5927\u7684\u4e09\u4e2a\u6570 [42, 37, 23] print(heapq.nsmallest(3,nums)) #\u6700\u5c0f\u7684\u4e09\u4e2a\u6570 [-4, 1, 2] portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1},{'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}] print(heapq.nlargest(3,portfolio,lambda s:s['price'])) print(heapq.nsmallest(3,portfolio,lambda s:s['price'])) [{'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'ACME', 'shares': 75, 'price': 115.65}, {'name': 'IBM', 'shares': 100, 'price': 91.1}] [{'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}] nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] import heapq heap = list(nums) heapq.heapify(heap) heap [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8] \u5806\u6700\u91cd\u8981\u7684\u7279\u6027\u5c31\u662fheap[0]\u603b\u662f\u6700\u5c0f\u90a3\u4e2a\u7684\u5143\u7d20\u3002\u6b64\u5916\uff0c\u63a5\u4e0b\u6765\u7684\u5143\u7d20\u53ef\u4f9d\u6b21\u901a\u8fc7heapq.heappop()\u65b9\u6cd5\u8f7b\u677e\u627e\u5230\u3002\u8be5\u65b9\u6cd5\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u6700\u5c0f\u7684\uff09\u5f39\u51fa\uff0c\u7136\u540e\u4ee5\u7b2c\u4e8c\u5c0f\u7684\u5143\u7d20\u53d6\u800c\u4ee3\u4e4b\uff08\u8fd9\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u662fO(logN)\uff0cN\u4ee3\u8868\u5806\u7684\u5927\u5c0f\uff09 heapq.heappop(heap) -4 heap [1, 2, 2, 23, 7, 8, 18, 23, 42, 37] heapq.heappop(heap) 1","title":"\u600e\u6837\u4ece\u4e00\u4e2a\u96c6\u5408\u4e2d\u83b7\u5f97\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684 N \u4e2a\u5143\u7d20\u5217\u8868\uff1f"},{"location":"Cookbook/chapter1/#pop","text":"\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217 import heapq class PriorityQueue: def __init__(self): self._queue = [] self._index = 0 def push(self, item, priority): heapq.heappush(self._queue, (-priority, self._index, item)) self._index += 1 def pop(self): return heapq.heappop(self._queue)[-1] class Item: def __init__(self,name): self.name = name def __repr__(self): return f\"Item('{self.name}')\" q = PriorityQueue() q.push(Item('foo'),1) q.push(Item('bar'),5) q.push(Item('spam'),4) q.push(Item('grok'),1) q._queue [(-5, 1, Item('bar')), (-1, 0, Item('foo')), (-4, 2, Item('spam')), (-1, 3, Item('grok'))] q.pop() Item('bar') q._queue [(-4, 2, Item('spam')), (-1, 0, Item('foo')), (-1, 3, Item('grok'))] q.pop() Item('spam') q._queue [(-1, 0, Item('foo')), (-1, 3, Item('grok'))]","title":"\u600e\u6837\u5b9e\u73b0\u4e00\u4e2a\u6309\u4f18\u5148\u7ea7\u6392\u5e8f\u7684\u961f\u5217\uff1f \u5e76\u4e14\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a\u9762\u6bcf\u6b21 pop \u64cd\u4f5c\u603b\u662f\u8fd4\u56de\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u90a3\u4e2a\u5143\u7d20"},{"location":"Cookbook/chapter1/#multidict","text":"from collections import defaultdict d = defaultdict(list) d['a'].append(1) d['a'].append(2) d['b'].append(4) d defaultdict(list, {'a': [1, 2], 'b': [4]}) d = defaultdict(set) d['a'].add(1) d['a'].add(2) d['b'].add(4) d defaultdict(set, {'a': {1, 2}, 'b': {4}}) \u5bf9\u6bd4 d = {} for key, value in pairs: if key not in d: d[key] = [] d[key].append(value) d = defaultdict(list) for key, value in pairs: d[key].append(value)","title":"\u600e\u6837\u5b9e\u73b0\u4e00\u4e2a\u952e\u5bf9\u5e94\u591a\u4e2a\u503c\u7684\u5b57\u5178\uff08\u4e5f\u53eb multidict\uff09\uff1f"},{"location":"Cookbook/chapter1/#_2","text":"#\u4e3a\u4e86\u80fd\u63a7\u5236\u4e00\u4e2a\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 OrderedDict \u7c7b\u3002 \u5728\u8fed\u4ee3\u64cd\u4f5c\u7684\u65f6\u5019\u5b83\u4f1a\u4fdd\u6301\u5143\u7d20\u88ab\u63d2\u5165\u65f6\u7684\u987a\u5e8f from collections import OrderedDict d = OrderedDict() d['foo'] = 1 d['bar'] = 2 d['spam'] = 3 d['grok'] = 4 for k,v in d.items(): print(k,v) foo 1 bar 2 spam 3 grok 4","title":"\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u5e76\u4e14\u5728\u8fed\u4ee3\u6216\u5e8f\u5217\u5316\u8fd9\u4e2a\u5b57\u5178\u7684\u65f6\u5019\u80fd\u591f\u63a7\u5236\u5143\u7d20\u7684\u987a\u5e8f\u3002"},{"location":"Cookbook/chapter1/#_3","text":"prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } min_price = min(zip(prices.values(), prices.keys())) #\u7528zip\u53cd\u8f6c min_price (10.75, 'FB') max_price = max(zip(prices.values(),prices.keys())) max_price (612.78, 'AAPL') #\u4e5f\u53ef\u4ee5\u6392\u5e8f sorted(zip(prices.values(),prices.keys())) [(10.75, 'FB'), (37.2, 'HPQ'), (45.23, 'ACME'), (205.55, 'IBM'), (612.78, 'AAPL')] prices_and_names = zip(prices.values(), prices.keys()) print(min(prices_and_names)) # OK print(max(prices_and_names)) # ValueError: max() arg is an empty sequence #\u610f\u601d\u5c31\u662fzip()\u751f\u6210\u7684\u662f\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\u7684\u8fed\u4ee3\u5668 prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } #max \u548c min \u4e5f\u53ef\u4ee5\u4f20\u5165key \u4ee5\u83b7\u5f97\u7b26\u5408\u81ea\u5df1\u6761\u4ef6\u7684\u6700\u5927\u6700\u5c0f\u503c print(max(prices,key=lambda k:prices[k]),min(prices,key=lambda k:prices[k])) #\u6839\u636evalues\u83b7\u53d6\u6700\u5927\u6700\u5c0f\u503c\u7684\u952e #\u8fd9\u6837\u5982\u679c\u60f3\u83b7\u53d6\u503c\u8fd8\u8981\u8fdb\u884c\u53d6\u503c\u64cd\u4f5cprices[xxx],\u6240\u4ee5\u4e0a\u9762\u7684zip\u662f\u6700\u597d\u7684\u9009\u62e9 AAPL FB","title":"\u600e\u6837\u5728\u6570\u636e\u5b57\u5178\u4e2d\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u64cd\u4f5c\uff08\u6bd4\u5982\u6c42\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\u3001\u6392\u5e8f\u7b49\u7b49\uff09\uff1f"},{"location":"Cookbook/chapter1/#_4","text":"a = { 'x' : 1, 'y' : 2, 'z' : 3 } b = { 'w' : 10, 'x' : 11, 'y' : 2 } #\u5982\u679c\u627e\u5230\u4e24\u4e2a\u5b57\u5178\u91cd\u590d\u7684\u952e? #\u53ef\u4ee5\u4f7f\u7528\u4ea4\u96c6\u64cd\u4f5c a.keys() & b.keys() {'x', 'y'} a.items() & b.items() {('y', 2)} #\u5047\u5982\u4f60\u60f3\u4ee5\u73b0\u6709\u5b57\u5178\u6784\u9020\u4e00\u4e2a\u6392\u9664\u51e0\u4e2a\u6307\u5b9a\u952e\u7684\u65b0\u5b57\u5178\u3002 \u4e0b\u9762\u5229\u7528\u5b57\u5178\u63a8\u5bfc\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u9700\u6c42 c = {key:a[key] for key in a.keys() - {'z', 'w'}} # c is {'x': 1, 'y': 2}","title":"\u600e\u6837\u5728\u4e24\u4e2a\u5b57\u5178\u4e2d\u5bfb\u5bfb\u627e\u76f8\u540c\u70b9\uff08\u6bd4\u5982\u76f8\u540c\u7684\u952e\u3001\u76f8\u540c\u7684\u503c\u7b49\u7b49\uff09\uff1f"},{"location":"Cookbook/chapter1/#_5","text":"def dedupe(items): seen = set() for item in items: if item not in seen: yield item seen.add(item) #\u53ea\u9002\u7528\u4e8e\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684","title":"\u600e\u6837\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u9762\u4fdd\u6301\u5143\u7d20\u987a\u5e8f\u7684\u540c\u65f6\u6d88\u9664\u91cd\u590d\u7684\u503c\uff1f"},{"location":"Cookbook/chapter1/#_6","text":"record = '....................100 .......513.25 ..........' cost = int(record[20:23]) * float(record[31:37]) cost 51325.0 SHARES = slice(20, 23) PRICE = slice(31, 37) cost = int(record[SHARES]) * float(record[PRICE]) cost 51325.0 \u663e\u7136\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ef\u7ef4\u62a4\u6027\u66f4\u5f3a items = [0, 1, 2, 3, 4, 5, 6] a = slice(2,4) print(items[2:4],items[a]) [2, 3] [2, 3] items[a] = [10,11] items [0, 1, 10, 11, 4, 5, 6] a = slice(5,50,2) a.start,a.stop,a.step (5, 50, 2) #\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5207\u7247\u7684 indices(size) \u65b9\u6cd5\u5c06\u5b83\u6620\u5c04\u5230\u4e00\u4e2a\u5df2\u77e5\u5927\u5c0f\u7684\u5e8f\u5217\u4e0a\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u7ec4 (start, stop, step) \uff0c\u6240\u6709\u7684\u503c\u90fd\u4f1a\u88ab\u7f29\u5c0f\uff0c\u76f4\u5230\u9002\u5408\u8fd9\u4e2a\u5df2\u77e5\u5e8f\u5217\u7684\u8fb9\u754c\u4e3a\u6b62\u3002 s = 'HelloWorld' a.indices(len(s)) (5, 10, 2) for i in range(*a.indices(len(s))): #\u5c06a\u89e3\u5305 print(s[i]) W r d","title":"\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u5305\u542b\u4e86\u5927\u91cf\u65e0\u6cd5\u76f4\u89c6\u7684\u786c\u7f16\u7801\u5207\u7247\uff0c\u5e76\u4e14\u4f60\u60f3\u6e05\u7406\u4e00\u4e0b\u4ee3\u7801\u3002"},{"location":"Cookbook/chapter1/#_7","text":"#\u7b54\u6848\u662fcollections.Counter() words = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ] from collections import Counter word_counts = Counter(words) word_counts Counter({'around': 2, \"don't\": 1, 'eyes': 8, 'into': 3, 'look': 4, 'my': 3, 'not': 1, 'the': 5, 'under': 1, \"you're\": 1}) top_three = word_counts.most_common(3) #\u51fa\u73b0\u6700\u591a\u7684\u4e09\u4e2a\u5355\u8bcd print(top_three) [('eyes', 8), ('the', 5), ('look', 4)] #\u5982\u679c\u60f3\u589e\u52a0\u6b21\u6570 morewords = ['why','are','you','not','looking','in','my','eyes'] word_counts.update(morewords) word_counts Counter({'are': 1, 'around': 2, \"don't\": 1, 'eyes': 9, 'in': 1, 'into': 3, 'look': 4, 'looking': 1, 'my': 4, 'not': 2, 'the': 5, 'under': 1, 'why': 1, 'you': 1, \"you're\": 1}) a = Counter(words) b = Counter(morewords) print(a) print(b) Counter({'eyes': 8, 'the': 5, 'look': 4, 'into': 3, 'my': 3, 'around': 2, 'not': 1, \"don't\": 1, \"you're\": 1, 'under': 1}) Counter({'why': 1, 'are': 1, 'you': 1, 'not': 1, 'looking': 1, 'in': 1, 'my': 1, 'eyes': 1}) c = a + b #Counter\u751f\u6210\u5bf9\u8c61\u53ef\u4ee5\u52a0\u6cd5\u8fd0\u7b97 \u4e00\u822c\u5b57\u5178\u4e0d\u80fd\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97 c Counter({'are': 1, 'around': 2, \"don't\": 1, 'eyes': 9, 'in': 1, 'into': 3, 'look': 4, 'looking': 1, 'my': 4, 'not': 2, 'the': 5, 'under': 1, 'why': 1, 'you': 1, \"you're\": 1}) d = a - b #\u51cf\u6cd5\u8fd0\u7b97 d Counter({'around': 2, \"don't\": 1, 'eyes': 7, 'into': 3, 'look': 4, 'my': 2, 'the': 5, 'under': 1, \"you're\": 1})","title":"\u600e\u6837\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u5462\uff1f"},{"location":"Cookbook/chapter1/#_8","text":"rows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ] sorted(rows,key=lambda x:x['uid']) [{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}] from operator import itemgetter rows_by_fname = sorted(rows, key=itemgetter('fname')) rows_by_uid = sorted(rows, key=itemgetter('uid')) print(rows_by_fname) print(rows_by_uid) [{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}] [{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}] rows_by_lfname = sorted(rows, key=itemgetter('lname','fname')) #\u4f20\u5165\u591a\u4e2a\u53c2\u6570 print(rows_by_lfname) [{'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}] min(rows, key=itemgetter('uid')) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} min(rows,key = lambda x:x['uid']) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} \u4e0a\u8ff0\u5217\u5b50\u8bf4\u660e,lambda\u548coperator.itemgetter()\u5b9e\u73b0\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684,\u4f46\u8c03\u7528\u5e93\u901f\u5ea6\u5feb\u4e00\u70b9","title":"\u4f60\u6709\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u6216\u67d0\u51e0\u4e2a\u5b57\u5178\u5b57\u6bb5\u6765\u6392\u5e8f\u8fd9\u4e2a\u5217\u8868\u3002"},{"location":"Cookbook/chapter1/#_9","text":"class User: def __init__(self, user_id): self.user_id = user_id def __repr__(self): return 'User({})'.format(self.user_id) def sort_notcompare(): users = [User(23), User(3), User(99)] print(users) print(sorted(users, key=lambda u: u.user_id)) sort_notcompare() [User(23), User(3), User(99)] [User(3), User(23), User(99)]","title":"\u4f60\u60f3\u6392\u5e8f\u7c7b\u578b\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u652f\u6301\u539f\u751f\u7684\u6bd4\u8f83\u64cd\u4f5c\u3002"},{"location":"Cookbook/chapter1/#date","text":"from itertools import groupby rows = [ {'address': '5412 N CLARK', 'date': '07/01/2012'}, {'address': '5148 N CLARK', 'date': '07/04/2012'}, {'address': '5800 E 58TH', 'date': '07/02/2012'}, {'address': '2122 N CLARK', 'date': '07/03/2012'}, {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'}, {'address': '1060 W ADDISON', 'date': '07/02/2012'}, {'address': '4801 N BROADWAY', 'date': '07/01/2012'}, {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}, ] rows.sort(key=lambda x:x['date']) #\u6ce8\u610f\u8981\u4e8b\u5148\u6392\u5e8f for date, items in groupby(rows, key=itemgetter('date')): print(date) for i in items: print(' ', i) 07/01/2012 {'address': '5412 N CLARK', 'date': '07/01/2012'} {'address': '4801 N BROADWAY', 'date': '07/01/2012'} 07/02/2012 {'address': '5800 E 58TH', 'date': '07/02/2012'} {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'} {'address': '1060 W ADDISON', 'date': '07/02/2012'} 07/03/2012 {'address': '2122 N CLARK', 'date': '07/03/2012'} 07/04/2012 {'address': '5148 N CLARK', 'date': '07/04/2012'} {'address': '1039 W GRANVILLE', 'date': '07/04/2012'} #\u7528groupby\u4e4b\u524d\u5fc5\u987b\u8981\u5148\u6392\u597d\u5e8f,\u5728\u6bcf\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 #\u5982\u679c\u4f60\u4ec5\u4ec5\u53ea\u662f\u60f3\u6839\u636e date \u5b57\u6bb5\u5c06\u6570\u636e\u5206\u7ec4\u5230\u4e00\u4e2a\u5927\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u53bb\uff0c\u5e76\u4e14\u5141\u8bb8\u968f\u673a\u8bbf\u95ee\uff0c \u90a3\u4e48\u4f60\u6700\u597d\u4f7f\u7528 defaultdict() \u6765\u6784\u5efa\u4e00\u4e2a\u591a\u503c\u5b57\u5178 from collections import defaultdict rows_by_date = defaultdict(list) for row in rows: rows_by_date[row['date']].append(row) for d in rows_by_date['07/04/2012']: print(d) {'address': '5148 N CLARK', 'date': '07/04/2012'} {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}","title":"\u4f60\u6709\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u5b9e\u4f8b\u7684\u5e8f\u5217\uff0c\u7136\u540e\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u7279\u5b9a\u7684\u5b57\u6bb5\u6bd4\u5982 date \u6765\u5206\u7ec4\u8fed\u4ee3\u8bbf\u95ee\u3002"},{"location":"Cookbook/chapter1/#_10","text":"mylist = [1, 4, -5, 10, -7, 2, 3, -1] #\u6700\u7b80\u5355\u7684\u5c31\u662f\u5217\u8868\u63a8\u5bfc\u4e86 [n for n in mylist if n > 0] [1, 4, 10, 2, 3] #\u663e\u7136\u4f1a\u5360\u7528\u5927\u91cf\u5185\u5b58,\u8fd9\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u7528\u751f\u6210\u5668 pos = (n for n in mylist if n > 0) pos <generator object <genexpr> at 0x0000022DE651DBA0> #\u4f46\u8fd9\u4e24\u79cd\u65b9\u6cd5\u53c8\u4e0d\u591f\u4f18\u96c5,\u6211\u8ffd\u6c42\u7684\u662f\u4f18\u96c5\u7684\u5b8c\u6210\u4efb\u52a1,\u6240\u4ee5\u7528\u5230\u4e86filter print(filter(lambda x:x > 0,mylist)) print(list(filter(lambda x :x > 0,mylist))) <filter object at 0x0000022DE66E5198> [1, 4, 10, 2, 3] #\u53e6\u5916\u4e00\u4e2a\u503c\u5f97\u5173\u6ce8\u7684\u8fc7\u6ee4\u5de5\u5177\u5c31\u662f itertools.compress() \uff0c \u5b83\u4ee5\u4e00\u4e2a iterable \u5bf9\u8c61\u548c\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684 Boolean \u9009\u62e9\u5668\u5e8f\u5217\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u8f93\u51fa iterable \u5bf9\u8c61\u4e2d\u5bf9\u5e94\u9009\u62e9\u5668\u4e3a True \u7684\u5143\u7d20\u3002 addresses = [ '5412 N CLARK', '5148 N CLARK', '5800 E 58TH', '2122 N CLARK', '5645 N RAVENSWOOD', '1060 W ADDISON', '4801 N BROADWAY', '1039 W GRANVILLE', ] counts = [ 0, 3, 10, 4, 1, 7, 6, 1] from itertools import compress more5 = [n > 5 for n in counts] list(compress(addresses, more5)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY'] #\u5728\u770b\u4e66\u65f6,\u6211\u60f3\u5230\u4e86\u522b\u7684\u65b9\u6cd5 d = dict(zip(addresses,counts)) list(filter(lambda x:d[x] > 5,d)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY']","title":"\u4f60\u6709\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u60f3\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u4ece\u4e2d\u63d0\u53d6\u51fa\u9700\u8981\u7684\u503c\u6216\u8005\u662f\u7f29\u77ed\u5e8f\u5217"},{"location":"Cookbook/chapter1/#_11","text":"prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } # Make a dictionary of all prices over 200 p1 = {key: value for key, value in prices.items() if value > 200} # Make a dictionary of tech stocks tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'} p2 = {key: value for key, value in prices.items() if key in tech_names} print(p1) print(p2) {'AAPL': 612.78, 'IBM': 205.55} {'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.2}","title":"\u4f60\u60f3\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5b83\u662f\u53e6\u5916\u4e00\u4e2a\u5b57\u5178\u7684\u5b50\u96c6\u3002"},{"location":"Cookbook/chapter1/#_12","text":"from collections import namedtuple Subscriber = namedtuple('Subscriber', ['addr', 'joined']) sub = Subscriber('jonesy@example.com','2021-01-02') sub.addr,sub.joined ('jonesy@example.com', '2021-01-02') data = namedtuple('data', ['name', 'year', 'height']) lists = ['wlb',18,180] sub = data(*lists) sub.year 18 #\u60f3\u4fee\u6539\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539,\u8981\u8c03\u7528\u65b9\u6cd5 sub = sub._replace(height=190) sub data(name='wlb', year=18, height=190)","title":"\u4f60\u6709\u4e00\u6bb5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u5217\u8868\u6216\u8005\u5143\u7ec4\u4e2d\u5143\u7d20\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u65f6\u5019\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\uff0c \u4e8e\u662f\u4f60\u60f3\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u5143\u7d20\u3002"},{"location":"Cookbook/chapter1/#sum-min-max","text":"nums = [1, 2, 3, 4, 5] s = sum(x * x for x in nums) s 55 s = sum((x * x for x in nums)) # \u663e\u5f0f\u7684\u4f20\u9012\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5bf9\u8c61 s = sum(x * x for x in nums) # \u66f4\u52a0\u4f18\u96c5\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7701\u7565\u4e86\u62ec\u53f7 \u5728\u4f7f\u7528\u4e00\u4e9b\u805a\u96c6\u51fd\u6570\u6bd4\u5982 min() \u548c max() \u7684\u65f6\u5019\u4f60\u53ef\u80fd\u66f4\u52a0\u503e\u5411\u4e8e\u4f7f\u7528\u751f\u6210\u5668\u7248\u672c\uff0c \u5b83\u4eec\u63a5\u53d7\u7684\u4e00\u4e2a key \u5173\u952e\u5b57\u53c2\u6570\u6216\u8bb8\u5bf9\u4f60\u5f88\u6709\u5e2e\u52a9","title":"\u4f60\u9700\u8981\u5728\u6570\u636e\u5e8f\u5217\u4e0a\u6267\u884c\u805a\u96c6\u51fd\u6570\uff08\u6bd4\u5982 sum() , min() , max() \uff09\uff0c \u4f46\u662f\u9996\u5148\u4f60\u9700\u8981\u5148\u8f6c\u6362\u6216\u8005\u8fc7\u6ee4\u6570\u636e"},{"location":"Cookbook/chapter1/#_13","text":"a = {'x': 1, 'z': 3 } b = {'y': 2, 'z': 4 } from collections import ChainMap c = ChainMap(a,b) print(c['x']) # Outputs 1 (from a) print(c['y']) # Outputs 2 (from b) print(c['z']) # Outputs 3 (from a) 1 2 3 \u5982\u679c\u51fa\u73b0\u91cd\u590d\u952e\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6620\u5c04\u503c\u4f1a\u88ab\u8fd4\u56de\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u7a0b\u5e8f\u4e2d\u7684 c['z'] \u603b\u662f\u4f1a\u8fd4\u56de\u5b57\u5178 a \u4e2d\u5bf9\u5e94\u7684\u503c\uff0c\u800c\u4e0d\u662f b \u4e2d\u5bf9\u5e94\u7684\u503c\u3002 \u4f5c\u4e3a ChainMap \u7684\u66ff\u4ee3\uff0c\u4f60\u53ef\u80fd\u4f1a\u8003\u8651\u4f7f\u7528 update() \u65b9\u6cd5\u5c06\u4e24\u4e2a\u5b57\u5178\u5408\u5e76. \u8fd9\u6837\u4e5f\u80fd\u884c\u5f97\u901a\uff0c\u4f46\u662f\u5b83\u9700\u8981\u4f60\u521b\u5efa\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b57\u5178\u5bf9\u8c61\uff08\u6216\u8005\u662f\u7834\u574f\u73b0\u6709\u5b57\u5178\u7ed3\u6784\uff09\u3002 \u540c\u65f6\uff0c\u5982\u679c\u539f\u5b57\u5178\u505a\u4e86\u66f4\u65b0\uff0c\u8fd9\u79cd\u6539\u53d8\u4e0d\u4f1a\u53cd\u5e94\u5230\u65b0\u7684\u5408\u5e76\u5b57\u5178\u4e2d\u53bb\u3002 ChainMap \u4f7f\u7528\u539f\u6765\u7684\u5b57\u5178\uff0c\u5b83\u81ea\u5df1\u4e0d\u521b\u5efa\u65b0\u7684\u5b57\u5178\u3002\u6240\u4ee5\u5b83\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4e0a\u9762\u6240\u8bf4\u7684\u7ed3\u679c\uff0c","title":"\u73b0\u5728\u6709\u591a\u4e2a\u5b57\u5178\u6216\u8005\u6620\u5c04\uff0c\u4f60\u60f3\u5c06\u5b83\u4eec\u4ece\u903b\u8f91\u4e0a\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u6620\u5c04\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c \u6bd4\u5982\u67e5\u627e\u503c\u6216\u8005\u68c0\u67e5\u67d0\u4e9b\u952e\u662f\u5426\u5b58\u5728\u3002"},{"location":"Cookbook/chapter2/","text":"","title":"\u7b2c\u4e8c\u7ae0"},{"location":"flask/","text":"\u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u914d\u7f6e \u7528\u5230\u7684\u5de5\u5177\u5c31\u662f\u6211\u4eec\u6240\u719f\u77e5\u7684pipenv \u9996\u5148\u5148\u7528pip\u8fdb\u884c\u5b89\u88c5 sudo pip3 install pipenv \u7136\u540e\u5728\u4f60\u7684flask\u9879\u76ee\u91cc\u9762\u6267\u884c\u5982\u4e0b\u547d\u4ee4 pipenv shell \u8fd9\u4f1a\u5728\u5c06\u4f60\u7684\u9879\u76ee\u6587\u4ef6\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883 \uff08\u5173\u4e8epipenv\u7684\u66f4\u591a\u7528\u6cd5\u53c2\u8003 \u5b98\u7f51 \uff09 \u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u7684\u7f16\u8bd1\u5668\u7684\u76ee\u5f55\u4e5f\u4f1a\u544a\u8bc9\u4f60 flask\u7a0b\u5e8f\u5728\u5f00\u53d1\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u5404\u79cd\u73af\u5883\u53d8\u91cf\uff0c\u6bd4\u5982\u5bc6\u5319\u4e4b\u7c7b\u7684 \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5728\u865a\u62df\u73af\u5883\u4e2d\u521b\u5efa\u4e00\u4e9b\u6587\u4ef6\u6765\u4fdd\u5b58\u6211\u4eec\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4ee5\u514d\u5168\u5c40\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u800c\u5e26\u6765\u7684\u9ebb\u70e6\u3002 \u5728\u8fd9\u4e4b\u524d\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a\u53ebpython-dotenv\u7684\u5e93\uff08\u865a\u62df\u73af\u5883\u4e0b\uff09 \u5728\u521a\u624d\u7684\u865a\u62df\u73af\u5883\u4e2d\u6267\u884c\u5982\u4e0b\u547d\u4ee4 pipenv install python-dotenv \u7136\u540e\u5728\u4f60\u7684\u865a\u62df\u73af\u5883\u6839\u76ee\u5f55\u4e0b\u521b\u5efa.env \u548c.flaskenv\u4e24\u4e2a\u6587\u4ef6 \u8fd9\u5c31\u662f\u6211\u4eec\u7684\u73af\u5883\u53d8\u91cf\u7684\u6587\u4ef6\u4e86\uff0c\u4ee5\u540e\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u9700\u8981\u7528\u5230\u7684\u73af\u5883\u53d8\u91cf\u90fd\u8981\u4ece\u8fd9\u91cc\u83b7\u53d6\u3002 \u6700\u540e\u5b89\u88c5\u5173\u4e8eflask\u7684\u5404\u79cd\u5e93\u5c31ok\u4e86","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"flask/#_1","text":"","title":"\u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u914d\u7f6e"},{"location":"flask/#pipenv","text":"","title":"\u7528\u5230\u7684\u5de5\u5177\u5c31\u662f\u6211\u4eec\u6240\u719f\u77e5\u7684pipenv"},{"location":"flask/#pip","text":"sudo pip3 install pipenv \u7136\u540e\u5728\u4f60\u7684flask\u9879\u76ee\u91cc\u9762\u6267\u884c\u5982\u4e0b\u547d\u4ee4 pipenv shell \u8fd9\u4f1a\u5728\u5c06\u4f60\u7684\u9879\u76ee\u6587\u4ef6\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883 \uff08\u5173\u4e8epipenv\u7684\u66f4\u591a\u7528\u6cd5\u53c2\u8003 \u5b98\u7f51 \uff09 \u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u7684\u7f16\u8bd1\u5668\u7684\u76ee\u5f55\u4e5f\u4f1a\u544a\u8bc9\u4f60 flask\u7a0b\u5e8f\u5728\u5f00\u53d1\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u5404\u79cd\u73af\u5883\u53d8\u91cf\uff0c\u6bd4\u5982\u5bc6\u5319\u4e4b\u7c7b\u7684 \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5728\u865a\u62df\u73af\u5883\u4e2d\u521b\u5efa\u4e00\u4e9b\u6587\u4ef6\u6765\u4fdd\u5b58\u6211\u4eec\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4ee5\u514d\u5168\u5c40\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u800c\u5e26\u6765\u7684\u9ebb\u70e6\u3002 \u5728\u8fd9\u4e4b\u524d\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a\u53ebpython-dotenv\u7684\u5e93\uff08\u865a\u62df\u73af\u5883\u4e0b\uff09 \u5728\u521a\u624d\u7684\u865a\u62df\u73af\u5883\u4e2d\u6267\u884c\u5982\u4e0b\u547d\u4ee4 pipenv install python-dotenv \u7136\u540e\u5728\u4f60\u7684\u865a\u62df\u73af\u5883\u6839\u76ee\u5f55\u4e0b\u521b\u5efa.env \u548c.flaskenv\u4e24\u4e2a\u6587\u4ef6 \u8fd9\u5c31\u662f\u6211\u4eec\u7684\u73af\u5883\u53d8\u91cf\u7684\u6587\u4ef6\u4e86\uff0c\u4ee5\u540e\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u9700\u8981\u7528\u5230\u7684\u73af\u5883\u53d8\u91cf\u90fd\u8981\u4ece\u8fd9\u91cc\u83b7\u53d6\u3002 \u6700\u540e\u5b89\u88c5\u5173\u4e8eflask\u7684\u5404\u79cd\u5e93\u5c31ok\u4e86","title":"\u9996\u5148\u5148\u7528pip\u8fdb\u884c\u5b89\u88c5"},{"location":"kotlin_learn/basic/","text":"Kotlin\u5b66\u4e60 \u4e00\u3001\u51fd\u6570 fun sum(x:Int,y:Int):Int { // \u7b2c\u4e00\u79cd\u65b9\u5f0f return x + y } fun sum2(x:Int,y:Int) = x+y // \u7b2c\u4e8c\u79cd\u65b9\u5f0f val sumLambda: (Int,Int) -> Int = {x,y -> x+y} // \u82b1\u62ec\u53f7\u4e3a\u533f\u540d\u51fd\u6570 fun vars(vararg l:Int){ for (i in l){ print(i) } } vararg \u7c7b\u4f3c\u4e8epython\u7684\u89e3\u5305\u64cd\u4f5c def vars(*lists): for i in lists: print(i,end=\"\") \u4e8c\u3001\u53d8\u91cf var \u7528\u4e8e\u5b9a\u4e49\u53d8\u91cf\uff0c\u5f62\u5f0f\u4e3a\uff1a var <\u6807\u8bc6\u7b26> : <\u7c7b\u578b> = <\u521d\u59cb\u503c> val \u7528\u4e8e\u5b9a\u4e49\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u53ea\u80fd\u8d4b\u503c\u4e00\u6b21 val <\u6807\u8bc6\u7b26> : <\u7c7b\u578b> = <\u521d\u59cb\u503c> \u53d8\u91cf\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8egolang\u8bed\u8a00 val a: Int = 1 val b = 1 // \u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\u53d8\u91cf\u7c7b\u578b\u4e3aInt val c: Int // \u5982\u679c\u4e0d\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u5219\u5fc5\u987b\u63d0\u4f9b\u53d8\u91cf\u7c7b\u578b c = 1 // \u660e\u786e\u8d4b\u503c var x = 5 // \u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\u53d8\u91cf\u7c7b\u578b\u4e3aInt x += 1 // \u53d8\u91cf\u53ef\u4fee\u6539 \u4e09\u3001\u5faa\u73af for (i in 1..10 step 2){ // [1,10] print(i) } for (i in 4 downTo 1 step 2){ //downTo print(i) } for (i in 1 until 10){ // [1,10) print(i) } for (item: Int in ints) { // \u548cpython\u4e00\u6837\u53ef\u4ee5\u904d\u5386\u4efb\u610f\u53ef\u8fed\u4ee3\u5bf9\u8c61 // \u2026\u2026 } for ((index,value) in array.withIndex()){ // array.withIndex()\u7c7b\u4f3c\u4e8epython\u4e2d\u7684enumerate(array) println(\"$index \u7d22\u5f15\u4e0a\u7684\u503c\u4e3a$value\") } \u56db\u3001\u6570\u7ec4 val a = arrayOf(1,2,3) // [1,2,3] val b = Array(3,{i -> (i*2)}) // [0,2,4] println(a[0]) println(b[1]) val x: IntArray = intArrayOf(1,2,3) x[0] = x[1] + x[2] for (i in 0..2){ println(x[i]) } \u4e94\u3001\u5b57\u7b26\u4e32 n = 1 s = \"n = $n\" x = \"HELLO WORLD\" print(\"$x \u7684\u957f\u5ea6\u4e3a ${x.lenght}\") // \u5982\u4f55\u8f93\u51fa$\u7b26\u53f7\uff1f print(\"${'$'}\") \u516d\u3001\u9009\u62e9\u7ed3\u6784 when (x) { 1 -> print(\"x == 1\") 2 -> print(\"x == 2\") else -> { // \u6ce8\u610f\u8fd9\u4e2a\u5757 print(\"x \u4e0d\u662f 1 \uff0c\u4e5f\u4e0d\u662f 2\") } } when (x) { in 1..10 -> print(\"x is in the range\") in validNumbers -> print(\"x is valid\") !in 10..20 -> print(\"x is outside the range\") else -> print(\"none of the above\") } when{ x % 2 != 0 -> println(\"$x \u662f\u5947\u6570\") x % 2 == 0 -> println(\"$x \u662f\u5076\u6570\") else -> println(\"nonono\") } \u4e03\u3001\u7c7b\u4e0e\u5bf9\u8c61 class \u7c7b\u540d [\u53ef\u89c1\u6027\u4fee\u9970\u7b26] [\u6ce8\u89e3] [constructor] (Params){ ... } class Person private @Inject constructor(name: String) { \u2026\u2026 } // \u8fd9\u662f\u5b9a\u4e49\u7684\u5f62\u5f0f class Person(name: String) { \u2026\u2026 } // \u6ca1\u6709\u53ef\u89c1\u6027\u4fee\u9970\u7b26\u548c\u6ce8\u91ca\u53ef\u4ee5\u7b80\u5199\u6210\u8fd9\u6837 class Test(name: String){ val name_class: String = name //\u8fd9\u4e2a\u624d\u662f\u7c7b\u5c5e\u6027 init{ // \u521d\u59cb\u5316\u4ee3\u7801\u5757 } } class Test(var name: String){ // \u5728\u4e3b\u6784\u9020\u51fd\u6570\u4e2d\u58f0\u660e\u7c7b\u5c5e\u6027 } class Test{ // \u6b21\u6784\u9020\u51fd\u6570 \u6ce8\u610fTest\u540e\u9762\u4e0d\u8981\u52a0\u62ec\u53f7 var name: String = \"\" constructor(name: String){ this.name = name } } class Test(name: String){ // \u6b21\u6784\u9020\u51fd\u6570 var name: String = name var age: Int = 1 constructor(name: String,age: Int) : this(name){ // \u6ce8\u610f\u8fd9\u4e2athis this.age = age } } // \u6570\u636e\u7c7b data class User(var name:String,var age:Int,var gender:Int,var avatar:String) fun main(){ var user = User(\"vllbc\",18,1,\"aaa\") val(name,age,gender,avatar) = user print(\"$name $age $avatar $gender\") }","title":"\u57fa\u7840\u5b66\u4e60"},{"location":"kotlin_learn/basic/#kotlin","text":"","title":"Kotlin\u5b66\u4e60"},{"location":"kotlin_learn/basic/#_1","text":"fun sum(x:Int,y:Int):Int { // \u7b2c\u4e00\u79cd\u65b9\u5f0f return x + y } fun sum2(x:Int,y:Int) = x+y // \u7b2c\u4e8c\u79cd\u65b9\u5f0f val sumLambda: (Int,Int) -> Int = {x,y -> x+y} // \u82b1\u62ec\u53f7\u4e3a\u533f\u540d\u51fd\u6570 fun vars(vararg l:Int){ for (i in l){ print(i) } } vararg \u7c7b\u4f3c\u4e8epython\u7684\u89e3\u5305\u64cd\u4f5c def vars(*lists): for i in lists: print(i,end=\"\")","title":"\u4e00\u3001\u51fd\u6570"},{"location":"kotlin_learn/basic/#_2","text":"var \u7528\u4e8e\u5b9a\u4e49\u53d8\u91cf\uff0c\u5f62\u5f0f\u4e3a\uff1a var <\u6807\u8bc6\u7b26> : <\u7c7b\u578b> = <\u521d\u59cb\u503c> val \u7528\u4e8e\u5b9a\u4e49\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u53ea\u80fd\u8d4b\u503c\u4e00\u6b21 val <\u6807\u8bc6\u7b26> : <\u7c7b\u578b> = <\u521d\u59cb\u503c> \u53d8\u91cf\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8egolang\u8bed\u8a00 val a: Int = 1 val b = 1 // \u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\u53d8\u91cf\u7c7b\u578b\u4e3aInt val c: Int // \u5982\u679c\u4e0d\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u5219\u5fc5\u987b\u63d0\u4f9b\u53d8\u91cf\u7c7b\u578b c = 1 // \u660e\u786e\u8d4b\u503c var x = 5 // \u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\u53d8\u91cf\u7c7b\u578b\u4e3aInt x += 1 // \u53d8\u91cf\u53ef\u4fee\u6539","title":"\u4e8c\u3001\u53d8\u91cf"},{"location":"kotlin_learn/basic/#_3","text":"for (i in 1..10 step 2){ // [1,10] print(i) } for (i in 4 downTo 1 step 2){ //downTo print(i) } for (i in 1 until 10){ // [1,10) print(i) } for (item: Int in ints) { // \u548cpython\u4e00\u6837\u53ef\u4ee5\u904d\u5386\u4efb\u610f\u53ef\u8fed\u4ee3\u5bf9\u8c61 // \u2026\u2026 } for ((index,value) in array.withIndex()){ // array.withIndex()\u7c7b\u4f3c\u4e8epython\u4e2d\u7684enumerate(array) println(\"$index \u7d22\u5f15\u4e0a\u7684\u503c\u4e3a$value\") }","title":"\u4e09\u3001\u5faa\u73af"},{"location":"kotlin_learn/basic/#_4","text":"val a = arrayOf(1,2,3) // [1,2,3] val b = Array(3,{i -> (i*2)}) // [0,2,4] println(a[0]) println(b[1]) val x: IntArray = intArrayOf(1,2,3) x[0] = x[1] + x[2] for (i in 0..2){ println(x[i]) }","title":"\u56db\u3001\u6570\u7ec4"},{"location":"kotlin_learn/basic/#_5","text":"n = 1 s = \"n = $n\" x = \"HELLO WORLD\" print(\"$x \u7684\u957f\u5ea6\u4e3a ${x.lenght}\") // \u5982\u4f55\u8f93\u51fa$\u7b26\u53f7\uff1f print(\"${'$'}\")","title":"\u4e94\u3001\u5b57\u7b26\u4e32"},{"location":"kotlin_learn/basic/#_6","text":"when (x) { 1 -> print(\"x == 1\") 2 -> print(\"x == 2\") else -> { // \u6ce8\u610f\u8fd9\u4e2a\u5757 print(\"x \u4e0d\u662f 1 \uff0c\u4e5f\u4e0d\u662f 2\") } } when (x) { in 1..10 -> print(\"x is in the range\") in validNumbers -> print(\"x is valid\") !in 10..20 -> print(\"x is outside the range\") else -> print(\"none of the above\") } when{ x % 2 != 0 -> println(\"$x \u662f\u5947\u6570\") x % 2 == 0 -> println(\"$x \u662f\u5076\u6570\") else -> println(\"nonono\") }","title":"\u516d\u3001\u9009\u62e9\u7ed3\u6784"},{"location":"kotlin_learn/basic/#_7","text":"class \u7c7b\u540d [\u53ef\u89c1\u6027\u4fee\u9970\u7b26] [\u6ce8\u89e3] [constructor] (Params){ ... } class Person private @Inject constructor(name: String) { \u2026\u2026 } // \u8fd9\u662f\u5b9a\u4e49\u7684\u5f62\u5f0f class Person(name: String) { \u2026\u2026 } // \u6ca1\u6709\u53ef\u89c1\u6027\u4fee\u9970\u7b26\u548c\u6ce8\u91ca\u53ef\u4ee5\u7b80\u5199\u6210\u8fd9\u6837 class Test(name: String){ val name_class: String = name //\u8fd9\u4e2a\u624d\u662f\u7c7b\u5c5e\u6027 init{ // \u521d\u59cb\u5316\u4ee3\u7801\u5757 } } class Test(var name: String){ // \u5728\u4e3b\u6784\u9020\u51fd\u6570\u4e2d\u58f0\u660e\u7c7b\u5c5e\u6027 } class Test{ // \u6b21\u6784\u9020\u51fd\u6570 \u6ce8\u610fTest\u540e\u9762\u4e0d\u8981\u52a0\u62ec\u53f7 var name: String = \"\" constructor(name: String){ this.name = name } } class Test(name: String){ // \u6b21\u6784\u9020\u51fd\u6570 var name: String = name var age: Int = 1 constructor(name: String,age: Int) : this(name){ // \u6ce8\u610f\u8fd9\u4e2athis this.age = age } } // \u6570\u636e\u7c7b data class User(var name:String,var age:Int,var gender:Int,var avatar:String) fun main(){ var user = User(\"vllbc\",18,1,\"aaa\") val(name,age,gender,avatar) = user print(\"$name $age $avatar $gender\") }","title":"\u4e03\u3001\u7c7b\u4e0e\u5bf9\u8c61"},{"location":"others/git/","text":"git\u7b14\u8bb0 git diff \uff1a\u5f53\u5de5\u4f5c\u533a\u6709\u6539\u52a8\uff0c\u4e34\u65f6\u533a\u4e3a\u7a7a\uff0cdiff\u7684\u5bf9\u6bd4\u662f\u201c\u5de5\u4f5c\u533a\u201d\u4e0e\u6700\u540e\u4e00\u6b21commit\u63d0\u4ea4\u7684\u4ed3\u5e93\u7684\u5171\u540c\u6587\u4ef6\u201d\uff1b\u5f53\u5de5\u4f5c\u533a\u6709\u6539\u52a8\uff0c\u4e34\u65f6\u533a\u4e0d\u4e3a\u7a7a\uff0cdiff\u5bf9\u6bd4\u7684\u662f\u201c\u5de5\u4f5c\u533a\u201d\u4e0e\u201c\u6682\u5b58\u533a\u201d\u7684\u5171\u540c\u6587\u4ef6\u201d\u3002 git diff --cached \uff1a\u663e\u793a\u6682\u5b58\u533a\u4e0e\u6700\u540e\u4e00\u6b21commit\u7684\u6539\u52a8\u3002 git diff <\u5206\u652f1> <\u5206\u652f2> \u663e\u793a\u4e24\u4e2a\u5206\u652f\u6700\u540e\u4e00\u6b21commit\u7684\u6539\u52a8\u3002 git init \u521d\u59cb\u5316\u4e00\u4e2a\u4ed3\u5e93 git add . \u5c06\u9664 .gitignore \u4e2d\u58f0\u660e\u7684\u6240\u6709\u6587\u4ef6\u52a0\u5165\u6682\u5b58\u533a git commit -m \"\" \u63d0\u4ea4\u5230\u5de5\u4f5c\u533a git push \u63d0\u4ea4\u5230\u8fdc\u7a0b\u5e93 git pull \u5c06\u6539\u52a8\u62c9\u5230\u672c\u5730\u5e93 git log \u67e5\u770b\u63d0\u4ea4\u5386\u53f2 git log --oneline \u7b80\u6d01\u8f93\u51fa git branch xxx \u5efa\u7acb\u5206\u652fxxx \u7136\u540e\u7528 git checkout xxx \u5207\u6362\u5230\u5206\u652fxxx \u6216\u8005\u7528 git checkout -b xxx \u5b8c\u6210\u540c\u6837\u7684\u64cd\u4f5c git checkout \u56de\u9000\u7248\u672c\u5373head\u5206\u79bb \u4f46master\u4e0d\u53d8 git reset --hard HEAD^ \u56de\u9000\u4e00\u4e2a\u7248\u672c\uff08master\u4e5f\u6539\u53d8\uff09 git reset --hard HEAD~n \u56de\u9000n\u4e2a\u7248\u672c * * git reset --hard xxxxxx xxxxxx \u4e3a\u7248\u672c\u53f7 \u5373\u4e3agit log\u663e\u793a\u7684\u6bcf\u4e00\u4e2a\u7248\u672c\u53f7 \u4e00\u822c\u4e3a\u524d\u516d\u4f4d git merge \u6bd4\u5982\u5728master\u5206\u652f\u91cc \u6267\u884cgit merge xxx \u5c06xxx\u5206\u652f\u5408\u5e76\u5230master\u4e2d\uff0c\u4e00\u822c\u9879\u76ee\u5f00\u53d1\uff0c\u4e00\u4eba\u4e00\u4e2a\u5206\u652f\uff0c\u6700\u540e\u63d0\u4ea4\u7684\u65f6\u5019\u5408\u5e76\u518d\u63d0\u4ea4\u3002\u4e0d\u8fc7\u66f4\u63a8\u8350\u7528git rebase\u65b9\u6cd5\uff0c\u8fd9\u6837\u5408\u5e76\u540e\u7684\u5206\u652f\u66f4\u52a0\u76f4\u89c2 git branch -f master~3 \u5c06\u5206\u652f\u5f3a\u5236\u56de\u9000\u4e09\u4e2a\u7248\u672c\uff0c\u4f46head\u4e0d\u52a8 \u5f53\u9700\u8981\u53e6\u4e00\u4e2a\u5206\u652f\u7684\u6240\u6709\u6539\u52a8\u65f6\uff0c\u7528 git merge \uff0c\u4f46\u5f53\u9700\u8981\u90e8\u5206\u6539\u52a8\u65f6\u5019\uff0c\u8981\u7528 git cherry-pick xxx xxx\u4e3a\u54c8\u5e0c\u503c\u6216\u8005\u5206\u652f\u540d\uff0c\u6307\u5b9a\u4e3a\u5206\u652f\u540d\u65f6\u5019\uff0c\u5c06\u5206\u652f\u7684\u6700\u65b0\u6539\u52a8\u5408\u5e76\u8fc7\u6765 \u5f53\u4e0d\u77e5\u9053\u63d0\u4ea4\u7684\u54c8\u5e0c\u503c\u65f6\uff0c\u53ef\u4ee5\u7528 git rebase -i HEAD~x \u6765\u53ef\u89c6\u5316\u7ba1\u7406\uff0c\u53ef\u4ee5\u8c03\u6574\u63d0\u4ea4\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u5220\u9664\u4e0d\u60f3\u8981\u7684\u63d0\u4ea4\uff0c\u6216\u5408\u5e76\u63d0\u4ea4 git rebase xx1 xx2 \u5c06xx2\u5206\u652f\u4e0a\u7684\u63d0\u4ea4\u8bb0\u5f55\u653e\u5230xx1\u540e\u9762 git pull \u62c9\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u66f4\u65b0 \u5982\u679c\u8fdc\u7a0b\u4ed3\u5e93\u540c\u4e00\u4e2a\u5206\u652f\u4e0a\u5df2\u7ecf\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u7528git pull --rebase\u62c9\u53d6\u6700\u65b0\u7684\u4fee\u6539\u5e76\u5c06\u81ea\u5df1\u7684\u63d0\u4ea4\u653e\u5230\u8fd9\u4e2a\u4fee\u6539\u540e\u9762\u3002 git fetch \u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6570\u636e\uff0c\u4e0d\u4f1a\u6539\u53d8\u4f60\u672c\u5730\u4ed3\u5e93\u7684\u72b6\u6001\uff0c\u4e0d\u4f1a\u66f4\u65b0\u4f60\u7684master,\u4e5f\u6ca1\u6709\u66f4\u6539\u4f60\u7684\u672c\u5730\u78c1\u76d8\u6587\u4ef6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u7eaf\u7684\u4e0b\u8f7d\u64cd\u4f5c\u3002\u800c git pull \u76f8\u5f53\u4e8e git fetch + git merge \u5373\u6293\u53d6\u540e\u5408\u5e76 git reflog \u67e5\u770b\u64cd\u4f5c\u8bb0\u5f55\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u64a4\u9500\u4e0d\u5c0f\u5fc3\u7528 git reset \u56de\u9000\u7248\u672c\u7684\u64cd\u4f5c","title":"git"},{"location":"others/git/#git","text":"git diff \uff1a\u5f53\u5de5\u4f5c\u533a\u6709\u6539\u52a8\uff0c\u4e34\u65f6\u533a\u4e3a\u7a7a\uff0cdiff\u7684\u5bf9\u6bd4\u662f\u201c\u5de5\u4f5c\u533a\u201d\u4e0e\u6700\u540e\u4e00\u6b21commit\u63d0\u4ea4\u7684\u4ed3\u5e93\u7684\u5171\u540c\u6587\u4ef6\u201d\uff1b\u5f53\u5de5\u4f5c\u533a\u6709\u6539\u52a8\uff0c\u4e34\u65f6\u533a\u4e0d\u4e3a\u7a7a\uff0cdiff\u5bf9\u6bd4\u7684\u662f\u201c\u5de5\u4f5c\u533a\u201d\u4e0e\u201c\u6682\u5b58\u533a\u201d\u7684\u5171\u540c\u6587\u4ef6\u201d\u3002 git diff --cached \uff1a\u663e\u793a\u6682\u5b58\u533a\u4e0e\u6700\u540e\u4e00\u6b21commit\u7684\u6539\u52a8\u3002 git diff <\u5206\u652f1> <\u5206\u652f2> \u663e\u793a\u4e24\u4e2a\u5206\u652f\u6700\u540e\u4e00\u6b21commit\u7684\u6539\u52a8\u3002 git init \u521d\u59cb\u5316\u4e00\u4e2a\u4ed3\u5e93 git add . \u5c06\u9664 .gitignore \u4e2d\u58f0\u660e\u7684\u6240\u6709\u6587\u4ef6\u52a0\u5165\u6682\u5b58\u533a git commit -m \"\" \u63d0\u4ea4\u5230\u5de5\u4f5c\u533a git push \u63d0\u4ea4\u5230\u8fdc\u7a0b\u5e93 git pull \u5c06\u6539\u52a8\u62c9\u5230\u672c\u5730\u5e93 git log \u67e5\u770b\u63d0\u4ea4\u5386\u53f2 git log --oneline \u7b80\u6d01\u8f93\u51fa git branch xxx \u5efa\u7acb\u5206\u652fxxx \u7136\u540e\u7528 git checkout xxx \u5207\u6362\u5230\u5206\u652fxxx \u6216\u8005\u7528 git checkout -b xxx \u5b8c\u6210\u540c\u6837\u7684\u64cd\u4f5c git checkout \u56de\u9000\u7248\u672c\u5373head\u5206\u79bb \u4f46master\u4e0d\u53d8 git reset --hard HEAD^ \u56de\u9000\u4e00\u4e2a\u7248\u672c\uff08master\u4e5f\u6539\u53d8\uff09 git reset --hard HEAD~n \u56de\u9000n\u4e2a\u7248\u672c * * git reset --hard xxxxxx xxxxxx \u4e3a\u7248\u672c\u53f7 \u5373\u4e3agit log\u663e\u793a\u7684\u6bcf\u4e00\u4e2a\u7248\u672c\u53f7 \u4e00\u822c\u4e3a\u524d\u516d\u4f4d git merge \u6bd4\u5982\u5728master\u5206\u652f\u91cc \u6267\u884cgit merge xxx \u5c06xxx\u5206\u652f\u5408\u5e76\u5230master\u4e2d\uff0c\u4e00\u822c\u9879\u76ee\u5f00\u53d1\uff0c\u4e00\u4eba\u4e00\u4e2a\u5206\u652f\uff0c\u6700\u540e\u63d0\u4ea4\u7684\u65f6\u5019\u5408\u5e76\u518d\u63d0\u4ea4\u3002\u4e0d\u8fc7\u66f4\u63a8\u8350\u7528git rebase\u65b9\u6cd5\uff0c\u8fd9\u6837\u5408\u5e76\u540e\u7684\u5206\u652f\u66f4\u52a0\u76f4\u89c2 git branch -f master~3 \u5c06\u5206\u652f\u5f3a\u5236\u56de\u9000\u4e09\u4e2a\u7248\u672c\uff0c\u4f46head\u4e0d\u52a8 \u5f53\u9700\u8981\u53e6\u4e00\u4e2a\u5206\u652f\u7684\u6240\u6709\u6539\u52a8\u65f6\uff0c\u7528 git merge \uff0c\u4f46\u5f53\u9700\u8981\u90e8\u5206\u6539\u52a8\u65f6\u5019\uff0c\u8981\u7528 git cherry-pick xxx xxx\u4e3a\u54c8\u5e0c\u503c\u6216\u8005\u5206\u652f\u540d\uff0c\u6307\u5b9a\u4e3a\u5206\u652f\u540d\u65f6\u5019\uff0c\u5c06\u5206\u652f\u7684\u6700\u65b0\u6539\u52a8\u5408\u5e76\u8fc7\u6765 \u5f53\u4e0d\u77e5\u9053\u63d0\u4ea4\u7684\u54c8\u5e0c\u503c\u65f6\uff0c\u53ef\u4ee5\u7528 git rebase -i HEAD~x \u6765\u53ef\u89c6\u5316\u7ba1\u7406\uff0c\u53ef\u4ee5\u8c03\u6574\u63d0\u4ea4\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u5220\u9664\u4e0d\u60f3\u8981\u7684\u63d0\u4ea4\uff0c\u6216\u5408\u5e76\u63d0\u4ea4 git rebase xx1 xx2 \u5c06xx2\u5206\u652f\u4e0a\u7684\u63d0\u4ea4\u8bb0\u5f55\u653e\u5230xx1\u540e\u9762 git pull \u62c9\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u66f4\u65b0 \u5982\u679c\u8fdc\u7a0b\u4ed3\u5e93\u540c\u4e00\u4e2a\u5206\u652f\u4e0a\u5df2\u7ecf\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u7528git pull --rebase\u62c9\u53d6\u6700\u65b0\u7684\u4fee\u6539\u5e76\u5c06\u81ea\u5df1\u7684\u63d0\u4ea4\u653e\u5230\u8fd9\u4e2a\u4fee\u6539\u540e\u9762\u3002 git fetch \u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6570\u636e\uff0c\u4e0d\u4f1a\u6539\u53d8\u4f60\u672c\u5730\u4ed3\u5e93\u7684\u72b6\u6001\uff0c\u4e0d\u4f1a\u66f4\u65b0\u4f60\u7684master,\u4e5f\u6ca1\u6709\u66f4\u6539\u4f60\u7684\u672c\u5730\u78c1\u76d8\u6587\u4ef6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u7eaf\u7684\u4e0b\u8f7d\u64cd\u4f5c\u3002\u800c git pull \u76f8\u5f53\u4e8e git fetch + git merge \u5373\u6293\u53d6\u540e\u5408\u5e76 git reflog \u67e5\u770b\u64cd\u4f5c\u8bb0\u5f55\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u64a4\u9500\u4e0d\u5c0f\u5fc3\u7528 git reset \u56de\u9000\u7248\u672c\u7684\u64cd\u4f5c","title":"git\u7b14\u8bb0"},{"location":"others/jupyter_pdf/","text":"\u6d45\u8c08jupyter\u8f6cpdf\u95ee\u9898 \u200b \u8001\u5e08\u8981\u6c42\u8981\u628a\u4e4b\u524d\u505a\u7684\u5b9e\u9a8c\u6253\u5370\u51fa\u6765\uff0c\u4f46\u662f\u7531\u4e8e\u5b66\u9662\u7684\u7cfb\u7edf\u73af\u5883\u95ee\u9898\uff0c\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u4fdd\u5b58\u4e3apdf\uff0c\u56e0\u6b64\u6211\u91c7\u7528\u4e86\u522b\u7684\u65b9\u6cd5\uff0c\u6211\u5148\u628a\u7cfb\u7edf\u4e0a\u7684\u6587\u4ef6\u4fdd\u5b58\u4e3a.ipynb\u683c\u5f0f\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u7535\u8111\u73af\u5883\u4e0a\u6253\u5f00\uff0c\u518d\u4e0b\u8f7d\u4e86pandoc\u548cMiKTex\u540e\uff0c\u5b89\u88c5\u6240\u9700\u8981\u7684\u4f9d\u8d56\u540e\u6210\u529f\u4fdd\u5b58\u4e3apdf\u683c\u5f0f\uff0c\u4f46\u662f\u6709\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u6587\u65e0\u6cd5\u663e\u793a\uff0c\u5728\u7f51\u4e0a\u641c\u7d22\u8fc7\u540e\uff0c\u5728\u751f\u6210\u7684.tex\u6587\u4ef6\u91cc\u9762\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u52a0\u5165\u5982\u4e0b\u4ee3\u7801 \\usepackage{fontspec, xunicode, xltxtra} \\setmainfont{Microsoft YaHei} \\usepackage{ctex} \u7136\u540e\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 xelatex **.tex \u5373\u53ef\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728jupyter\u4e2d\u4fdd\u5b58\u4e3a.tex\u6587\u4ef6\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u663e\u793a\u4e2d\u6587\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\u53ef\u4ee5\u5bf9\u5de5\u5177\u8fdb\u884c\u8bbe\u7f6e\u4ece\u800c\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u8981\u6dfb\u52a0\u8fd9\u4e9b\u4e1c\u897f\u3002\u76ee\u524d\u4e5f\u6ca1\u6709\u641c\u7d22\u5230\u4ec0\u4e48\u5185\u5bb9\u3002","title":"\u6d45\u8c08jupyter\u5bfc\u51fa\u4e3apdf"},{"location":"others/jupyter_pdf/#jupyterpdf","text":"\u200b \u8001\u5e08\u8981\u6c42\u8981\u628a\u4e4b\u524d\u505a\u7684\u5b9e\u9a8c\u6253\u5370\u51fa\u6765\uff0c\u4f46\u662f\u7531\u4e8e\u5b66\u9662\u7684\u7cfb\u7edf\u73af\u5883\u95ee\u9898\uff0c\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u4fdd\u5b58\u4e3apdf\uff0c\u56e0\u6b64\u6211\u91c7\u7528\u4e86\u522b\u7684\u65b9\u6cd5\uff0c\u6211\u5148\u628a\u7cfb\u7edf\u4e0a\u7684\u6587\u4ef6\u4fdd\u5b58\u4e3a.ipynb\u683c\u5f0f\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u7535\u8111\u73af\u5883\u4e0a\u6253\u5f00\uff0c\u518d\u4e0b\u8f7d\u4e86pandoc\u548cMiKTex\u540e\uff0c\u5b89\u88c5\u6240\u9700\u8981\u7684\u4f9d\u8d56\u540e\u6210\u529f\u4fdd\u5b58\u4e3apdf\u683c\u5f0f\uff0c\u4f46\u662f\u6709\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u6587\u65e0\u6cd5\u663e\u793a\uff0c\u5728\u7f51\u4e0a\u641c\u7d22\u8fc7\u540e\uff0c\u5728\u751f\u6210\u7684.tex\u6587\u4ef6\u91cc\u9762\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u52a0\u5165\u5982\u4e0b\u4ee3\u7801 \\usepackage{fontspec, xunicode, xltxtra} \\setmainfont{Microsoft YaHei} \\usepackage{ctex} \u7136\u540e\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 xelatex **.tex \u5373\u53ef\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728jupyter\u4e2d\u4fdd\u5b58\u4e3a.tex\u6587\u4ef6\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u663e\u793a\u4e2d\u6587\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\u53ef\u4ee5\u5bf9\u5de5\u5177\u8fdb\u884c\u8bbe\u7f6e\u4ece\u800c\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u8981\u6dfb\u52a0\u8fd9\u4e9b\u4e1c\u897f\u3002\u76ee\u524d\u4e5f\u6ca1\u6709\u641c\u7d22\u5230\u4ec0\u4e48\u5185\u5bb9\u3002","title":"\u6d45\u8c08jupyter\u8f6cpdf\u95ee\u9898"},{"location":"others/linux/","text":"linux\u5b66\u4e60 \u73af\u5883:wsl date \u663e\u793a\u65f6\u95f4 echo \u6253\u5370","title":"linux\u5b66\u4e60"},{"location":"others/linux/#linux","text":"\u73af\u5883:wsl date \u663e\u793a\u65f6\u95f4 echo \u6253\u5370","title":"linux\u5b66\u4e60"},{"location":"others/one_test/","text":"\u7528\u547d\u4ee4\u884c\u5b9e\u73b0\u535a\u5ba2\u81ea\u52a8\u66f4\u65b0\uff0c\u7c7b\u4f3c\u4e8e\u7f51\u7ad9\u540e\u7aef \u9700\u8981\u7528\u5230\u7684\u5e93\u6709 os \u6807\u51c6\u5e93 2020 12/21 \u66f4\u65b0\uff1a\u51ac\u81f3\u65e5\uff0c\u5b8c\u6210\u4e86\u56fe\u50cf\u754c\u9762\u3002\u4e0b\u9762\u7684\u4ee3\u7801 \u9700\u8981\u7684\u547d\u4ee4\u6709: os.system(\"\") \u7528\u6765\u6a21\u4effdos\u547d\u4ee4\uff0c\u4e3b\u8981\u7528\u6765\u751f\u6210\u7ad9\u70b9\uff0c\u548cgit push os.listdir(\"\") \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\uff0c\u7528\u6765\u590d\u5236site\u76ee\u5f55\u7684\u6587\u4ef6\u5230\u4e2a\u4eba\u7f51\u7ad9\u9879\u76ee\u4e0a yaml \u5e93\uff0c\u7528\u6765\u64cd\u4f5cmkdocs\u7684\u914d\u7f6e\u6587\u4ef6,\u5373 mkdocs.yml shutil \u5e93\uff0c\u7528\u6765\u590d\u5236\u5e76\u66ff\u6362\u6587\u4ef6 \u914d\u7f6e\u6587\u4ef6\uff0c config.yml \u7528\u6765\u83b7\u53d6\u5404\u9700\u8981\u7684\u6587\u4ef6\u8def\u5f84 \u5927\u6982\u4ee3\u7801\u5982\u4e0b \u53c8\u66f4\u65b0\u4e86\u4e00\u6b21\uff0c\u7ed9\u8fd9\u4e2a\u7a0b\u5e8f\u52a0\u5165\u4e86\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u4f7f\u5176\u66f4\u65b9\u4fbf \u65e7\u4ee3\u7801\uff1a\uff08\u547d\u4ee4\u884c\u5b9e\u73b0\uff09 import os import sys import yaml import shutil import argparse import logging logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') logger = logging.getLogger('my_test') parser = argparse.ArgumentParser() parser.add_argument('-new', type=str,help='\u662f\u5426\u4e3a\u65b0\u6587\u4ef6') parser.add_argument('-type', type=str,help='\u7c7b\u578b') parser.add_argument('-name', type=str,help='\u540d\u5b57') parser.add_argument('-folder', type=str,help='\u8def\u5f84') parser.add_argument('-messege', type=str,help='\u63d0\u4ea4\u4fe1\u606f') args = parser.parse_args() def copyFiles(sourceDir,targetDir): if sourceDir.find(\"exceptionfolder\")>0: return for file in os.listdir(sourceDir): sourceFile = os.path.join(sourceDir,file) targetFile = os.path.join(targetDir,file) if os.path.isfile(sourceFile): if not os.path.exists(targetDir): os.makedirs(targetDir) if not os.path.exists(targetFile) or (os.path.exists(targetFile) and (os.path.getsize(targetFile) != os.path.getsize(sourceFile))): open(targetFile, \"wb\").write(open(sourceFile, \"rb\").read()) print(targetFile+ \" copy succeeded\") if os.path.isdir(sourceFile): copyFiles(sourceFile, targetFile) with open(r\"config.yml\",'r',encoding='utf-8') as fp: res = fp.read() data = yaml.load(res,Loader=yaml.FullLoader) mkdocs_yaml = data['mkdocs_yaml'] mkdocs_work = data['mkdocs_work_folder'] githubpage = data['githubpage_folder'] with open(mkdocs_yaml,'r',encoding='utf-8') as fp: result = fp.read() data = yaml.load(result,Loader=yaml.FullLoader) print(\"\u6ce8\u610f\u5728\u6267\u884c\u524d\u8981\u786e\u4fdd\u5355\u8bcd\u62fc\u5bf9\uff0c\u800c\u4e14\u6709\u5bf9\u5e94\u6587\u4ef6!!!!!\") clas = args.new if clas == \"yes\": types = args.type names = args.name dirs = args.folder+'.md' messge = args.messege else: messge = args.messege os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if messge != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{messge}\" && git push origin master') print(\"all works OK!!\") sys.exit() for index,name in enumerate(data['nav']): if name.get(types): print('ok') data['nav'][index][types].append({names:dirs}) with open(mkdocs_yaml,'w',encoding='utf-8') as fp: yaml.dump(data,fp,allow_unicode=True) os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") #\u66ff\u6362\u6587\u4ef6 copyFiles(f\"{mkdocs_work}\\site\",githubpage) if messge != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{messge}\" && git push origin master') print(\"all works OK!!\") \u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u552f\u4e00\u7684\u6280\u672f\u70b9\u5c31\u662f\u590d\u5236\u4e00\u4e2a\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u4ee5\u53ca\u5b50\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u5230\u4e86\u9012\u5f52\u3002 \u672c\u535a\u5ba2\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5de5\u5177\u63d0\u4ea4\u7684\uff01 \u65b0\u4ee3\u7801\uff1a\uff08\u56fe\u5f62\u754c\u9762\uff09 import sys from PyQt5.QtGui import * from PyQt5.QtCore import * from PyQt5.QtWidgets import * import os import yaml config = { '\u7b97\u6cd5\u76f8\u5173':'sf', 'Python':'python', 'Cookbook':'Cookbook', '\u722c\u866b':'spider', 'Pandas':'pandas', 'Pytorch':'pytorch', 'AI\u5b66\u4e60':'AI_learn', 'flask':\"flask\", '\u5176\u4ed6':'others' } with open(r\"config.yml\",'r',encoding='utf-8') as fp: res = fp.read() data = yaml.load(res,Loader=yaml.FullLoader) mkdocs_yaml = data['mkdocs_yaml'] mkdocs_work = data['mkdocs_work_folder'] githubpage = data['githubpage_folder'] def copyFiles(sourceDir,targetDir): if sourceDir.find(\"exceptionfolder\")>0: return for file in os.listdir(sourceDir): sourceFile = os.path.join(sourceDir,file) targetFile = os.path.join(targetDir,file) if os.path.isfile(sourceFile): if not os.path.exists(targetDir): os.makedirs(targetDir) if not os.path.exists(targetFile) or (os.path.exists(targetFile) and (os.path.getsize(targetFile) != os.path.getsize(sourceFile))): open(targetFile, \"wb\").write(open(sourceFile, \"rb\").read()) print(targetFile+ \" copy succeeded\") if os.path.isdir(sourceFile): copyFiles(sourceFile, targetFile) class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): #\u63a7\u4ef6\u51fd\u6570 self.cb=QComboBox() self.cb.addItem(\"\u8bf7\u9009\u62e9\u7c7b\u578b\") self.cb.addItem(\"\u7b97\u6cd5\u76f8\u5173\") self.cb.addItem(\"Python\") self.cb.addItem(\"Cookbook\") self.cb.addItem(\"\u722c\u866b\") self.cb.addItem(\"Pandas\") self.cb.addItem(\"AI\u5b66\u4e60\") self.cb.addItem(\"flask\") self.cb.addItem(\"\u5176\u4ed6\") self.cb.activated.connect(self.showfolder) #\u6807\u7b7e self.is_new = QLabel('\u662f\u5426\u4e3a\u65b0\u6587\u4ef6') self.types = QLabel('\u7c7b\u578b') self.name = QLabel('\u540d\u5b57') self.folder = QLabel('\u8def\u5f84') self.message = QLabel('\u63d0\u4ea4\u4fe1\u606f') #\u6587\u672c\u6846 self.cb_isnew = QComboBox() self.cb_isnew.addItem(\"yes\") self.cb_isnew.addItem(\"no\") self.nameEdit = QLineEdit() # self.folderEdit = QLineEdit() self.cbfolder = QComboBox() self.messageEdit = QTextEdit() #\u6309\u94ae self.commit_but = QPushButton('\u786e\u8ba4\u63d0\u4ea4') self.commit_but.clicked.connect(self.mains) #\u5e03\u5c40 grid = QGridLayout() grid.setSpacing(10) grid.addWidget(self.is_new, 1, 0) grid.addWidget(self.cb_isnew, 1, 1) grid.addWidget(self.types, 2, 0) grid.addWidget(self.cb,2,1) # grid.addWidget(typeEdit, 2, 1) grid.addWidget(self.name, 3, 0) grid.addWidget(self.nameEdit, 3, 1) grid.addWidget(self.folder,4,0) grid.addWidget(self.cbfolder,4,1) grid.addWidget(self.message,5,0) grid.addWidget(self.messageEdit,5,1) grid.addWidget(self.commit_but) self.setLayout(grid) self.setGeometry(300, 300, 350, 300) self.setWindowTitle('MY_BLOG_SERVER') self.show() def mains(self): is_new = self.cb_isnew.currentText() types = self.cb.currentText() names = self.nameEdit.text() folder = self.cbfolder.currentText() message = self.messageEdit.toPlainText() #\u5982\u679c\u4e0d\u662f\u65b0\u6587\u4ef6 if is_new != 'yes': os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if message != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{message}\" && git push origin master') QMessageBox.information(self,\"\u606d\u559c!\",\"\u6240\u6709\u5de5\u4f5c\u5b8c\u6210!\",QMessageBox.Yes | QMessageBox.No) sys.exit() #\u5982\u679c\u662f\u65b0\u6587\u4ef6 with open(mkdocs_yaml,'r',encoding='utf-8') as fp: result = fp.read() data = yaml.load(result,Loader=yaml.FullLoader) for index,name in enumerate(data['nav']): if name.get(types): data['nav'][index][types].append({names:f\"{config[types]}/{folder}\"}) with open(mkdocs_yaml,'w',encoding='utf-8') as fp: yaml.dump(data,fp,allow_unicode=True) os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if message != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{message}\" && git push origin master') QMessageBox.information(self,\"\u606d\u559c!\",\"\u6240\u6709\u5de5\u4f5c\u5b8c\u6210!\",QMessageBox.Yes | QMessageBox.No) sys.exit() def showfolder(self): self.cbfolder.addItem(\"\u8bf7\u9009\u62e9\u6587\u4ef6\") docs_folder = mkdocs_yaml.strip('mkdocs.yml')+f'docs/{config[self.cb.currentText()]}' for file in os.listdir(docs_folder): self.cbfolder.addItem(file) if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_())","title":"\u535a\u5ba2\u540e\u53f0\u6848\u4f8b"},{"location":"others/one_test/#_1","text":"\u9700\u8981\u7528\u5230\u7684\u5e93\u6709 os \u6807\u51c6\u5e93 2020 12/21 \u66f4\u65b0\uff1a\u51ac\u81f3\u65e5\uff0c\u5b8c\u6210\u4e86\u56fe\u50cf\u754c\u9762\u3002\u4e0b\u9762\u7684\u4ee3\u7801 \u9700\u8981\u7684\u547d\u4ee4\u6709: os.system(\"\") \u7528\u6765\u6a21\u4effdos\u547d\u4ee4\uff0c\u4e3b\u8981\u7528\u6765\u751f\u6210\u7ad9\u70b9\uff0c\u548cgit push os.listdir(\"\") \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\uff0c\u7528\u6765\u590d\u5236site\u76ee\u5f55\u7684\u6587\u4ef6\u5230\u4e2a\u4eba\u7f51\u7ad9\u9879\u76ee\u4e0a yaml \u5e93\uff0c\u7528\u6765\u64cd\u4f5cmkdocs\u7684\u914d\u7f6e\u6587\u4ef6,\u5373 mkdocs.yml shutil \u5e93\uff0c\u7528\u6765\u590d\u5236\u5e76\u66ff\u6362\u6587\u4ef6 \u914d\u7f6e\u6587\u4ef6\uff0c config.yml \u7528\u6765\u83b7\u53d6\u5404\u9700\u8981\u7684\u6587\u4ef6\u8def\u5f84 \u5927\u6982\u4ee3\u7801\u5982\u4e0b \u53c8\u66f4\u65b0\u4e86\u4e00\u6b21\uff0c\u7ed9\u8fd9\u4e2a\u7a0b\u5e8f\u52a0\u5165\u4e86\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u4f7f\u5176\u66f4\u65b9\u4fbf","title":"\u7528\u547d\u4ee4\u884c\u5b9e\u73b0\u535a\u5ba2\u81ea\u52a8\u66f4\u65b0\uff0c\u7c7b\u4f3c\u4e8e\u7f51\u7ad9\u540e\u7aef"},{"location":"others/one_test/#_2","text":"import os import sys import yaml import shutil import argparse import logging logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') logger = logging.getLogger('my_test') parser = argparse.ArgumentParser() parser.add_argument('-new', type=str,help='\u662f\u5426\u4e3a\u65b0\u6587\u4ef6') parser.add_argument('-type', type=str,help='\u7c7b\u578b') parser.add_argument('-name', type=str,help='\u540d\u5b57') parser.add_argument('-folder', type=str,help='\u8def\u5f84') parser.add_argument('-messege', type=str,help='\u63d0\u4ea4\u4fe1\u606f') args = parser.parse_args() def copyFiles(sourceDir,targetDir): if sourceDir.find(\"exceptionfolder\")>0: return for file in os.listdir(sourceDir): sourceFile = os.path.join(sourceDir,file) targetFile = os.path.join(targetDir,file) if os.path.isfile(sourceFile): if not os.path.exists(targetDir): os.makedirs(targetDir) if not os.path.exists(targetFile) or (os.path.exists(targetFile) and (os.path.getsize(targetFile) != os.path.getsize(sourceFile))): open(targetFile, \"wb\").write(open(sourceFile, \"rb\").read()) print(targetFile+ \" copy succeeded\") if os.path.isdir(sourceFile): copyFiles(sourceFile, targetFile) with open(r\"config.yml\",'r',encoding='utf-8') as fp: res = fp.read() data = yaml.load(res,Loader=yaml.FullLoader) mkdocs_yaml = data['mkdocs_yaml'] mkdocs_work = data['mkdocs_work_folder'] githubpage = data['githubpage_folder'] with open(mkdocs_yaml,'r',encoding='utf-8') as fp: result = fp.read() data = yaml.load(result,Loader=yaml.FullLoader) print(\"\u6ce8\u610f\u5728\u6267\u884c\u524d\u8981\u786e\u4fdd\u5355\u8bcd\u62fc\u5bf9\uff0c\u800c\u4e14\u6709\u5bf9\u5e94\u6587\u4ef6!!!!!\") clas = args.new if clas == \"yes\": types = args.type names = args.name dirs = args.folder+'.md' messge = args.messege else: messge = args.messege os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if messge != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{messge}\" && git push origin master') print(\"all works OK!!\") sys.exit() for index,name in enumerate(data['nav']): if name.get(types): print('ok') data['nav'][index][types].append({names:dirs}) with open(mkdocs_yaml,'w',encoding='utf-8') as fp: yaml.dump(data,fp,allow_unicode=True) os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") #\u66ff\u6362\u6587\u4ef6 copyFiles(f\"{mkdocs_work}\\site\",githubpage) if messge != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{messge}\" && git push origin master') print(\"all works OK!!\") \u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u552f\u4e00\u7684\u6280\u672f\u70b9\u5c31\u662f\u590d\u5236\u4e00\u4e2a\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u4ee5\u53ca\u5b50\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u5230\u4e86\u9012\u5f52\u3002 \u672c\u535a\u5ba2\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5de5\u5177\u63d0\u4ea4\u7684\uff01","title":"\u65e7\u4ee3\u7801\uff1a\uff08\u547d\u4ee4\u884c\u5b9e\u73b0\uff09"},{"location":"others/one_test/#_3","text":"import sys from PyQt5.QtGui import * from PyQt5.QtCore import * from PyQt5.QtWidgets import * import os import yaml config = { '\u7b97\u6cd5\u76f8\u5173':'sf', 'Python':'python', 'Cookbook':'Cookbook', '\u722c\u866b':'spider', 'Pandas':'pandas', 'Pytorch':'pytorch', 'AI\u5b66\u4e60':'AI_learn', 'flask':\"flask\", '\u5176\u4ed6':'others' } with open(r\"config.yml\",'r',encoding='utf-8') as fp: res = fp.read() data = yaml.load(res,Loader=yaml.FullLoader) mkdocs_yaml = data['mkdocs_yaml'] mkdocs_work = data['mkdocs_work_folder'] githubpage = data['githubpage_folder'] def copyFiles(sourceDir,targetDir): if sourceDir.find(\"exceptionfolder\")>0: return for file in os.listdir(sourceDir): sourceFile = os.path.join(sourceDir,file) targetFile = os.path.join(targetDir,file) if os.path.isfile(sourceFile): if not os.path.exists(targetDir): os.makedirs(targetDir) if not os.path.exists(targetFile) or (os.path.exists(targetFile) and (os.path.getsize(targetFile) != os.path.getsize(sourceFile))): open(targetFile, \"wb\").write(open(sourceFile, \"rb\").read()) print(targetFile+ \" copy succeeded\") if os.path.isdir(sourceFile): copyFiles(sourceFile, targetFile) class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): #\u63a7\u4ef6\u51fd\u6570 self.cb=QComboBox() self.cb.addItem(\"\u8bf7\u9009\u62e9\u7c7b\u578b\") self.cb.addItem(\"\u7b97\u6cd5\u76f8\u5173\") self.cb.addItem(\"Python\") self.cb.addItem(\"Cookbook\") self.cb.addItem(\"\u722c\u866b\") self.cb.addItem(\"Pandas\") self.cb.addItem(\"AI\u5b66\u4e60\") self.cb.addItem(\"flask\") self.cb.addItem(\"\u5176\u4ed6\") self.cb.activated.connect(self.showfolder) #\u6807\u7b7e self.is_new = QLabel('\u662f\u5426\u4e3a\u65b0\u6587\u4ef6') self.types = QLabel('\u7c7b\u578b') self.name = QLabel('\u540d\u5b57') self.folder = QLabel('\u8def\u5f84') self.message = QLabel('\u63d0\u4ea4\u4fe1\u606f') #\u6587\u672c\u6846 self.cb_isnew = QComboBox() self.cb_isnew.addItem(\"yes\") self.cb_isnew.addItem(\"no\") self.nameEdit = QLineEdit() # self.folderEdit = QLineEdit() self.cbfolder = QComboBox() self.messageEdit = QTextEdit() #\u6309\u94ae self.commit_but = QPushButton('\u786e\u8ba4\u63d0\u4ea4') self.commit_but.clicked.connect(self.mains) #\u5e03\u5c40 grid = QGridLayout() grid.setSpacing(10) grid.addWidget(self.is_new, 1, 0) grid.addWidget(self.cb_isnew, 1, 1) grid.addWidget(self.types, 2, 0) grid.addWidget(self.cb,2,1) # grid.addWidget(typeEdit, 2, 1) grid.addWidget(self.name, 3, 0) grid.addWidget(self.nameEdit, 3, 1) grid.addWidget(self.folder,4,0) grid.addWidget(self.cbfolder,4,1) grid.addWidget(self.message,5,0) grid.addWidget(self.messageEdit,5,1) grid.addWidget(self.commit_but) self.setLayout(grid) self.setGeometry(300, 300, 350, 300) self.setWindowTitle('MY_BLOG_SERVER') self.show() def mains(self): is_new = self.cb_isnew.currentText() types = self.cb.currentText() names = self.nameEdit.text() folder = self.cbfolder.currentText() message = self.messageEdit.toPlainText() #\u5982\u679c\u4e0d\u662f\u65b0\u6587\u4ef6 if is_new != 'yes': os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if message != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{message}\" && git push origin master') QMessageBox.information(self,\"\u606d\u559c!\",\"\u6240\u6709\u5de5\u4f5c\u5b8c\u6210!\",QMessageBox.Yes | QMessageBox.No) sys.exit() #\u5982\u679c\u662f\u65b0\u6587\u4ef6 with open(mkdocs_yaml,'r',encoding='utf-8') as fp: result = fp.read() data = yaml.load(result,Loader=yaml.FullLoader) for index,name in enumerate(data['nav']): if name.get(types): data['nav'][index][types].append({names:f\"{config[types]}/{folder}\"}) with open(mkdocs_yaml,'w',encoding='utf-8') as fp: yaml.dump(data,fp,allow_unicode=True) os.system(f\"cd {mkdocs_work} && mkdocs build --clean\") copyFiles(f\"{mkdocs_work}\\site\",githubpage) if message != \"\": os.system(f'cd {githubpage} && git add . && git commit -m \"{message}\" && git push origin master') QMessageBox.information(self,\"\u606d\u559c!\",\"\u6240\u6709\u5de5\u4f5c\u5b8c\u6210!\",QMessageBox.Yes | QMessageBox.No) sys.exit() def showfolder(self): self.cbfolder.addItem(\"\u8bf7\u9009\u62e9\u6587\u4ef6\") docs_folder = mkdocs_yaml.strip('mkdocs.yml')+f'docs/{config[self.cb.currentText()]}' for file in os.listdir(docs_folder): self.cbfolder.addItem(file) if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_())","title":"\u65b0\u4ee3\u7801\uff1a\uff08\u56fe\u5f62\u754c\u9762\uff09"},{"location":"others/others/","text":"\u4e00\u4e9b\u6211\u5e38\u7528\u7684\u5b66\u4e60\u7684\u7f51\u7ad9\u548c\u4e66\u7c4d \u7f16\u7a0b\u524d\u7684\u51c6\u5907 \u5728\u7f16\u7a0b\u4e4b\u524d\u9700\u8981\u54ea\u4e9b\u51c6\u5907\uff0c\u8fd9\u4e2a\u8bb2\u5ea7\u8bb2\u4e86\u6211\u4eec\u5b66\u4e60\u7f16\u7a0b\u7f3a\u5931\u7684\u8bfe\u7a0b \u5927\u5b66\u91cc\u7684\u8ba1\u7b97\u673a\u8bfe\u7a0b\u901a\u5e38\u4e13\u6ce8\u4e8e\u8bb2\u6388\u4ece\u64cd\u4f5c\u7cfb\u7edf\u5230\u673a\u5668\u5b66\u4e60\u8fd9\u4e9b\u5b66\u9662\u6d3e\u7684\u8bfe\u7a0b\u6216\u4e3b\u9898\uff0c\u800c\u5bf9\u4e8e\u5982\u4f55\u7cbe\u901a\u5de5\u5177\u8fd9\u4e00\u4e3b\u9898\u5219\u5f80\u5f80\u4f1a\u7559\u7ed9\u5b66\u751f\u81ea\u884c\u63a2\u7d22\u3002\u5728\u8fd9\u4e2a\u7cfb\u5217\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bb2\u6388\u547d\u4ee4\u884c\u3001\u5f3a\u5927\u7684\u6587\u672c\u7f16\u8f91\u5668\u7684\u4f7f\u7528\u3001\u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u63d0\u4f9b\u7684\u591a\u79cd\u7279\u6027\u7b49\u7b49\u3002\u5b66\u751f\u5728\u4ed6\u4eec\u53d7\u6559\u80b2\u9636\u6bb5\u5c31\u4f1a\u548c\u8fd9\u4e9b\u5de5\u5177\u671d\u5915\u76f8\u5904\uff08\u5728\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u66f4\u662f\u8fd9\u6837\uff09\u3002 \u56e0\u6b64\uff0c\u82b1\u65f6\u95f4\u6253\u78e8\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u7684\u80fd\u529b\u5e76\u80fd\u591f\u6700\u7ec8\u719f\u7ec3\u5730\u3001\u6d41\u7545\u5730\u4f7f\u7528\u5b83\u4eec\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\u3002 https://missing-semester-cn.github.io/ GIT \u7f16\u7a0b\u4e5f\u9700\u8981\u56e2\u961f\u5408\u4f5c\uff0c\u5982\u4f55\u9ad8\u6548\u7684\u8fdb\u884c\u56e2\u961f\u5f00\u53d1\uff0c\u8fd9\u90fd\u662f\u6211\u4eec\u8981\u9762\u4e34\u7684\u95ee\u9898\u3002\u76ee\u524d\u6700\u4e3b\u6d41\u7684\u5de5\u5177\u5c31\u662fgit\u3002\u8fd9\u4e2a\u6559\u7a0b\u5148\u5b66\u4e60\u5728\u672c\u5730\u5bf9\u4ed3\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u540e\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u8fdc\u7a0b\u4ed3\u5e93\u64cd\u4f5c\u3002\u800c\u4e14\u6f14\u793a\u975e\u5e38\u76f4\u89c2\uff0c\u5b66\u4e60\u4e50\u8da3\u5f88\u9ad8\u3002 https://learngitbranching.js.org/?locale=zh_CN SQL \u5b66\u4e60SQL\u6700\u5feb\u7684\u65b9\u5f0f\u5c31\u662f\u591a\u7ec3\u4e60\uff0c\u8fd9\u4e2a\u6559\u7a0b\u5c31\u662f\u7528\u7ec3\u4e60\u7684\u65b9\u5f0f\u6765\u5b66\u4e60SQL\uff0c\u96be\u5ea6\u9010\u6e10\u589e\u5927\uff0c\u5faa\u5e8f\u6e10\u8fdb\uff0c\u5f88\u5bb9\u6613\u6c89\u6d78\u5176\u4e2d\uff0c\u6548\u679c\u5f88\u597d\u3002 https://sqlzoo.net/ REGEX(\u6b63\u5219\u8868\u8fbe\u5f0f) \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5f88\u597d\u7684\u5de5\u5177\uff0c\u719f\u7ec3\u8fd0\u884c\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff0c\u8ba9\u7a0b\u5e8f\u6548\u7387\u66f4\u9ad8\uff0c\u5f53\u7136\u4e5f\u662f\u4e00\u79cd\u722c\u866b\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u7f51\u7ad9\u524d\u9762\u662f\u6559\u7a0b\uff0c\u540e\u9762\u5c31\u662f\u7ec3\u4e60\uff0c\u8ba9\u4f60\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u662f\u611f\u89c9\u7ec3\u4e60\u6bd4\u8f83\u7b80\u5355\uff0c\u5b9e\u9645\u95ee\u9898\u8981\u6bd4\u8fd9\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u9700\u8981 \u6b63\u5219\u6d4b\u8bd5\u7f51\u7ad9 \u6765\u9a8c\u8bc1\u81ea\u5df1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5426\u5339\u914d\u3002 https://regexone.com/ SPIDER(\u722c\u866b) \u7b80\u5355\u7684\u722c\u866b\u5df2\u7ecf\u53ef\u4ee5\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u9700\u6c42\u4e86\uff0c\u5b66\u4e60\u8d77\u6765\u4e5f\u6bd4\u8f83\u7b80\u5355\u3002\u8fd9\u4e2a\u7f51\u7ad9\u611f\u89c9\u8986\u76d6\u4e86\u57fa\u7840\u548c\u8fdb\u9636\uff0c\u53ef\u4ee5\u6765\u5165\u95e8\u722c\u866b https://python3webspider.cuiqingcai.com/ LATEX \u5199\u516c\u5f0f\u5c11\u4e0d\u4e86\u5b83\uff0c\u4e0d\u7528\u523b\u610f\u53bb\u8bb0\uff0c\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u5c31\u884c https://www.zybuluo.com/codeep/note/163962 PYTHON\u57fa\u7840 PYTHON\u7f51\u4e0a\u7684\u6559\u7a0b\u5f88\u591a\uff0c\u4f18\u79c0\u7684\u535a\u5ba2\u4e5f\u6709\u5f88\u591a\uff0c\u50cf\u5ed6\u96ea\u5cf0\u7684\u535a\u5ba2\uff0c\u4e0d\u8fc7\u8986\u76d6\u9762\u6bd4\u8f83\u5e7f\uff0c\u6df1\u5ea6\u6bd4\u8f83\u6d45\uff0c\u53ef\u4ee5\u63d0\u524d\u4e86\u89e3\u4e00\u4e9b\u8fdb\u9636\u6280\u672f\u3002\u8fd9\u91cc\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u53eb\u300apython\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b\uff0c\u6d45\u663e\u6613\u61c2\uff0c\u4f8b\u5b50\u4e5f\u5f88\u6709\u8da3\uff0c\u540e\u9762\u5b9e\u8df5\u7684\u4f8b\u5b50\u6d89\u53ca\u5230\u4e86\u6e38\u620f\u5f00\u53d1\u3001\u6570\u636e\u53ef\u89c6\u5316\u3001\u7f51\u7ad9\u5f00\u53d1\u7b49\u3002 https://github.com/vllbc/My_Learn/blob/master/%E7%94%B5%E5%AD%90%E4%B9%A6/Python%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5_%E8%B6%85%E6%B8%85%E7%89%88.pdf \u6b64\u5916\u591a\u8bf4\u4e00\u53e5\uff0c\u5b66\u4e60\u9636\u6bb5\u4e0d\u8981\u5c6f\u592a\u591a\u7f51\u7ad9\u6216\u8005\u4e66\u7c4d\uff0c\u6216\u8005\u662f\u5149\u6536\u85cf\u4e0d\u770b\uff0c\u4e0d\u7ba1\u662f\u4ec0\u4e48\u6559\u7a0b\uff0c\u575a\u6301\u770b\u4e0b\u53bb\u5b66\u4e0b\u53bb\u90fd\u53ef\u4ee5\u5f88\u597d\u7684\u5165\u95e8\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u4e0d\u7ba1\u5b66\u4e60\u4ec0\u4e48\u90fd\u53ea\u9700\u8981\u4e00\u79cd\u5b66\u4e60\u8d44\u6599\uff0c\u56e0\u6b64\u4e0a\u9762\u7684\u6211\u53ea\u63a8\u8350\u4e86\u4e00\u4e2a\u7f51\u7ad9\u3002 \u5f53\u7136\u5b98\u65b9\u7684\u6559\u7a0b\u4e5f\u662f\u5f88\u597d\u7684\uff0c\u4e0d\u8fc7\u66f4\u63a8\u8350\u770b \u5b98\u65b9\u7684\u6807\u51c6\u5e93\u6559\u7a0b PYTHON\u8fdb\u9636 \u5f88\u591a\u4eba\u89c9\u5f97PYTHON\u5f88\u7b80\u5355\uff0c\u5f53\u7136\u5165\u95e8\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u7279\u522b\u96be\u7684\u8bed\u6cd5\uff0c\u4e5f\u6ca1\u6709\u7279\u522b\u96be\u7406\u89e3\u7684\u6982\u5ff5\u3002\u4f46\u4ec5\u4ec5\u5165\u95e8\u662f\u6ca1\u6709\u529e\u6cd5\u8fdb\u884c\u9879\u76ee\u5f00\u53d1\u7684\uff0c\u4e0d\u4e86\u89e3\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c31\u6ca1\u529e\u6cd5\u5199\u51fa\u53ef\u7ef4\u62a4\u6027\u9ad8\u7684\u4ee3\u7801\uff0c\u4e0d\u5b66\u4e60\u51fd\u6570\u5f0f\uff0c\u5199\u51fa\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u5f88\u4f4e\uff0c\u53e6\u5916\u591a\u7ebf\u7a0b\u3001\u534f\u7a0b\u3001\u88c5\u9970\u5668\u3001\u9b54\u6cd5\u65b9\u6cd5\u7b49\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u5199\u51fa\u9ad8\u6548\u5e76\u4e14\u4f18\u7f8e\u7684\u4ee3\u7801\u3002\u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u4e66\u7c4d\u548c\u7f51\u7ad9\u3002 \u4e00\u3001PYTHON\u5de5\u5320 \u6211\u4e00\u76f4\u89c9\u5f97\u7f16\u7a0b\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u4e00\u95e8\u300e\u624b\u827a\u300f\uff0c\u56e0\u4e3a\u4f18\u96c5\u800c\u9ad8\u6548\u7684\u4ee3\u7801\uff0c\u5c31\u5982\u540c\u5b8c\u7f8e\u7684\u624b\u5de5\u827a\u54c1\u4e00\u6837\u8ba9\u4eba\u8d4f\u5fc3\u60a6\u76ee\u3002 \u5728\u96d5\u7422\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5927\u5de5\u7a0b\uff1a\u6bd4\u5982\u5e94\u8be5\u7528\u4ec0\u4e48\u67b6\u6784\u3001\u54ea\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4e5f\u6709\u66f4\u591a\u7684\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u4f55\u65f6\u4f7f\u7528\u5f02\u5e38\uff08Exceptions\uff09\u3001\u6216\u600e\u4e48\u7ed9\u53d8\u91cf\u8d77\u540d\u3002\u90a3\u4e9b\u771f\u6b63\u4f18\u79c0\u7684\u4ee3\u7801\uff0c\u6b63\u662f\u7531\u65e0\u6570\u4f18\u79c0\u7684\u7ec6\u8282\u9020\u5c31\u7684\u3002 \u300ePython \u5de5\u5320\u300f\u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\uff0c\u662f\u6211\u7684\u4e00\u6b21\u5c0f\u5c0f\u5c1d\u8bd5\u3002\u5b83\u4e13\u6ce8\u4e8e\u5206\u4eab Python \u7f16\u7a0b\u4e2d\u7684\u4e00\u4e9b\u504f \u300e\u5c0f\u300f \u7684\u4e1c\u897f\u3002\u5e0c\u671b\u80fd\u591f\u5e2e\u5230\u6bcf\u4e00\u4f4d\u7f16\u7a0b\u8def\u4e0a\u7684\u5320\u4eba\u3002 https://github.com/piglei/one-python-craftsman \u6211\u559c\u6b22\u7684\u6559\u7a0b\u4e4b\u4e00\uff0c\u5f88\u591a\u5b9e\u7528\u7684\u6280\u5de7\uff0c\u8fd8\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u4e8c\u3001PYTHON COOKBOOK https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html \u770b\u5b8c\u5927\u4e3a\u9707\u60ca\u7684\u4e66\uff0c\u8ddf\u7740\u7ec3\u4e60\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\u5b66\u4f1a\u4e86\u5f88\u591a\u5947\u6280\u6deb\u5de7\uff0c\u6211\u611f\u89c9\u5185\u5bb9\u8986\u76d6\u4e86\u4e00\u4e2a\u9ad8\u7ea7python\u5de5\u7a0b\u5e08\u5fc5\u987b\u5177\u5907\u7684\u6280\u80fd\u3002 \u4e09\u3001FLUENT PYTHON \u73b0\u5728\u8fd8\u672a\u5b8c\u5168\u641e\u61c2\u7684\u4e66\uff0c\u5185\u5bb9\u5f88\u4e30\u5bcc\uff0c\u96be\u5ea6\u4e5f\u5f88\u5927\uff0c\u53ef\u4ee5\u5f53\u4f5c\u53c2\u8003\u4e66\u4f7f\u7528\uff0c\u5b8c\u5168\u7406\u89e3\u96be\u5ea6\u5f88\u5927\u3002 \u56db\u3001PYTHON\u6700\u4f73\u5b9e\u8df5\u6307\u5357 https://pythonguidecn.readthedocs.io/zh/latest/ \u5c31\u50cf\u5b83\u7684\u540d\u5b57\uff0c\u5f53\u4f60\u5b66\u5b8c\u4e86\u57fa\u7840\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u505a\u7684\u65f6\u5019\u4e0d\u59a8\u6765\u770b\u770b\u8fd9\u4e2a\u7f51\u7ad9\u3002 \u4e94\u3001PYTHON\u8bbe\u8ba1\u6a21\u5f0f https://github.com/faif/python-patterns \u4ecb\u7ecd\u4e86PYTHON\u7684\u51e0\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5f88\u5927\u7684\u63d0\u9ad8\u7f16\u7a0b\u6c34\u5e73 \u516d\u3001WTF PYTHON \u5c31\u50cf\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c\u5c31\u662f\u603b\u7ed3\u4e86\u5b66\u4e60PYTHON\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u5751\uff0c\u770b\u5b8c\u4e4b\u540e\u6709\u4e2a\u5927\u81f4\u4e86\u89e3\u5c31\u597d\uff0c\u4e0d\u7136\u4ee5\u540e\u9047\u5230\u4e86\u5176\u4e2d\u7684\u95ee\u9898\u5fd9\u7684\u7126\u5934\u70c2\u989d\u4e5f\u627e\u4e0d\u5230\u89e3\u51b3\u7684\u529e\u6cd5 Python, \u662f\u4e00\u4e2a\u8bbe\u8ba1\u4f18\u7f8e\u7684\u89e3\u91ca\u578b\u9ad8\u7ea7\u8bed\u8a00, \u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u80fd\u8ba9\u7a0b\u5e8f\u5458\u611f\u5230\u8212\u9002\u7684\u529f\u80fd\u7279\u6027. \u4f46\u6709\u7684\u65f6\u5019, Python \u7684\u4e00\u4e9b\u8f93\u51fa\u7ed3\u679c\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u4f3c\u4e4e\u5e76\u4e0d\u662f\u90a3\u4e48\u4e00\u76ee\u4e86\u7136. \u8fd9\u4e2a\u6709\u8da3\u7684\u9879\u76ee\u610f\u5728\u6536\u96c6 Python \u4e2d\u90a3\u4e9b\u96be\u4ee5\u7406\u89e3\u548c\u53cd\u4eba\u7c7b\u76f4\u89c9\u7684\u4f8b\u5b50\u4ee5\u53ca\u9c9c\u4e3a\u4eba\u77e5\u7684\u529f\u80fd\u7279\u6027, \u5e76\u5c1d\u8bd5\u8ba8\u8bba\u8fd9\u4e9b\u73b0\u8c61\u80cc\u540e\u771f\u6b63\u7684\u539f\u7406! \u867d\u7136\u4e0b\u9762\u7684\u6709\u4e9b\u4f8b\u5b50\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u89c9\u5f97 WTFs, \u4f46\u5b83\u4eec\u4f9d\u7136\u6709\u53ef\u80fd\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e9b\u4f60\u6240\u4e0d\u77e5\u9053\u7684 Python \u6709\u8da3\u7279\u6027. \u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u79cd\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u5185\u90e8\u539f\u7406\u7684\u597d\u529e\u6cd5, \u800c\u4e14\u6211\u76f8\u4fe1\u4f60\u4e5f\u4f1a\u4ece\u4e2d\u83b7\u5f97\u4e50\u8da3! \u5982\u679c\u60a8\u662f\u4e00\u4f4d\u7ecf\u9a8c\u6bd4\u8f83\u4e30\u5bcc\u7684 Python \u7a0b\u5e8f\u5458, \u4f60\u53ef\u4ee5\u5c1d\u8bd5\u6311\u6218\u770b\u662f\u5426\u80fd\u4e00\u6b21\u5c31\u627e\u5230\u4f8b\u5b50\u7684\u6b63\u786e\u7b54\u6848. \u4f60\u53ef\u80fd\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u4f8b\u5b50\u5df2\u7ecf\u6bd4\u8f83\u719f\u6089\u4e86, \u90a3\u8fd9\u4e5f\u8bb8\u80fd\u5524\u8d77\u4f60\u5f53\u5e74\u8e29\u8fd9\u4e9b\u5751\u65f6\u7684\u751c\u871c\u56de\u5fc6 \ud83d\ude05 https://github.com/leisurelicht/wtfpython-cn FLASK \u8fd9\u53ea\u662f\u7b80\u5355\u7684\u5165\u95e8\uff0c\u53ef\u4ee5\u7b80\u5355\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7f51\u7ad9\uff0c\u770b\u7740\u81ea\u5df1\u8ddf\u7740\u5b9e\u73b0\u4e86\u4e2a\u7f51\u7ad9\u5f88\u6709\u6210\u5c31\u611f\uff0c\u5f53\u7136\u4e5f\u6709\u4e00\u4e9b\u62d3\u5c55\u529f\u80fd\u8ba9\u4f60\u81ea\u5df1\u5b9e\u73b0\uff0c\u5982\u679c\u60f3\u66f4\u52a0\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\u53ef\u4ee5\u4e70\u672c\u4f5c\u8005\u7684\u5b9e\u4f53\u4e66\uff0c\u4e66\u5f88\u539a\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u5728\u6211\u8fd9\u91cc\u5403\u7070\u4e86\u3002 https://read.helloflask.com/ VIM \u5982\u679c\u4f60\u4e5f\u559c\u6b22\u6572\u952e\u76d8\u800c\u4e0d\u559c\u6b22\u65f6\u4e0d\u65f6\u53bb\u64cd\u4f5c\u9f20\u6807\uff0c\u90a3\u4e48VIM\u5c31\u662f\u4f60\u5199\u4ee3\u7801\u7684\u6700\u4f73\u9009\u62e9\uff0c\u4f7f\u7528\u5b83\u4f60\u53ef\u4ee5\u5b8c\u5168\u6446\u8131\u9f20\u6807\u7684\u675f\u7f1a\uff0c\u4e0d\u7ba1\u662f\u5149\u6807\u79fb\u52a8\uff0c\u590d\u5236\u7c98\u8d34\uff0c\u751a\u81f3\u662f\u5b8f \u90fd\u53ef\u4ee5\u6446\u8131\u9f20\u6807\u7684\u675f\u7f1a\u3002 \u5176\u4e2d\u4f5c\u8005\u63d0\u7684\"AHA moment\"\u6211\u89c9\u5f97\u4e5f\u5f88\u6709\u8da3\uff0c\u7b80\u5355\u7684\u7406\u89e3\u5c31\u662f\u7528\u521a\u5b66\u5230\u7684\u77e5\u8bc6\u81ea\u4e3b\u7684\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u64cd\u4f5c\u3002\u4ee5VIM\u800c\u8a00 \u5f53\u4f60\u5b66\u4f1a\u4e86gU\u662f\u5927\u5199\u64cd\u4f5c c\u662f\u4fee\u6539 ciw\u662f\u4fee\u6539\u5149\u6807\u6240\u5728\u7684\u5355\u8bcd\uff0c\"AHA moment\"\u5c31\u662f\u901a\u8fc7gUiw\u5927\u5199\u67d0\u4e2a\u5355\u8bcd\uff0c\u800c\u4e14\u5b8c\u5168\u662f\u81ea\u4e3b\u53bb\u5b9e\u73b0\u7684\u3002 https://github.com/wsdjeg/Learn-Vim_zh_cn \u5176\u5b83\u6709\u8da3\u7684\u7f51\u7ad9\u63a8\u8350 http://www.pythonchallenge.com/ \uff1aPYTHON\u6311\u6218\u5173\u5361\uff0c\u8003\u9a8c\u77e5\u8bc6\u9762\u548c\u89c2\u5bdf\u529b\uff0c\u770b\u770b\u4f60\u53ef\u4ee5\u95ef\u5230\u7b2c\u51e0\u5173\u5427\uff01 https://pytorch.org/docs/stable/index.html \uff1aPYTORCH\u7684\u5b98\u65b9\u6559\u7a0b\uff0c\u8fd8\u53ef\u4ee5\u7528\u4f5c\u53c2\u8003\u548c\u67e5\u8be2\u51fd\u6570\u3002 https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets \uff1aSKLEARN\u7684API\u67e5\u8be2\u7f51\u7ad9\u3002 https://vllbc.top/ \uff1a\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u3002","title":"\u5e38\u7528\u5b66\u4e60\u7f51\u7ad9\u4e66\u7c4d"},{"location":"others/others/#_1","text":"","title":"\u4e00\u4e9b\u6211\u5e38\u7528\u7684\u5b66\u4e60\u7684\u7f51\u7ad9\u548c\u4e66\u7c4d"},{"location":"others/others/#_2","text":"\u5728\u7f16\u7a0b\u4e4b\u524d\u9700\u8981\u54ea\u4e9b\u51c6\u5907\uff0c\u8fd9\u4e2a\u8bb2\u5ea7\u8bb2\u4e86\u6211\u4eec\u5b66\u4e60\u7f16\u7a0b\u7f3a\u5931\u7684\u8bfe\u7a0b \u5927\u5b66\u91cc\u7684\u8ba1\u7b97\u673a\u8bfe\u7a0b\u901a\u5e38\u4e13\u6ce8\u4e8e\u8bb2\u6388\u4ece\u64cd\u4f5c\u7cfb\u7edf\u5230\u673a\u5668\u5b66\u4e60\u8fd9\u4e9b\u5b66\u9662\u6d3e\u7684\u8bfe\u7a0b\u6216\u4e3b\u9898\uff0c\u800c\u5bf9\u4e8e\u5982\u4f55\u7cbe\u901a\u5de5\u5177\u8fd9\u4e00\u4e3b\u9898\u5219\u5f80\u5f80\u4f1a\u7559\u7ed9\u5b66\u751f\u81ea\u884c\u63a2\u7d22\u3002\u5728\u8fd9\u4e2a\u7cfb\u5217\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bb2\u6388\u547d\u4ee4\u884c\u3001\u5f3a\u5927\u7684\u6587\u672c\u7f16\u8f91\u5668\u7684\u4f7f\u7528\u3001\u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u63d0\u4f9b\u7684\u591a\u79cd\u7279\u6027\u7b49\u7b49\u3002\u5b66\u751f\u5728\u4ed6\u4eec\u53d7\u6559\u80b2\u9636\u6bb5\u5c31\u4f1a\u548c\u8fd9\u4e9b\u5de5\u5177\u671d\u5915\u76f8\u5904\uff08\u5728\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u66f4\u662f\u8fd9\u6837\uff09\u3002 \u56e0\u6b64\uff0c\u82b1\u65f6\u95f4\u6253\u78e8\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u7684\u80fd\u529b\u5e76\u80fd\u591f\u6700\u7ec8\u719f\u7ec3\u5730\u3001\u6d41\u7545\u5730\u4f7f\u7528\u5b83\u4eec\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\u3002 https://missing-semester-cn.github.io/","title":"\u7f16\u7a0b\u524d\u7684\u51c6\u5907"},{"location":"others/others/#git","text":"\u7f16\u7a0b\u4e5f\u9700\u8981\u56e2\u961f\u5408\u4f5c\uff0c\u5982\u4f55\u9ad8\u6548\u7684\u8fdb\u884c\u56e2\u961f\u5f00\u53d1\uff0c\u8fd9\u90fd\u662f\u6211\u4eec\u8981\u9762\u4e34\u7684\u95ee\u9898\u3002\u76ee\u524d\u6700\u4e3b\u6d41\u7684\u5de5\u5177\u5c31\u662fgit\u3002\u8fd9\u4e2a\u6559\u7a0b\u5148\u5b66\u4e60\u5728\u672c\u5730\u5bf9\u4ed3\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u540e\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u8fdc\u7a0b\u4ed3\u5e93\u64cd\u4f5c\u3002\u800c\u4e14\u6f14\u793a\u975e\u5e38\u76f4\u89c2\uff0c\u5b66\u4e60\u4e50\u8da3\u5f88\u9ad8\u3002 https://learngitbranching.js.org/?locale=zh_CN","title":"GIT"},{"location":"others/others/#sql","text":"\u5b66\u4e60SQL\u6700\u5feb\u7684\u65b9\u5f0f\u5c31\u662f\u591a\u7ec3\u4e60\uff0c\u8fd9\u4e2a\u6559\u7a0b\u5c31\u662f\u7528\u7ec3\u4e60\u7684\u65b9\u5f0f\u6765\u5b66\u4e60SQL\uff0c\u96be\u5ea6\u9010\u6e10\u589e\u5927\uff0c\u5faa\u5e8f\u6e10\u8fdb\uff0c\u5f88\u5bb9\u6613\u6c89\u6d78\u5176\u4e2d\uff0c\u6548\u679c\u5f88\u597d\u3002 https://sqlzoo.net/","title":"SQL"},{"location":"others/others/#regex","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5f88\u597d\u7684\u5de5\u5177\uff0c\u719f\u7ec3\u8fd0\u884c\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff0c\u8ba9\u7a0b\u5e8f\u6548\u7387\u66f4\u9ad8\uff0c\u5f53\u7136\u4e5f\u662f\u4e00\u79cd\u722c\u866b\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u7f51\u7ad9\u524d\u9762\u662f\u6559\u7a0b\uff0c\u540e\u9762\u5c31\u662f\u7ec3\u4e60\uff0c\u8ba9\u4f60\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u662f\u611f\u89c9\u7ec3\u4e60\u6bd4\u8f83\u7b80\u5355\uff0c\u5b9e\u9645\u95ee\u9898\u8981\u6bd4\u8fd9\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u9700\u8981 \u6b63\u5219\u6d4b\u8bd5\u7f51\u7ad9 \u6765\u9a8c\u8bc1\u81ea\u5df1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5426\u5339\u914d\u3002 https://regexone.com/","title":"REGEX(\u6b63\u5219\u8868\u8fbe\u5f0f)"},{"location":"others/others/#spider","text":"\u7b80\u5355\u7684\u722c\u866b\u5df2\u7ecf\u53ef\u4ee5\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u9700\u6c42\u4e86\uff0c\u5b66\u4e60\u8d77\u6765\u4e5f\u6bd4\u8f83\u7b80\u5355\u3002\u8fd9\u4e2a\u7f51\u7ad9\u611f\u89c9\u8986\u76d6\u4e86\u57fa\u7840\u548c\u8fdb\u9636\uff0c\u53ef\u4ee5\u6765\u5165\u95e8\u722c\u866b https://python3webspider.cuiqingcai.com/","title":"SPIDER(\u722c\u866b)"},{"location":"others/others/#latex","text":"\u5199\u516c\u5f0f\u5c11\u4e0d\u4e86\u5b83\uff0c\u4e0d\u7528\u523b\u610f\u53bb\u8bb0\uff0c\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u5c31\u884c https://www.zybuluo.com/codeep/note/163962","title":"LATEX"},{"location":"others/others/#python","text":"PYTHON\u7f51\u4e0a\u7684\u6559\u7a0b\u5f88\u591a\uff0c\u4f18\u79c0\u7684\u535a\u5ba2\u4e5f\u6709\u5f88\u591a\uff0c\u50cf\u5ed6\u96ea\u5cf0\u7684\u535a\u5ba2\uff0c\u4e0d\u8fc7\u8986\u76d6\u9762\u6bd4\u8f83\u5e7f\uff0c\u6df1\u5ea6\u6bd4\u8f83\u6d45\uff0c\u53ef\u4ee5\u63d0\u524d\u4e86\u89e3\u4e00\u4e9b\u8fdb\u9636\u6280\u672f\u3002\u8fd9\u91cc\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u53eb\u300apython\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b\uff0c\u6d45\u663e\u6613\u61c2\uff0c\u4f8b\u5b50\u4e5f\u5f88\u6709\u8da3\uff0c\u540e\u9762\u5b9e\u8df5\u7684\u4f8b\u5b50\u6d89\u53ca\u5230\u4e86\u6e38\u620f\u5f00\u53d1\u3001\u6570\u636e\u53ef\u89c6\u5316\u3001\u7f51\u7ad9\u5f00\u53d1\u7b49\u3002 https://github.com/vllbc/My_Learn/blob/master/%E7%94%B5%E5%AD%90%E4%B9%A6/Python%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5_%E8%B6%85%E6%B8%85%E7%89%88.pdf \u6b64\u5916\u591a\u8bf4\u4e00\u53e5\uff0c\u5b66\u4e60\u9636\u6bb5\u4e0d\u8981\u5c6f\u592a\u591a\u7f51\u7ad9\u6216\u8005\u4e66\u7c4d\uff0c\u6216\u8005\u662f\u5149\u6536\u85cf\u4e0d\u770b\uff0c\u4e0d\u7ba1\u662f\u4ec0\u4e48\u6559\u7a0b\uff0c\u575a\u6301\u770b\u4e0b\u53bb\u5b66\u4e0b\u53bb\u90fd\u53ef\u4ee5\u5f88\u597d\u7684\u5165\u95e8\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u4e0d\u7ba1\u5b66\u4e60\u4ec0\u4e48\u90fd\u53ea\u9700\u8981\u4e00\u79cd\u5b66\u4e60\u8d44\u6599\uff0c\u56e0\u6b64\u4e0a\u9762\u7684\u6211\u53ea\u63a8\u8350\u4e86\u4e00\u4e2a\u7f51\u7ad9\u3002 \u5f53\u7136\u5b98\u65b9\u7684\u6559\u7a0b\u4e5f\u662f\u5f88\u597d\u7684\uff0c\u4e0d\u8fc7\u66f4\u63a8\u8350\u770b \u5b98\u65b9\u7684\u6807\u51c6\u5e93\u6559\u7a0b","title":"PYTHON\u57fa\u7840"},{"location":"others/others/#python_1","text":"\u5f88\u591a\u4eba\u89c9\u5f97PYTHON\u5f88\u7b80\u5355\uff0c\u5f53\u7136\u5165\u95e8\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u7279\u522b\u96be\u7684\u8bed\u6cd5\uff0c\u4e5f\u6ca1\u6709\u7279\u522b\u96be\u7406\u89e3\u7684\u6982\u5ff5\u3002\u4f46\u4ec5\u4ec5\u5165\u95e8\u662f\u6ca1\u6709\u529e\u6cd5\u8fdb\u884c\u9879\u76ee\u5f00\u53d1\u7684\uff0c\u4e0d\u4e86\u89e3\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c31\u6ca1\u529e\u6cd5\u5199\u51fa\u53ef\u7ef4\u62a4\u6027\u9ad8\u7684\u4ee3\u7801\uff0c\u4e0d\u5b66\u4e60\u51fd\u6570\u5f0f\uff0c\u5199\u51fa\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u5f88\u4f4e\uff0c\u53e6\u5916\u591a\u7ebf\u7a0b\u3001\u534f\u7a0b\u3001\u88c5\u9970\u5668\u3001\u9b54\u6cd5\u65b9\u6cd5\u7b49\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u5199\u51fa\u9ad8\u6548\u5e76\u4e14\u4f18\u7f8e\u7684\u4ee3\u7801\u3002\u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u4e66\u7c4d\u548c\u7f51\u7ad9\u3002","title":"PYTHON\u8fdb\u9636"},{"location":"others/others/#python_2","text":"\u6211\u4e00\u76f4\u89c9\u5f97\u7f16\u7a0b\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u4e00\u95e8\u300e\u624b\u827a\u300f\uff0c\u56e0\u4e3a\u4f18\u96c5\u800c\u9ad8\u6548\u7684\u4ee3\u7801\uff0c\u5c31\u5982\u540c\u5b8c\u7f8e\u7684\u624b\u5de5\u827a\u54c1\u4e00\u6837\u8ba9\u4eba\u8d4f\u5fc3\u60a6\u76ee\u3002 \u5728\u96d5\u7422\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5927\u5de5\u7a0b\uff1a\u6bd4\u5982\u5e94\u8be5\u7528\u4ec0\u4e48\u67b6\u6784\u3001\u54ea\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4e5f\u6709\u66f4\u591a\u7684\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u4f55\u65f6\u4f7f\u7528\u5f02\u5e38\uff08Exceptions\uff09\u3001\u6216\u600e\u4e48\u7ed9\u53d8\u91cf\u8d77\u540d\u3002\u90a3\u4e9b\u771f\u6b63\u4f18\u79c0\u7684\u4ee3\u7801\uff0c\u6b63\u662f\u7531\u65e0\u6570\u4f18\u79c0\u7684\u7ec6\u8282\u9020\u5c31\u7684\u3002 \u300ePython \u5de5\u5320\u300f\u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\uff0c\u662f\u6211\u7684\u4e00\u6b21\u5c0f\u5c0f\u5c1d\u8bd5\u3002\u5b83\u4e13\u6ce8\u4e8e\u5206\u4eab Python \u7f16\u7a0b\u4e2d\u7684\u4e00\u4e9b\u504f \u300e\u5c0f\u300f \u7684\u4e1c\u897f\u3002\u5e0c\u671b\u80fd\u591f\u5e2e\u5230\u6bcf\u4e00\u4f4d\u7f16\u7a0b\u8def\u4e0a\u7684\u5320\u4eba\u3002 https://github.com/piglei/one-python-craftsman \u6211\u559c\u6b22\u7684\u6559\u7a0b\u4e4b\u4e00\uff0c\u5f88\u591a\u5b9e\u7528\u7684\u6280\u5de7\uff0c\u8fd8\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u3002","title":"\u4e00\u3001PYTHON\u5de5\u5320"},{"location":"others/others/#python-cookbook","text":"https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html \u770b\u5b8c\u5927\u4e3a\u9707\u60ca\u7684\u4e66\uff0c\u8ddf\u7740\u7ec3\u4e60\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\u5b66\u4f1a\u4e86\u5f88\u591a\u5947\u6280\u6deb\u5de7\uff0c\u6211\u611f\u89c9\u5185\u5bb9\u8986\u76d6\u4e86\u4e00\u4e2a\u9ad8\u7ea7python\u5de5\u7a0b\u5e08\u5fc5\u987b\u5177\u5907\u7684\u6280\u80fd\u3002","title":"\u4e8c\u3001PYTHON COOKBOOK"},{"location":"others/others/#fluent-python","text":"\u73b0\u5728\u8fd8\u672a\u5b8c\u5168\u641e\u61c2\u7684\u4e66\uff0c\u5185\u5bb9\u5f88\u4e30\u5bcc\uff0c\u96be\u5ea6\u4e5f\u5f88\u5927\uff0c\u53ef\u4ee5\u5f53\u4f5c\u53c2\u8003\u4e66\u4f7f\u7528\uff0c\u5b8c\u5168\u7406\u89e3\u96be\u5ea6\u5f88\u5927\u3002","title":"\u4e09\u3001FLUENT PYTHON"},{"location":"others/others/#python_3","text":"https://pythonguidecn.readthedocs.io/zh/latest/ \u5c31\u50cf\u5b83\u7684\u540d\u5b57\uff0c\u5f53\u4f60\u5b66\u5b8c\u4e86\u57fa\u7840\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u505a\u7684\u65f6\u5019\u4e0d\u59a8\u6765\u770b\u770b\u8fd9\u4e2a\u7f51\u7ad9\u3002","title":"\u56db\u3001PYTHON\u6700\u4f73\u5b9e\u8df5\u6307\u5357"},{"location":"others/others/#python_4","text":"https://github.com/faif/python-patterns \u4ecb\u7ecd\u4e86PYTHON\u7684\u51e0\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5f88\u5927\u7684\u63d0\u9ad8\u7f16\u7a0b\u6c34\u5e73","title":"\u4e94\u3001PYTHON\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"others/others/#wtf-python","text":"\u5c31\u50cf\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c\u5c31\u662f\u603b\u7ed3\u4e86\u5b66\u4e60PYTHON\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u5751\uff0c\u770b\u5b8c\u4e4b\u540e\u6709\u4e2a\u5927\u81f4\u4e86\u89e3\u5c31\u597d\uff0c\u4e0d\u7136\u4ee5\u540e\u9047\u5230\u4e86\u5176\u4e2d\u7684\u95ee\u9898\u5fd9\u7684\u7126\u5934\u70c2\u989d\u4e5f\u627e\u4e0d\u5230\u89e3\u51b3\u7684\u529e\u6cd5 Python, \u662f\u4e00\u4e2a\u8bbe\u8ba1\u4f18\u7f8e\u7684\u89e3\u91ca\u578b\u9ad8\u7ea7\u8bed\u8a00, \u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u80fd\u8ba9\u7a0b\u5e8f\u5458\u611f\u5230\u8212\u9002\u7684\u529f\u80fd\u7279\u6027. \u4f46\u6709\u7684\u65f6\u5019, Python \u7684\u4e00\u4e9b\u8f93\u51fa\u7ed3\u679c\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u4f3c\u4e4e\u5e76\u4e0d\u662f\u90a3\u4e48\u4e00\u76ee\u4e86\u7136. \u8fd9\u4e2a\u6709\u8da3\u7684\u9879\u76ee\u610f\u5728\u6536\u96c6 Python \u4e2d\u90a3\u4e9b\u96be\u4ee5\u7406\u89e3\u548c\u53cd\u4eba\u7c7b\u76f4\u89c9\u7684\u4f8b\u5b50\u4ee5\u53ca\u9c9c\u4e3a\u4eba\u77e5\u7684\u529f\u80fd\u7279\u6027, \u5e76\u5c1d\u8bd5\u8ba8\u8bba\u8fd9\u4e9b\u73b0\u8c61\u80cc\u540e\u771f\u6b63\u7684\u539f\u7406! \u867d\u7136\u4e0b\u9762\u7684\u6709\u4e9b\u4f8b\u5b50\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u89c9\u5f97 WTFs, \u4f46\u5b83\u4eec\u4f9d\u7136\u6709\u53ef\u80fd\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e9b\u4f60\u6240\u4e0d\u77e5\u9053\u7684 Python \u6709\u8da3\u7279\u6027. \u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u79cd\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u5185\u90e8\u539f\u7406\u7684\u597d\u529e\u6cd5, \u800c\u4e14\u6211\u76f8\u4fe1\u4f60\u4e5f\u4f1a\u4ece\u4e2d\u83b7\u5f97\u4e50\u8da3! \u5982\u679c\u60a8\u662f\u4e00\u4f4d\u7ecf\u9a8c\u6bd4\u8f83\u4e30\u5bcc\u7684 Python \u7a0b\u5e8f\u5458, \u4f60\u53ef\u4ee5\u5c1d\u8bd5\u6311\u6218\u770b\u662f\u5426\u80fd\u4e00\u6b21\u5c31\u627e\u5230\u4f8b\u5b50\u7684\u6b63\u786e\u7b54\u6848. \u4f60\u53ef\u80fd\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u4f8b\u5b50\u5df2\u7ecf\u6bd4\u8f83\u719f\u6089\u4e86, \u90a3\u8fd9\u4e5f\u8bb8\u80fd\u5524\u8d77\u4f60\u5f53\u5e74\u8e29\u8fd9\u4e9b\u5751\u65f6\u7684\u751c\u871c\u56de\u5fc6 \ud83d\ude05 https://github.com/leisurelicht/wtfpython-cn","title":"\u516d\u3001WTF PYTHON"},{"location":"others/others/#flask","text":"\u8fd9\u53ea\u662f\u7b80\u5355\u7684\u5165\u95e8\uff0c\u53ef\u4ee5\u7b80\u5355\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7f51\u7ad9\uff0c\u770b\u7740\u81ea\u5df1\u8ddf\u7740\u5b9e\u73b0\u4e86\u4e2a\u7f51\u7ad9\u5f88\u6709\u6210\u5c31\u611f\uff0c\u5f53\u7136\u4e5f\u6709\u4e00\u4e9b\u62d3\u5c55\u529f\u80fd\u8ba9\u4f60\u81ea\u5df1\u5b9e\u73b0\uff0c\u5982\u679c\u60f3\u66f4\u52a0\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\u53ef\u4ee5\u4e70\u672c\u4f5c\u8005\u7684\u5b9e\u4f53\u4e66\uff0c\u4e66\u5f88\u539a\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u5728\u6211\u8fd9\u91cc\u5403\u7070\u4e86\u3002 https://read.helloflask.com/","title":"FLASK"},{"location":"others/others/#vim","text":"\u5982\u679c\u4f60\u4e5f\u559c\u6b22\u6572\u952e\u76d8\u800c\u4e0d\u559c\u6b22\u65f6\u4e0d\u65f6\u53bb\u64cd\u4f5c\u9f20\u6807\uff0c\u90a3\u4e48VIM\u5c31\u662f\u4f60\u5199\u4ee3\u7801\u7684\u6700\u4f73\u9009\u62e9\uff0c\u4f7f\u7528\u5b83\u4f60\u53ef\u4ee5\u5b8c\u5168\u6446\u8131\u9f20\u6807\u7684\u675f\u7f1a\uff0c\u4e0d\u7ba1\u662f\u5149\u6807\u79fb\u52a8\uff0c\u590d\u5236\u7c98\u8d34\uff0c\u751a\u81f3\u662f\u5b8f \u90fd\u53ef\u4ee5\u6446\u8131\u9f20\u6807\u7684\u675f\u7f1a\u3002 \u5176\u4e2d\u4f5c\u8005\u63d0\u7684\"AHA moment\"\u6211\u89c9\u5f97\u4e5f\u5f88\u6709\u8da3\uff0c\u7b80\u5355\u7684\u7406\u89e3\u5c31\u662f\u7528\u521a\u5b66\u5230\u7684\u77e5\u8bc6\u81ea\u4e3b\u7684\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u64cd\u4f5c\u3002\u4ee5VIM\u800c\u8a00 \u5f53\u4f60\u5b66\u4f1a\u4e86gU\u662f\u5927\u5199\u64cd\u4f5c c\u662f\u4fee\u6539 ciw\u662f\u4fee\u6539\u5149\u6807\u6240\u5728\u7684\u5355\u8bcd\uff0c\"AHA moment\"\u5c31\u662f\u901a\u8fc7gUiw\u5927\u5199\u67d0\u4e2a\u5355\u8bcd\uff0c\u800c\u4e14\u5b8c\u5168\u662f\u81ea\u4e3b\u53bb\u5b9e\u73b0\u7684\u3002 https://github.com/wsdjeg/Learn-Vim_zh_cn","title":"VIM"},{"location":"others/others/#_3","text":"http://www.pythonchallenge.com/ \uff1aPYTHON\u6311\u6218\u5173\u5361\uff0c\u8003\u9a8c\u77e5\u8bc6\u9762\u548c\u89c2\u5bdf\u529b\uff0c\u770b\u770b\u4f60\u53ef\u4ee5\u95ef\u5230\u7b2c\u51e0\u5173\u5427\uff01 https://pytorch.org/docs/stable/index.html \uff1aPYTORCH\u7684\u5b98\u65b9\u6559\u7a0b\uff0c\u8fd8\u53ef\u4ee5\u7528\u4f5c\u53c2\u8003\u548c\u67e5\u8be2\u51fd\u6570\u3002 https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets \uff1aSKLEARN\u7684API\u67e5\u8be2\u7f51\u7ad9\u3002 https://vllbc.top/ \uff1a\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u3002","title":"\u5176\u5b83\u6709\u8da3\u7684\u7f51\u7ad9\u63a8\u8350"},{"location":"others/regex/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f [abcd] \u5339\u914d\u4e2d\u62ec\u53f7\u91cc\u7684\u6240\u6709\u5b57\u7b26 [^abcd] \u5339\u914d\u9664\u4e86\u62ec\u53f7\u91cc\u7684\u6240\u6709\u5b57\u7b26 [A-Za-z] \u5339\u914d\u6240\u6709\u5b57\u6bcd [\\s\\S] \\s \u662f\u5339\u914d\u6240\u6709\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c\uff0c\\S \u975e\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c [\\w] \u5339\u914d\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3002\u7b49\u4ef7\u4e8e [A-Za-z0-9_] \u5339\u914d\u6709\u7279\u6b8a\u542b\u4e49\u7684\uff0c\u6bd4\u5982* ^ \u7b49 \u8bb0\u5f97\u8981\u52a0\u4e0a\u53cd\u659c\u6760\u8fdb\u884c\u8f6c\u4e49 \uff1f\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f0\u6b21\u62161\u6b21 .\u5339\u914d\u9664\\n\u5916\u7684\u4efb\u610f\u5b57\u7b26 +\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f1\u6b21\u6216\u591a\u6b21 *\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f0\u6b21\u6216\u591a\u6b21 {n}\u5339\u914dn\u6b21\uff0c{n,m}\u6700\u5c11\u5339\u914dn\u6b21\uff0c\u6700\u591am\u6b21\uff0c{n,}\u81f3\u5c11\u5339\u914dn\u6b21 \u5b9a\u4f4d\u7b26\uff1a^ $ \\b \\B \u5373\u9650\u5b9a\u5728\u54ea\u91cc\u5339\u914d \uff08\uff09\u7075\u6d3b\u5e94\u7528 [.]\u7b49\u4ef7\u4e8e\\. (^[0-9])+ //\u5339\u914d\u6709\u4e00\u81f3\u591a\u4e2a\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u7ec4\u5408 [^[0-9]]+ // \u5339\u914d\u6709\u4e00\u81f3\u591a\u4e2a\u4e0d\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u7ec4\u5408 \u5b9e\u6218\uff1a Matching a decimal numbers \u6765\u6e90: https://regexone.com/problem/matching_decimal_numbers Task Text **** Match 3.14529 Match -255.34 Match 128 Match 1.9e10 Match 123,340.00 Skip 720p \u610f\u601d\u5c31\u662f\u8981\u5339\u914dMatch\u7684\u8fd8\u8981\u907f\u5f00Skip\u7684 \u5177\u4f53\u5b9e\u73b0\uff1a ^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$ \u89e3\u91ca\uff1a \u200b ^\u5f00\u5934\u5339\u914d\u8d1f\u53f7\uff0c\u5176\u5b9e\u8fd9\u91cc\u53ef\u4ee5\u53d8\u6210^[\\-\\+]? \u4ee5\u9632\u51fa\u73b0\u6b63\u53f7 \u200b \u7136\u540e\u5339\u914d\u5e26\u9017\u53f7\u7684\u6570\u5b57\uff0c\u5339\u914d0\u6b21\u6216\u591a\u6b21 \u200b \u7136\u540e\u5339\u914d\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\uff0c\u5339\u914d0\u6b21\u62161\u6b21\uff0c\u56e0\u4e3a\u5c0f\u6570\u70b9\u6700\u591a\u51fa\u73b0\u4e00\u6b21 \u200b \u663e\u7136\u540e\u9762\u8ddf\u7740\u5339\u914d\u6307\u6570\uff0c\u663e\u7136\u6307\u6570\u4e5f\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002","title":"regex"},{"location":"others/regex/#_1","text":"[abcd] \u5339\u914d\u4e2d\u62ec\u53f7\u91cc\u7684\u6240\u6709\u5b57\u7b26 [^abcd] \u5339\u914d\u9664\u4e86\u62ec\u53f7\u91cc\u7684\u6240\u6709\u5b57\u7b26 [A-Za-z] \u5339\u914d\u6240\u6709\u5b57\u6bcd [\\s\\S] \\s \u662f\u5339\u914d\u6240\u6709\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c\uff0c\\S \u975e\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c [\\w] \u5339\u914d\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3002\u7b49\u4ef7\u4e8e [A-Za-z0-9_] \u5339\u914d\u6709\u7279\u6b8a\u542b\u4e49\u7684\uff0c\u6bd4\u5982* ^ \u7b49 \u8bb0\u5f97\u8981\u52a0\u4e0a\u53cd\u659c\u6760\u8fdb\u884c\u8f6c\u4e49 \uff1f\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f0\u6b21\u62161\u6b21 .\u5339\u914d\u9664\\n\u5916\u7684\u4efb\u610f\u5b57\u7b26 +\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f1\u6b21\u6216\u591a\u6b21 *\u5339\u914d\u524d\u9762\u7684\u8868\u8fbe\u5f0f0\u6b21\u6216\u591a\u6b21 {n}\u5339\u914dn\u6b21\uff0c{n,m}\u6700\u5c11\u5339\u914dn\u6b21\uff0c\u6700\u591am\u6b21\uff0c{n,}\u81f3\u5c11\u5339\u914dn\u6b21 \u5b9a\u4f4d\u7b26\uff1a^ $ \\b \\B \u5373\u9650\u5b9a\u5728\u54ea\u91cc\u5339\u914d \uff08\uff09\u7075\u6d3b\u5e94\u7528 [.]\u7b49\u4ef7\u4e8e\\. (^[0-9])+ //\u5339\u914d\u6709\u4e00\u81f3\u591a\u4e2a\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u7ec4\u5408 [^[0-9]]+ // \u5339\u914d\u6709\u4e00\u81f3\u591a\u4e2a\u4e0d\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u7ec4\u5408","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"others/regex/#_2","text":"","title":"\u5b9e\u6218\uff1a"},{"location":"others/regex/#matching-a-decimal-numbers","text":"\u6765\u6e90: https://regexone.com/problem/matching_decimal_numbers Task Text **** Match 3.14529 Match -255.34 Match 128 Match 1.9e10 Match 123,340.00 Skip 720p \u610f\u601d\u5c31\u662f\u8981\u5339\u914dMatch\u7684\u8fd8\u8981\u907f\u5f00Skip\u7684 \u5177\u4f53\u5b9e\u73b0\uff1a ^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$ \u89e3\u91ca\uff1a \u200b ^\u5f00\u5934\u5339\u914d\u8d1f\u53f7\uff0c\u5176\u5b9e\u8fd9\u91cc\u53ef\u4ee5\u53d8\u6210^[\\-\\+]? \u4ee5\u9632\u51fa\u73b0\u6b63\u53f7 \u200b \u7136\u540e\u5339\u914d\u5e26\u9017\u53f7\u7684\u6570\u5b57\uff0c\u5339\u914d0\u6b21\u6216\u591a\u6b21 \u200b \u7136\u540e\u5339\u914d\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\uff0c\u5339\u914d0\u6b21\u62161\u6b21\uff0c\u56e0\u4e3a\u5c0f\u6570\u70b9\u6700\u591a\u51fa\u73b0\u4e00\u6b21 \u200b \u663e\u7136\u540e\u9762\u8ddf\u7740\u5339\u914d\u6307\u6570\uff0c\u663e\u7136\u6307\u6570\u4e5f\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002","title":"Matching a decimal numbers"},{"location":"others/restructure/","text":"\u4ee3\u7801\u91cd\u6784\u5fc3\u5f97 \u4eca\u5929\u91cd\u6784\u4e86\u6211\u7684qqbot\u4ee3\u7801\uff0c\u6709\u4e00\u4e9b\u5fc3\u5f97\u6765\u5206\u4eab\u3002 \u4e00\u5f00\u59cb\u67b6\u6784\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u5230\u5e95\uff0c\u6240\u6709\u7684\u529f\u80fd\u90fd\u5b9e\u73b0\u5728\u8fd9\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762 \u9646\u9646\u7eed\u7eed\u5199\u4e86\u4e5f\u6709400\u884c\u5de6\u53f3\uff0c\u90fd\u662f\u4e9b\u7b80\u5355\u7684\u529f\u80fd\uff0c\u7136\u540e\u4eca\u5929\u60f3\u7740\u91cd\u6784\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u540e\u671f\u66f4\u597d\u7684\u7ef4\u62a4\u3002 \u91cd\u6784\u540e\u591a\u51fa\u6765\u4e86\u4e09\u4e2a\u6587\u4ef6\u5939\uff1aApplication,core,data Application\u8d1f\u8d23\u5b9e\u73b0\u5404\u79cd\u529f\u80fd\uff0c\u6bd4\u5982\u8bf4\u7ffb\u8bd1\uff0c\u5929\u6c14\u9884\u62a5\uff0c\u62bd\u5956\u7b49 core\u662f\u6838\u5fc3\u529f\u80fd\uff0c\u8d1f\u8d23\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u63d2\u4ef6\u7684\u5bfc\u5165 data\u662f\u6570\u636e\uff0c\u4fdd\u5b58\u91d1\u5e01\u6216\u8005\u56fe\u7247\u3002 \u5b66\u5230\u7684\u4e1c\u897f: @staticmethod\u88c5\u9970\u5668 \u53ef\u4ee5\u4e0d\u5b9e\u4f8b\u5316\u7c7b\u8c03\u7528\u5176\u65b9\u6cd5\uff0c\u7528\u6765\u8fd4\u56deapp\u5bf9\u8c61\u548c\u76d1\u542c\u5668 \u4e00\u4e9b\u6a21\u5757\u5bfc\u5165\u7684\u64cd\u4f5c \u4e3a\u4ee5\u540e\u81ea\u5df1\u5199\u6a21\u5757\u505a\u4e86\u51c6\u5907","title":"\u91cd\u6784\u6709\u611f"},{"location":"others/restructure/#_1","text":"\u4eca\u5929\u91cd\u6784\u4e86\u6211\u7684qqbot\u4ee3\u7801\uff0c\u6709\u4e00\u4e9b\u5fc3\u5f97\u6765\u5206\u4eab\u3002 \u4e00\u5f00\u59cb\u67b6\u6784\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u5230\u5e95\uff0c\u6240\u6709\u7684\u529f\u80fd\u90fd\u5b9e\u73b0\u5728\u8fd9\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762 \u9646\u9646\u7eed\u7eed\u5199\u4e86\u4e5f\u6709400\u884c\u5de6\u53f3\uff0c\u90fd\u662f\u4e9b\u7b80\u5355\u7684\u529f\u80fd\uff0c\u7136\u540e\u4eca\u5929\u60f3\u7740\u91cd\u6784\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u540e\u671f\u66f4\u597d\u7684\u7ef4\u62a4\u3002 \u91cd\u6784\u540e\u591a\u51fa\u6765\u4e86\u4e09\u4e2a\u6587\u4ef6\u5939\uff1aApplication,core,data Application\u8d1f\u8d23\u5b9e\u73b0\u5404\u79cd\u529f\u80fd\uff0c\u6bd4\u5982\u8bf4\u7ffb\u8bd1\uff0c\u5929\u6c14\u9884\u62a5\uff0c\u62bd\u5956\u7b49 core\u662f\u6838\u5fc3\u529f\u80fd\uff0c\u8d1f\u8d23\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u63d2\u4ef6\u7684\u5bfc\u5165 data\u662f\u6570\u636e\uff0c\u4fdd\u5b58\u91d1\u5e01\u6216\u8005\u56fe\u7247\u3002 \u5b66\u5230\u7684\u4e1c\u897f: @staticmethod\u88c5\u9970\u5668 \u53ef\u4ee5\u4e0d\u5b9e\u4f8b\u5316\u7c7b\u8c03\u7528\u5176\u65b9\u6cd5\uff0c\u7528\u6765\u8fd4\u56deapp\u5bf9\u8c61\u548c\u76d1\u542c\u5668 \u4e00\u4e9b\u6a21\u5757\u5bfc\u5165\u7684\u64cd\u4f5c \u4e3a\u4ee5\u540e\u81ea\u5df1\u5199\u6a21\u5757\u505a\u4e86\u51c6\u5907","title":"\u4ee3\u7801\u91cd\u6784\u5fc3\u5f97"},{"location":"others/sql/","text":"sql\u5b66\u4e60 \u8fde\u63a5\u6570\u636e\u5e93 mysql -u root -p \u8f93\u5165\u5bc6\u7801\u5373\u53ef \u663e\u793a\u6240\u6709\u7684\u6570\u636e\u5e93 show databases; use databasename \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 CREATE DATABASE xxx; \u521b\u5efa\u6570\u636e\u5e93 drop database xxx; \u5220\u9664\u6570\u636e\u5e93 show tables; \u663e\u793a\u8fd9\u4e2a\u6570\u636e\u5e93\u4e0b\u7684\u6240\u6709\u6570\u636e\u8868 CREATE TABLE 'xxx' ( \u200b 'columns' type, \u200b ..... ); DROP TABLE xxx; INSERT INTO xxx (columns,....) VALUES (values,....); SELECT * from tablename;\u9009\u62e9\u6570\u636e\u8868\u4e2d\u6240\u6709\u6570\u636e\uff0c\u5177\u4f53\u67e5\u8be2\u65b9\u6cd5\u4ee5\u540e\u5199 DELETE from tablename;\u5220\u9664\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u52a0where\u9650\u5236\u6761\u4ef6 UPDATE table SET ...... where .......; CASE WHEN ... THEN ... ELSE ... END; SQL JOIN \u5b50\u53e5\u7528\u4e8e\u628a\u6765\u81ea\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u7684\u884c\u7ed3\u5408\u8d77\u6765\uff0c\u57fa\u4e8e\u8fd9\u4e9b\u8868\u4e4b\u95f4\u7684\u5171\u540c\u5b57\u6bb5\u3002\u5206\u4e3a\u5185\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u8fde\u63a5\uff0c\u53f3\u8fde\u63a5 ORDER BY\u67e5\u8be2\u7684\u65f6\u5019\u7528\u6765\u6392\u5e8f ASC\u5347\u5e8f,DESC\u4e3a\u964d\u5e8f. WHERE\u7684\u4e00\u4e9b\u7528\u6cd5: where xx in ('','')\u7c7b\u4f3c\u4e8epython\u7684in where xxx BETWEEN a AND b \u4ecea\u5230b like \u7684\u4e00\u4e9b\u7528\u6cd5\uff1a like '%x' %\u5339\u914d\u4efb\u610f\u591a\u7684\u5b57\u7b26 like '_x%' _\u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 concat() \u8fde\u63a5\u5b57\u7b26\u51fd\u6570 REPLACE(a,b,c)\u5c06a\u4e2d\u7684b\u66ff\u6362\u4e3ac limit y \u5206\u53e5\u8868\u793a: \u8bfb\u53d6 y \u6761\u6570\u636e limit x, y \u5206\u53e5\u8868\u793a: \u8df3\u8fc7 x \u6761\u6570\u636e\uff0c\u8bfb\u53d6 y \u6761\u6570\u636e limit y offset x \u5206\u53e5\u8868\u793a: \u8df3\u8fc7 x \u6761\u6570\u636e\uff0c\u8bfb\u53d6 y \u6761\u6570\u636e SELECT distinct \u53bb\u91cd\u67e5\u8be2 \u4e5f\u53ef\u4ee5\u7528\u5728\u4e00\u4e9b\u805a\u5408\u51fd\u6570\u91cc GROUP BY \u5206\u7ec4 HAVING \u89e3\u51b3WHERE \u65e0\u6cd5\u548c\u805a\u5408\u51fd\u6570\u4e00\u8d77\u7528 \u9644\uff1a sql\u5404\u8fde\u63a5","title":"sql"},{"location":"others/sql/#sql","text":"\u8fde\u63a5\u6570\u636e\u5e93 mysql -u root -p \u8f93\u5165\u5bc6\u7801\u5373\u53ef \u663e\u793a\u6240\u6709\u7684\u6570\u636e\u5e93 show databases; use databasename \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 CREATE DATABASE xxx; \u521b\u5efa\u6570\u636e\u5e93 drop database xxx; \u5220\u9664\u6570\u636e\u5e93 show tables; \u663e\u793a\u8fd9\u4e2a\u6570\u636e\u5e93\u4e0b\u7684\u6240\u6709\u6570\u636e\u8868 CREATE TABLE 'xxx' ( \u200b 'columns' type, \u200b ..... ); DROP TABLE xxx; INSERT INTO xxx (columns,....) VALUES (values,....); SELECT * from tablename;\u9009\u62e9\u6570\u636e\u8868\u4e2d\u6240\u6709\u6570\u636e\uff0c\u5177\u4f53\u67e5\u8be2\u65b9\u6cd5\u4ee5\u540e\u5199 DELETE from tablename;\u5220\u9664\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u52a0where\u9650\u5236\u6761\u4ef6 UPDATE table SET ...... where .......; CASE WHEN ... THEN ... ELSE ... END; SQL JOIN \u5b50\u53e5\u7528\u4e8e\u628a\u6765\u81ea\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u7684\u884c\u7ed3\u5408\u8d77\u6765\uff0c\u57fa\u4e8e\u8fd9\u4e9b\u8868\u4e4b\u95f4\u7684\u5171\u540c\u5b57\u6bb5\u3002\u5206\u4e3a\u5185\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u8fde\u63a5\uff0c\u53f3\u8fde\u63a5 ORDER BY\u67e5\u8be2\u7684\u65f6\u5019\u7528\u6765\u6392\u5e8f ASC\u5347\u5e8f,DESC\u4e3a\u964d\u5e8f. WHERE\u7684\u4e00\u4e9b\u7528\u6cd5: where xx in ('','')\u7c7b\u4f3c\u4e8epython\u7684in where xxx BETWEEN a AND b \u4ecea\u5230b like \u7684\u4e00\u4e9b\u7528\u6cd5\uff1a like '%x' %\u5339\u914d\u4efb\u610f\u591a\u7684\u5b57\u7b26 like '_x%' _\u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 concat() \u8fde\u63a5\u5b57\u7b26\u51fd\u6570 REPLACE(a,b,c)\u5c06a\u4e2d\u7684b\u66ff\u6362\u4e3ac limit y \u5206\u53e5\u8868\u793a: \u8bfb\u53d6 y \u6761\u6570\u636e limit x, y \u5206\u53e5\u8868\u793a: \u8df3\u8fc7 x \u6761\u6570\u636e\uff0c\u8bfb\u53d6 y \u6761\u6570\u636e limit y offset x \u5206\u53e5\u8868\u793a: \u8df3\u8fc7 x \u6761\u6570\u636e\uff0c\u8bfb\u53d6 y \u6761\u6570\u636e SELECT distinct \u53bb\u91cd\u67e5\u8be2 \u4e5f\u53ef\u4ee5\u7528\u5728\u4e00\u4e9b\u805a\u5408\u51fd\u6570\u91cc GROUP BY \u5206\u7ec4 HAVING \u89e3\u51b3WHERE \u65e0\u6cd5\u548c\u805a\u5408\u51fd\u6570\u4e00\u8d77\u7528 \u9644\uff1a sql\u5404\u8fde\u63a5","title":"sql\u5b66\u4e60"},{"location":"others/vim/","text":"vim\u7b14\u8bb0 hjkl \u5206\u522b\u5bf9\u5e94\u5de6\u4e0b\u4e0a\u53f3 J\u5408\u5e76\u4e24\u884c esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\uff0cioaIOA\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c:\u8fdb\u5165\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f I\u5230\u884c\u9996\u63d2\u5165,A\u5230\u884c\u672b\u63d2\u5165\uff0co\u4e0b\u4e00\u884c\u63d2\u5165\uff0cO\u4e0a\u4e00\u884c\u63d2\u5165 w(W)\u8df3\u5230\u4e0b\u4e2a\u5355\u8bcd\uff0cb(B)\u8df3\u5230\u4e0a\u4e2a\u5355\u8bcd\uff0ce(B)\u8df3\u5230\u5355\u8bcd\u672b ^\u8df3\u5230\u884c\u9996,$\u8df3\u5230\u884c\u5c3e \u4e0d\u8fc7\u7531\u4e8e\u6548\u7387 \u4e00\u822c\u9009\u62e9I \u6216\u8005 A + ESC G\u8df3\u5230\u6587\u4ef6\u5c3e\uff0cgg\u8df3\u5230\u6587\u4ef6\u9996 dd\u5220\u9664\u5f53\u524d\u884c\uff0c\u5220\u9664\u7684\u884c\u5728\u526a\u5207\u677f\u91cc yy\u590d\u5236\u5f53\u524d\u884c u\u64a4\u9500\u4e0a\u4e00\u4e2a\u547d\u4ee4 .\u91cd\u590d\u4e0a\u4e00\u4e2a\u547d\u4ee4 p P\u7c98\u8d34 x\u5220\u9664\u5f53\u524d\u5b57\u7b26 v\u53ef\u4ee5\u4e00\u70b9\u4e00\u70b9\u9009\u4e2d\uff0cV\u53ef\u4ee5\u4e00\u884c\u4e00\u884c\u9009\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u64cd\u4f5c \u60f3\u5220\u9664\u6574\u7bc7\u6587\u7ae0\uff0c\u5148gg\u79fb\u5230\u6587\u7ae0\u9996,\u7136\u540edG\u5220\u9664\u6574\u7bc7 xxG\u79fb\u5230xx\u884c r\u66ff\u6362\u5b57\u7b26,R\u66ff\u6362\u6a21\u5f0f c C\u4fee\u6539 f \u67e5\u627e F\u5411\u524d\u67e5\u627e t\u5411\u540e\u67e5\u627e\uff0c\u5149\u6807\u5230\u67e5\u627e\u7684\u524d\u9762\uff0cT\u5411\u524d\u67e5\u627e \u6ce8\u610f\u8fd9\u4e9b\u90fd\u662f\u884c\u5185\u641c\u7d22 / \u5411\u4e0b\u641c\u7d22 ?\u5411\u4e0a\u641c\u7d22 n\u67e5\u627e\u4e0b\u4e00\u5904\uff0cN\u67e5\u627e\u4e0a\u4e00\u5904 ;\u91cd\u590d\u4e0a\u6b21 f,t,F,T\u67e5\u627e\u547d\u4ee4\uff0c .\u91cd\u590d\u4e0a\u6b21\u975e\u79fb\u52a8\u547d\u4ee4 H M L \u5206\u522b\u4e3a\u5149\u6807\u79fb\u52a8\u5230 \u53ef\u89c6\u533a\u57df\u7684\u6700\u4e0a\u9762 \u6700\u4e2d\u95f4\u548c\u6700\u4e0b\u9762 % \u79fb\u52a8\u5230\u4e0e\u5f53\u524d\u62ec\u53f7\u5339\u914d\u5904 cw \uff1a change word \u53ef\u4ee5\u5220\u9664\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u8fd9\u79cd\u64cd\u4f5c\u5e38\u7528\u4e8e\u4fee\u6539\u4e00\u4e2a\u53d8\u91cf\u3002\u6bd4\u5982\u5bf9\u4e8e\uff1a int count=0; \u5e0c\u671b\u628a count \u6539\u6210 cnt \uff0c\u90a3\u4e48\u5f53\u5149\u6807\u4f4d\u4e8e c \u5b57\u7b26\u5904\u7684\u65f6\u5019\uff0c\u6309 cw \u53ef\u76f4\u63a5\u5220\u9664 count \uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u7136\u540e\u76f4\u63a5\u7ee7\u7eed\u8f93\u5165 cnt \u5373\u53ef\u3002 caw \uff1a change a word \u53ef\u4ee5\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u5355\u8bcd\u3002\u5bf9\u4e8e int count=0; \u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6b64\u65f6\u5149\u6807\u5728 count \u4e2d\u95f4\u67d0\u5904\uff0c\u6bd4\u5982 u \u5904\uff0c\u76f4\u63a5\u952e\u5165 caw \u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002\u6240\u4ee5 caw \u66f4\u5f3a\u5927\u4e00\u4e9b\u3002 ciw \u4e0e\u4e0a\u540c\u7406 \u5982\u679c\u5220\u9664\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\uff0c\u5149\u6807\u5728\u62ec\u53f7\u91cc\u9762\u7136\u540e ci( \u5220\u9664\u62ec\u53f7\u91cc\u9762\u7684\u5185\u5bb9\u4f46\u4e0d\u5305\u62ec\u62ec\u53f7\u672c\u8eab\uff0c ca( \u5305\u62ec\u62ec\u53f7\u672c\u8eab \u8fd9\u79cd\u64cd\u4f5c\u5f88\u5bb9\u6613\u63a8\u5e7f \u53ef\u4ee5 diw daw ghiw gHiw (gh \u8f6c\u6362\u6210\u5c0f\u5199\uff0cgH\u8f6c\u6362\u6210\u5927\u5199) \u5728 10 - 20 \u884c\u6dfb\u52a0 # \u6ce8\u91ca :10,20s/^/#/g \u5728 10 - 20 \u884c\u5220\u9664 # \u6ce8\u91ca :10,20s/#//g","title":"vim"},{"location":"others/vim/#vim","text":"hjkl \u5206\u522b\u5bf9\u5e94\u5de6\u4e0b\u4e0a\u53f3 J\u5408\u5e76\u4e24\u884c esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\uff0cioaIOA\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c:\u8fdb\u5165\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f I\u5230\u884c\u9996\u63d2\u5165,A\u5230\u884c\u672b\u63d2\u5165\uff0co\u4e0b\u4e00\u884c\u63d2\u5165\uff0cO\u4e0a\u4e00\u884c\u63d2\u5165 w(W)\u8df3\u5230\u4e0b\u4e2a\u5355\u8bcd\uff0cb(B)\u8df3\u5230\u4e0a\u4e2a\u5355\u8bcd\uff0ce(B)\u8df3\u5230\u5355\u8bcd\u672b ^\u8df3\u5230\u884c\u9996,$\u8df3\u5230\u884c\u5c3e \u4e0d\u8fc7\u7531\u4e8e\u6548\u7387 \u4e00\u822c\u9009\u62e9I \u6216\u8005 A + ESC G\u8df3\u5230\u6587\u4ef6\u5c3e\uff0cgg\u8df3\u5230\u6587\u4ef6\u9996 dd\u5220\u9664\u5f53\u524d\u884c\uff0c\u5220\u9664\u7684\u884c\u5728\u526a\u5207\u677f\u91cc yy\u590d\u5236\u5f53\u524d\u884c u\u64a4\u9500\u4e0a\u4e00\u4e2a\u547d\u4ee4 .\u91cd\u590d\u4e0a\u4e00\u4e2a\u547d\u4ee4 p P\u7c98\u8d34 x\u5220\u9664\u5f53\u524d\u5b57\u7b26 v\u53ef\u4ee5\u4e00\u70b9\u4e00\u70b9\u9009\u4e2d\uff0cV\u53ef\u4ee5\u4e00\u884c\u4e00\u884c\u9009\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u64cd\u4f5c \u60f3\u5220\u9664\u6574\u7bc7\u6587\u7ae0\uff0c\u5148gg\u79fb\u5230\u6587\u7ae0\u9996,\u7136\u540edG\u5220\u9664\u6574\u7bc7 xxG\u79fb\u5230xx\u884c r\u66ff\u6362\u5b57\u7b26,R\u66ff\u6362\u6a21\u5f0f c C\u4fee\u6539 f \u67e5\u627e F\u5411\u524d\u67e5\u627e t\u5411\u540e\u67e5\u627e\uff0c\u5149\u6807\u5230\u67e5\u627e\u7684\u524d\u9762\uff0cT\u5411\u524d\u67e5\u627e \u6ce8\u610f\u8fd9\u4e9b\u90fd\u662f\u884c\u5185\u641c\u7d22 / \u5411\u4e0b\u641c\u7d22 ?\u5411\u4e0a\u641c\u7d22 n\u67e5\u627e\u4e0b\u4e00\u5904\uff0cN\u67e5\u627e\u4e0a\u4e00\u5904 ;\u91cd\u590d\u4e0a\u6b21 f,t,F,T\u67e5\u627e\u547d\u4ee4\uff0c .\u91cd\u590d\u4e0a\u6b21\u975e\u79fb\u52a8\u547d\u4ee4 H M L \u5206\u522b\u4e3a\u5149\u6807\u79fb\u52a8\u5230 \u53ef\u89c6\u533a\u57df\u7684\u6700\u4e0a\u9762 \u6700\u4e2d\u95f4\u548c\u6700\u4e0b\u9762 % \u79fb\u52a8\u5230\u4e0e\u5f53\u524d\u62ec\u53f7\u5339\u914d\u5904 cw \uff1a change word \u53ef\u4ee5\u5220\u9664\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u8fd9\u79cd\u64cd\u4f5c\u5e38\u7528\u4e8e\u4fee\u6539\u4e00\u4e2a\u53d8\u91cf\u3002\u6bd4\u5982\u5bf9\u4e8e\uff1a int count=0; \u5e0c\u671b\u628a count \u6539\u6210 cnt \uff0c\u90a3\u4e48\u5f53\u5149\u6807\u4f4d\u4e8e c \u5b57\u7b26\u5904\u7684\u65f6\u5019\uff0c\u6309 cw \u53ef\u76f4\u63a5\u5220\u9664 count \uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u7136\u540e\u76f4\u63a5\u7ee7\u7eed\u8f93\u5165 cnt \u5373\u53ef\u3002 caw \uff1a change a word \u53ef\u4ee5\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u5355\u8bcd\u3002\u5bf9\u4e8e int count=0; \u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6b64\u65f6\u5149\u6807\u5728 count \u4e2d\u95f4\u67d0\u5904\uff0c\u6bd4\u5982 u \u5904\uff0c\u76f4\u63a5\u952e\u5165 caw \u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002\u6240\u4ee5 caw \u66f4\u5f3a\u5927\u4e00\u4e9b\u3002 ciw \u4e0e\u4e0a\u540c\u7406 \u5982\u679c\u5220\u9664\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\uff0c\u5149\u6807\u5728\u62ec\u53f7\u91cc\u9762\u7136\u540e ci( \u5220\u9664\u62ec\u53f7\u91cc\u9762\u7684\u5185\u5bb9\u4f46\u4e0d\u5305\u62ec\u62ec\u53f7\u672c\u8eab\uff0c ca( \u5305\u62ec\u62ec\u53f7\u672c\u8eab \u8fd9\u79cd\u64cd\u4f5c\u5f88\u5bb9\u6613\u63a8\u5e7f \u53ef\u4ee5 diw daw ghiw gHiw (gh \u8f6c\u6362\u6210\u5c0f\u5199\uff0cgH\u8f6c\u6362\u6210\u5927\u5199) \u5728 10 - 20 \u884c\u6dfb\u52a0 # \u6ce8\u91ca :10,20s/^/#/g \u5728 10 - 20 \u884c\u5220\u9664 # \u6ce8\u91ca :10,20s/#//g","title":"vim\u7b14\u8bb0"},{"location":"others/vscode_c%2B%2B/","text":"vscode \u5bf9c++\u73af\u5883\u7684\u914d\u7f6e vscode \u662f\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u7684\u7f16\u8f91\u5668\uff0c\u6bd4\u8f83\u559c\u6b22\u4ed6\u7684\u8f7b\u91cf\u7ea7\uff0c\u4ee5\u53ca\u5404\u79cd\u5b9e\u7528\u63d2\u4ef6\u548c\u597d\u770b\u7684\u4e3b\u9898\uff0c\u4e0b\u9762\u6211\u4ecb\u7ecd\u600e\u4e48\u6837\u5728 vscode \u4e2d\u914d\u7f6ec++\u7684\u73af\u5883\u3002 \u9996\u5148\u5728\u4f60\u9700\u8981\u8fd0\u884cc++\u6587\u4ef6\u7684\u76ee\u5f55\u91cc\u9762\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a .vscode \uff0c vscode \u8fd0\u884c\u65f6\u4f1a\u626b\u63cf\u8fd9\u4e2a\u6587\u4ef6\u5939\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u83b7\u53d6\u4f60\u5df2\u7ecf\u5199\u597d\u7684\u914d\u7f6e\u3002 \u6211\u7684 .vscode \u6587\u4ef6\u5939\u4e0b\u67094\u4e2a\u914d\u7f6e\u6587\u4ef6 1. c_cpp_properties.json { \"configurations\": [ { \"name\": \"Win32\", \"includePath\": [ \"${workspaceFolder}/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\" ], \"compilerPath\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\gcc.exe\", \"cStandard\": \"gnu11\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"clang-x64\" } ], \"version\": 4 } 2. launch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"cpp start\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\gdb.exe\", \"setupCommands\": [ { \"description\": \"\u4e3a gdb \u542f\u7528\u6574\u9f50\u6253\u5370\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ], \"preLaunchTask\": \"C/C++: g++.exe build active file\" } ] } 3. settings.json { \"files.associations\": { \"ostream\": \"cpp\", \"*.tcc\": \"cpp\", \"iostream\": \"cpp\", \"cctype\": \"cpp\", \"clocale\": \"cpp\", \"cmath\": \"cpp\", \"cstdarg\": \"cpp\", \"cstdint\": \"cpp\", \"cstdio\": \"cpp\", \"cstdlib\": \"cpp\", \"cwchar\": \"cpp\", \"cwctype\": \"cpp\", \"exception\": \"cpp\", \"initializer_list\": \"cpp\", \"iosfwd\": \"cpp\", \"istream\": \"cpp\", \"limits\": \"cpp\", \"new\": \"cpp\", \"streambuf\": \"cpp\", \"type_traits\": \"cpp\", \"typeinfo\": \"cpp\", \"array\": \"cpp\", \"cstring\": \"cpp\", \"deque\": \"cpp\", \"unordered_map\": \"cpp\", \"vector\": \"cpp\", \"fstream\": \"cpp\", \"functional\": \"cpp\", \"numeric\": \"cpp\", \"sstream\": \"cpp\", \"stdexcept\": \"cpp\", \"tuple\": \"cpp\", \"utility\": \"cpp\", \"random\": \"cpp\", \"algorithm\": \"cpp\" } } 4. tasks.json { \"tasks\": [ { \"type\": \"shell\", \"label\": \"C/C++: g++.exe build active file\", \"command\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\g++.exe\", \"args\": [ \"-g\", \"${file}\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\": { \"cwd\": \"${workspaceFolder}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true } } ], \"version\": \"2.0.0\" } \u5c06\u5bf9\u5e94\u7684 g++.exe gdb.exe gcc.exe \u6362\u6210\u81ea\u5df1\u6240\u5728\u7684\u8def\u5f84\u5373\u53ef\uff0c\u8fd9\u6837\u4f60\u6253\u5f00\u5de6\u4fa7\u7684\u8fd0\u884c\u5c31\u4f1a\u53d1\u73b0\u6709\u4e2a cpp start \u8fd0\u884c\u73af\u5883\uff0c\u8fd9\u5c31\u662f\u521a\u521a\u914d\u7f6e\u7684\uff0c\u5f53\u7136\u8fd9\u4e2a\u540d\u5b57\u662f\u53ef\u6539\u7684\u3002 \u6709\u65f6\u5019\u53d1\u73b0\u4f60\u60f3\u8fd0\u884c\u4ee3\u7801\u7684\u65f6\u5019\u914d\u7f6e\u4e0d\u89c1\u4e86\uff0c\u8fd9\u662f\u56e0\u4e3a\u4f60\u6ca1\u6709\u6253\u5f00\u6574\u4e2a\u6587\u4ef6\u5939\uff0c\u8981\u9009\u62e9\u5de5\u4f5c\u6587\u4ef6\u5939\u7136\u540e\u53f3\u952e\u7528 vscode \u6253\u5f00\uff0c\u8fd9\u6837\u914d\u7f6e\u6587\u4ef6\u5939\u624d\u4f1a\u8ddf\u7740\u4e00\u8d77\u8f7d\u5165\uff0c\u5426\u5219\u5e76\u4e0d\u4f1a\u4e00\u8d77\u52a0\u8f7d\u7684\u3002","title":"vscode\u914d\u7f6ecpp"},{"location":"others/vscode_c%2B%2B/#vscodec","text":"vscode \u662f\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u7684\u7f16\u8f91\u5668\uff0c\u6bd4\u8f83\u559c\u6b22\u4ed6\u7684\u8f7b\u91cf\u7ea7\uff0c\u4ee5\u53ca\u5404\u79cd\u5b9e\u7528\u63d2\u4ef6\u548c\u597d\u770b\u7684\u4e3b\u9898\uff0c\u4e0b\u9762\u6211\u4ecb\u7ecd\u600e\u4e48\u6837\u5728 vscode \u4e2d\u914d\u7f6ec++\u7684\u73af\u5883\u3002 \u9996\u5148\u5728\u4f60\u9700\u8981\u8fd0\u884cc++\u6587\u4ef6\u7684\u76ee\u5f55\u91cc\u9762\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a .vscode \uff0c vscode \u8fd0\u884c\u65f6\u4f1a\u626b\u63cf\u8fd9\u4e2a\u6587\u4ef6\u5939\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u83b7\u53d6\u4f60\u5df2\u7ecf\u5199\u597d\u7684\u914d\u7f6e\u3002 \u6211\u7684 .vscode \u6587\u4ef6\u5939\u4e0b\u67094\u4e2a\u914d\u7f6e\u6587\u4ef6 1. c_cpp_properties.json { \"configurations\": [ { \"name\": \"Win32\", \"includePath\": [ \"${workspaceFolder}/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\" ], \"compilerPath\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\gcc.exe\", \"cStandard\": \"gnu11\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"clang-x64\" } ], \"version\": 4 } 2. launch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"cpp start\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\gdb.exe\", \"setupCommands\": [ { \"description\": \"\u4e3a gdb \u542f\u7528\u6574\u9f50\u6253\u5370\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ], \"preLaunchTask\": \"C/C++: g++.exe build active file\" } ] } 3. settings.json { \"files.associations\": { \"ostream\": \"cpp\", \"*.tcc\": \"cpp\", \"iostream\": \"cpp\", \"cctype\": \"cpp\", \"clocale\": \"cpp\", \"cmath\": \"cpp\", \"cstdarg\": \"cpp\", \"cstdint\": \"cpp\", \"cstdio\": \"cpp\", \"cstdlib\": \"cpp\", \"cwchar\": \"cpp\", \"cwctype\": \"cpp\", \"exception\": \"cpp\", \"initializer_list\": \"cpp\", \"iosfwd\": \"cpp\", \"istream\": \"cpp\", \"limits\": \"cpp\", \"new\": \"cpp\", \"streambuf\": \"cpp\", \"type_traits\": \"cpp\", \"typeinfo\": \"cpp\", \"array\": \"cpp\", \"cstring\": \"cpp\", \"deque\": \"cpp\", \"unordered_map\": \"cpp\", \"vector\": \"cpp\", \"fstream\": \"cpp\", \"functional\": \"cpp\", \"numeric\": \"cpp\", \"sstream\": \"cpp\", \"stdexcept\": \"cpp\", \"tuple\": \"cpp\", \"utility\": \"cpp\", \"random\": \"cpp\", \"algorithm\": \"cpp\" } } 4. tasks.json { \"tasks\": [ { \"type\": \"shell\", \"label\": \"C/C++: g++.exe build active file\", \"command\": \"D:\\\\Dev-Cpp\\\\MinGW64\\\\bin\\\\g++.exe\", \"args\": [ \"-g\", \"${file}\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\": { \"cwd\": \"${workspaceFolder}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true } } ], \"version\": \"2.0.0\" } \u5c06\u5bf9\u5e94\u7684 g++.exe gdb.exe gcc.exe \u6362\u6210\u81ea\u5df1\u6240\u5728\u7684\u8def\u5f84\u5373\u53ef\uff0c\u8fd9\u6837\u4f60\u6253\u5f00\u5de6\u4fa7\u7684\u8fd0\u884c\u5c31\u4f1a\u53d1\u73b0\u6709\u4e2a cpp start \u8fd0\u884c\u73af\u5883\uff0c\u8fd9\u5c31\u662f\u521a\u521a\u914d\u7f6e\u7684\uff0c\u5f53\u7136\u8fd9\u4e2a\u540d\u5b57\u662f\u53ef\u6539\u7684\u3002 \u6709\u65f6\u5019\u53d1\u73b0\u4f60\u60f3\u8fd0\u884c\u4ee3\u7801\u7684\u65f6\u5019\u914d\u7f6e\u4e0d\u89c1\u4e86\uff0c\u8fd9\u662f\u56e0\u4e3a\u4f60\u6ca1\u6709\u6253\u5f00\u6574\u4e2a\u6587\u4ef6\u5939\uff0c\u8981\u9009\u62e9\u5de5\u4f5c\u6587\u4ef6\u5939\u7136\u540e\u53f3\u952e\u7528 vscode \u6253\u5f00\uff0c\u8fd9\u6837\u914d\u7f6e\u6587\u4ef6\u5939\u624d\u4f1a\u8ddf\u7740\u4e00\u8d77\u8f7d\u5165\uff0c\u5426\u5219\u5e76\u4e0d\u4f1a\u4e00\u8d77\u52a0\u8f7d\u7684\u3002","title":"vscode\u5bf9c++\u73af\u5883\u7684\u914d\u7f6e"},{"location":"pandas/","text":"Pandas\u5b66\u4e60 Pandas\u662f\u6570\u636e\u79d1\u5b66\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\uff0c\u4e5f\u662f\u673a\u5668\u5b66\u4e60\u91cc\u5904\u7406\u6570\u636e\u7684\u5229\u5668\u3002 \u5b66\u597dpandas\u975e\u5e38\u91cd\u8981\uff01","title":"\u4ecb\u7ecd"},{"location":"pandas/#pandas","text":"Pandas\u662f\u6570\u636e\u79d1\u5b66\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\uff0c\u4e5f\u662f\u673a\u5668\u5b66\u4e60\u91cc\u5904\u7406\u6570\u636e\u7684\u5229\u5668\u3002 \u5b66\u597dpandas\u975e\u5e38\u91cd\u8981\uff01","title":"Pandas\u5b66\u4e60"},{"location":"pandas/learn_one/","text":"\u5bfc\u5165\u5e93 import pandas as pd import numpy as np \u4e00\u7ef4\u6570\u7ec4 arr = [0, 1, 2, 3, 4] s1 = pd.Series(arr) # \u5982\u679c\u4e0d\u6307\u5b9a\u7d22\u5f15\uff0c\u5219\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb s1 0 0 1 1 2 2 3 3 4 4 dtype: int64 n = np.random.randn(5) # \u521b\u5efa\u4e00\u4e2a\u968f\u673a Ndarray \u6570\u7ec4 index = ['a', 'b', 'c', 'd', 'e'] s2 = pd.Series(n, index=index) s2 a 0.647546 b 0.197186 c 0.590904 d -0.422565 e -0.122490 dtype: float64 \u7528\u5b57\u5178\u521b\u5efa\u4e00\u7ef4\u6570\u7ec4 d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} # \u5b9a\u4e49\u793a\u4f8b\u5b57\u5178 s3 = pd.Series(d) s3 a 1 b 2 c 3 d 4 e 5 dtype: int64 Series \u57fa\u672c\u64cd\u4f5c print(s1) # \u4ee5 s1 \u4e3a\u4f8b s1.index = ['A', 'B', 'C', 'D', 'E'] # \u4fee\u6539\u540e\u7684\u7d22\u5f15 s1 0 0 1 1 2 2 3 3 4 4 dtype: int64 A 0 B 1 C 2 D 3 E 4 dtype: int64 s4 = s3.append(s1) # \u5c06 s1 \u62fc\u63a5\u5230 s3 s4 a 1 b 2 c 3 d 4 e 5 A 0 B 1 C 2 D 3 E 4 dtype: int64 print(s4) s4 = s4.drop('e') # \u5220\u9664\u7d22\u5f15\u4e3a e \u7684\u503c s4 a 1 b 2 c 3 d 4 e 5 A 0 B 1 C 2 D 3 E 4 dtype: int64 a 1 b 2 c 3 d 4 A 0 B 1 C 2 D 3 E 4 dtype: int64 s4['A'] = 6 # \u4fee\u6539\u7d22\u5f15\u4e3a A \u7684\u503c = 6 s4 a 1 b 2 c 3 d 4 A 6 B 1 C 2 D 3 E 4 dtype: int64 s4.add(s3)#\u5982\u679c\u7d22\u5f15\u4e0d\u540c\u5219\u4e3aNAN sub\u4e3a\u51cf\uff0cmul\u4e3a\u4e58\uff0cdiv\u4e3a\u9664 A NaN B NaN C NaN D NaN E NaN a 2.0 b 4.0 c 6.0 d 8.0 e NaN dtype: float64 print(s4.median(),#\u4e2d\u4f4d\u6570 s4.sum(),#\u6c42\u548c s4.max(),#\u6c42\u6700\u5927\u503c s4.min())#\u6c42\u6700\u5c0f\u503c 3.0 26 6 1 DataFrame dates = pd.date_range('today', periods=6) # \u5b9a\u4e49\u65f6\u95f4\u5e8f\u5217\u4f5c\u4e3a index num_arr = np.random.randn(6, 4) # \u4f20\u5165 numpy \u968f\u673a\u6570\u7ec4 columns = ['A', 'B', 'C', 'D'] # \u5c06\u5217\u8868\u4f5c\u4e3a\u5217\u540d df1 = pd.DataFrame(num_arr, index=dates, columns=columns) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-11-13 20:54:24.760775 -0.403545 0.643881 -1.697286 -0.616257 2020-11-14 20:54:24.760775 0.102470 1.451324 -0.269714 -0.316194 2020-11-15 20:54:24.760775 0.342680 -0.137238 -0.785406 -0.441022 2020-11-16 20:54:24.760775 0.130079 1.929569 -0.756832 -2.490272 2020-11-17 20:54:24.760775 1.774664 1.037605 0.275989 -0.982924 2020-11-18 20:54:24.760775 0.952462 1.666130 -0.920394 -1.358411 data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'], 'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3], 'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']} labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] df2 = pd.DataFrame(data, index=labels) df2#df2.head()\u67e5\u770b\u524d\u51e0\u884c df2.tail()\u67e5\u770b\u540e\u51e0\u884c .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a 2.5 cat yes 1 b 3.0 cat yes 3 c 0.5 snake no 2 d NaN dog yes 3 e 5.0 dog no 2 f 2.0 cat no 3 g 4.5 snake no 1 h NaN cat yes 1 i 7.0 dog no 2 j 3.0 dog no 1 df2.columns,df2.index,df2.values #\u67e5\u770b\u7d22\u5f15.\u5217\u540d\u548c\u503c (Index(['age', 'animal', 'priority', 'visits'], dtype='object'), Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], dtype='object'), array([[2.5, 'cat', 'yes', 1], [3.0, 'cat', 'yes', 3], [0.5, 'snake', 'no', 2], [nan, 'dog', 'yes', 3], [5.0, 'dog', 'no', 2], [2.0, 'cat', 'no', 3], [4.5, 'snake', 'no', 1], [nan, 'cat', 'yes', 1], [7.0, 'dog', 'no', 2], [3.0, 'dog', 'no', 1]], dtype=object)) df2.describe()#\u6570\u636e\u5904\u7406\u5e38\u7528 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age visits count 8.000000 10.000000 mean 3.437500 1.900000 std 2.007797 0.875595 min 0.500000 1.000000 25% 2.375000 1.000000 50% 3.000000 2.000000 75% 4.625000 2.750000 max 7.000000 3.000000 df2.T #\u9006 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e f g h i j age 2.5 3 0.5 NaN 5 2 4.5 NaN 7 3 animal cat cat snake dog dog cat snake cat dog dog priority yes yes no yes no no no yes no no visits 1 3 2 3 2 3 1 1 2 1 df2.sort_values(by='age') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits c 0.5 snake no 2 f 2.0 cat no 3 a 2.5 cat yes 1 b 3.0 cat yes 3 j 3.0 dog no 1 g 4.5 snake no 1 e 5.0 dog no 2 i 7.0 dog no 2 d NaN dog yes 3 h NaN cat yes 1 df2['age']#\u663e\u793aage\u5217 == df2.age a 2.5 b 3.0 c 0.5 d NaN e 5.0 f 2.0 g 4.5 h NaN i 7.0 j 3.0 Name: age, dtype: float64 df2[['age','animal']] #\u591a\u5217\u67e5\u8be2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal a 2.5 cat b 3.0 cat c 0.5 snake d NaN dog e 5.0 dog f 2.0 cat g 4.5 snake h NaN cat i 7.0 dog j 3.0 dog df2.iloc[1:3]#\u67e5\u8be22\uff0c3\u884c ==df2[1:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits b 3.0 cat yes 3 c 0.5 snake no 2 df3 = df2.copy()#\u62f7\u8d1d\u4e00\u4efd df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a 2.5 cat yes 1 b 3.0 cat yes 3 c 0.5 snake no 2 d NaN dog yes 3 e 5.0 dog no 2 f 2.0 cat no 3 g 4.5 snake no 1 h NaN cat yes 1 i 7.0 dog no 2 j 3.0 dog no 1 df3.isnull()#\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8fd4\u56deTrue .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a False False False False b False False False False c False False False False d True False False False e False False False False f False False False False g False False False False h True False False False i False False False False j False False False False num = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], index=df3.index)#\u5efa\u7acb\u6570\u636e\uff0c\u6ce8\u610f\u7d22\u5f15\u548cdf3\u4e00\u81f4 df3['No.'] = num # \u6dfb\u52a0\u4ee5 'No.' \u4e3a\u5217\u540d\u7684\u65b0\u6570\u636e\u5217 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 cat yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 2.0 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.iat[1,1] = 2 #\u6839\u636e\u7d22\u5f15\u6539\u53d8\u503c\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e86 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.loc['f', 'age'] = 1.5 #\u6839\u636e\u6807\u7b7e\u6765\u4fee\u6539 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.mean()#\u6c42\u5e73\u5747\u503c age 3.375 visits 1.900 No. 4.500 dtype: float64 df3['visits'].sum()#\u5bf9visits\u5217\u8fdb\u884c\u6c42\u548c 19 df4 = df3.copy() print(df4) df4.fillna(value=3)#\u5982\u679c\u662fNAN\u8865\u5145\u4e3a3 age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d 3.0 dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h 3.0 cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df5 = df3.copy() print(df5) df5.dropna(how='any') # \u4efb\u4f55\u5b58\u5728 NaN \u7684\u884c\u90fd\u5c06\u88ab\u5220\u9664 age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 i 7.0 dog no 2 8 j 3.0 dog no 1 9 left = pd.DataFrame({'key': ['foo1', 'foo2'], 'one': [1, 2]}) right = pd.DataFrame({'key': ['foo2', 'foo3'], 'two': [4, 5]}) print(left) print(right) # \u6309\u7167 key \u5217\u5bf9\u9f50\u8fde\u63a5\uff0c\u53ea\u5b58\u5728 foo2 \u76f8\u540c\uff0c\u6240\u4ee5\u6700\u540e\u53d8\u6210\u4e00\u884c pd.merge(left, right, on='key') key one 0 foo1 1 1 foo2 2 key two 0 foo2 4 1 foo3 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key one two 0 foo2 2 4 df3.to_csv('animal.csv') print(\"\u5199\u5165\u6210\u529f.\") \u5199\u5165\u6210\u529f. df_animal = pd.read_csv('animal.csv') df_animal .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 age animal priority visits No. 0 a 2.5 cat yes 1 0 1 b 3.0 2 yes 3 1 2 c 0.5 snake no 2 2 3 d NaN dog yes 3 3 4 e 5.0 dog no 2 4 5 f 1.5 cat no 3 5 6 g 4.5 snake no 1 6 7 h NaN cat yes 1 7 8 i 7.0 dog no 2 8 9 j 3.0 dog no 1 9 df3.to_excel('animal.xlsx', sheet_name='Sheet1') print(\"\u5199\u5165\u6210\u529f.\") \u5199\u5165\u6210\u529f. pd.read_excel('animal.xlsx', 'Sheet1', index_col=None, na_values=['NA']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 \u8fdb\u9636\u90e8\u5206 dti = pd.date_range(start='2018-01-01', end='2018-12-31', freq='D') s = pd.Series(np.random.rand(len(dti)), index=dti) s 2018-01-01 0.201676 2018-01-02 0.502547 2018-01-03 0.170739 2018-01-04 0.725599 2018-01-05 0.550199 2018-01-06 0.032421 2018-01-07 0.699385 2018-01-08 0.486797 2018-01-09 0.829427 2018-01-10 0.180882 2018-01-11 0.038766 2018-01-12 0.277279 2018-01-13 0.549932 2018-01-14 0.053058 2018-01-15 0.031786 2018-01-16 0.418983 2018-01-17 0.118010 2018-01-18 0.396846 2018-01-19 0.337507 2018-01-20 0.357052 2018-01-21 0.715088 2018-01-22 0.147573 2018-01-23 0.444479 2018-01-24 0.354306 2018-01-25 0.054420 2018-01-26 0.024047 2018-01-27 0.432698 2018-01-28 0.532165 2018-01-29 0.262547 2018-01-30 0.727870 ... 2018-12-02 0.855610 2018-12-03 0.682516 2018-12-04 0.991494 2018-12-05 0.935902 2018-12-06 0.893206 2018-12-07 0.884918 2018-12-08 0.285479 2018-12-09 0.317185 2018-12-10 0.449078 2018-12-11 0.266593 2018-12-12 0.432669 2018-12-13 0.065663 2018-12-14 0.524504 2018-12-15 0.164935 2018-12-16 0.347022 2018-12-17 0.127325 2018-12-18 0.406984 2018-12-19 0.698307 2018-12-20 0.135198 2018-12-21 0.153526 2018-12-22 0.312617 2018-12-23 0.965893 2018-12-24 0.957769 2018-12-25 0.449219 2018-12-26 0.037703 2018-12-27 0.640956 2018-12-28 0.434779 2018-12-29 0.750819 2018-12-30 0.471872 2018-12-31 0.566274 Freq: D, Length: 365, dtype: float64 # \u5468\u4e00\u4ece 0 \u5f00\u59cb s[s.index.weekday == 2].sum()#\u6c42\u6240\u6709\u5468\u4e09\u7684\u548c 26.097402479556862 s.resample('M').mean()# \u6bcf\u4e2a\u6708\u503c\u7684\u5e73\u5747\u503c 2018-01-31 0.351720 2018-02-28 0.555833 2018-03-31 0.510938 2018-04-30 0.524954 2018-05-31 0.477990 2018-06-30 0.584583 2018-07-31 0.531724 2018-08-31 0.494037 2018-09-30 0.579968 2018-10-31 0.532052 2018-11-30 0.471283 2018-12-31 0.518058 Freq: M, dtype: float64","title":"\u5b66\u4e601"},{"location":"pandas/learn_one/#_1","text":"import pandas as pd import numpy as np","title":"\u5bfc\u5165\u5e93"},{"location":"pandas/learn_one/#_2","text":"arr = [0, 1, 2, 3, 4] s1 = pd.Series(arr) # \u5982\u679c\u4e0d\u6307\u5b9a\u7d22\u5f15\uff0c\u5219\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb s1 0 0 1 1 2 2 3 3 4 4 dtype: int64 n = np.random.randn(5) # \u521b\u5efa\u4e00\u4e2a\u968f\u673a Ndarray \u6570\u7ec4 index = ['a', 'b', 'c', 'd', 'e'] s2 = pd.Series(n, index=index) s2 a 0.647546 b 0.197186 c 0.590904 d -0.422565 e -0.122490 dtype: float64","title":"\u4e00\u7ef4\u6570\u7ec4"},{"location":"pandas/learn_one/#_3","text":"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} # \u5b9a\u4e49\u793a\u4f8b\u5b57\u5178 s3 = pd.Series(d) s3 a 1 b 2 c 3 d 4 e 5 dtype: int64","title":"\u7528\u5b57\u5178\u521b\u5efa\u4e00\u7ef4\u6570\u7ec4"},{"location":"pandas/learn_one/#series","text":"print(s1) # \u4ee5 s1 \u4e3a\u4f8b s1.index = ['A', 'B', 'C', 'D', 'E'] # \u4fee\u6539\u540e\u7684\u7d22\u5f15 s1 0 0 1 1 2 2 3 3 4 4 dtype: int64 A 0 B 1 C 2 D 3 E 4 dtype: int64 s4 = s3.append(s1) # \u5c06 s1 \u62fc\u63a5\u5230 s3 s4 a 1 b 2 c 3 d 4 e 5 A 0 B 1 C 2 D 3 E 4 dtype: int64 print(s4) s4 = s4.drop('e') # \u5220\u9664\u7d22\u5f15\u4e3a e \u7684\u503c s4 a 1 b 2 c 3 d 4 e 5 A 0 B 1 C 2 D 3 E 4 dtype: int64 a 1 b 2 c 3 d 4 A 0 B 1 C 2 D 3 E 4 dtype: int64 s4['A'] = 6 # \u4fee\u6539\u7d22\u5f15\u4e3a A \u7684\u503c = 6 s4 a 1 b 2 c 3 d 4 A 6 B 1 C 2 D 3 E 4 dtype: int64 s4.add(s3)#\u5982\u679c\u7d22\u5f15\u4e0d\u540c\u5219\u4e3aNAN sub\u4e3a\u51cf\uff0cmul\u4e3a\u4e58\uff0cdiv\u4e3a\u9664 A NaN B NaN C NaN D NaN E NaN a 2.0 b 4.0 c 6.0 d 8.0 e NaN dtype: float64 print(s4.median(),#\u4e2d\u4f4d\u6570 s4.sum(),#\u6c42\u548c s4.max(),#\u6c42\u6700\u5927\u503c s4.min())#\u6c42\u6700\u5c0f\u503c 3.0 26 6 1","title":"Series \u57fa\u672c\u64cd\u4f5c"},{"location":"pandas/learn_one/#dataframe","text":"dates = pd.date_range('today', periods=6) # \u5b9a\u4e49\u65f6\u95f4\u5e8f\u5217\u4f5c\u4e3a index num_arr = np.random.randn(6, 4) # \u4f20\u5165 numpy \u968f\u673a\u6570\u7ec4 columns = ['A', 'B', 'C', 'D'] # \u5c06\u5217\u8868\u4f5c\u4e3a\u5217\u540d df1 = pd.DataFrame(num_arr, index=dates, columns=columns) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-11-13 20:54:24.760775 -0.403545 0.643881 -1.697286 -0.616257 2020-11-14 20:54:24.760775 0.102470 1.451324 -0.269714 -0.316194 2020-11-15 20:54:24.760775 0.342680 -0.137238 -0.785406 -0.441022 2020-11-16 20:54:24.760775 0.130079 1.929569 -0.756832 -2.490272 2020-11-17 20:54:24.760775 1.774664 1.037605 0.275989 -0.982924 2020-11-18 20:54:24.760775 0.952462 1.666130 -0.920394 -1.358411 data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'], 'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3], 'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']} labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] df2 = pd.DataFrame(data, index=labels) df2#df2.head()\u67e5\u770b\u524d\u51e0\u884c df2.tail()\u67e5\u770b\u540e\u51e0\u884c .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a 2.5 cat yes 1 b 3.0 cat yes 3 c 0.5 snake no 2 d NaN dog yes 3 e 5.0 dog no 2 f 2.0 cat no 3 g 4.5 snake no 1 h NaN cat yes 1 i 7.0 dog no 2 j 3.0 dog no 1 df2.columns,df2.index,df2.values #\u67e5\u770b\u7d22\u5f15.\u5217\u540d\u548c\u503c (Index(['age', 'animal', 'priority', 'visits'], dtype='object'), Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], dtype='object'), array([[2.5, 'cat', 'yes', 1], [3.0, 'cat', 'yes', 3], [0.5, 'snake', 'no', 2], [nan, 'dog', 'yes', 3], [5.0, 'dog', 'no', 2], [2.0, 'cat', 'no', 3], [4.5, 'snake', 'no', 1], [nan, 'cat', 'yes', 1], [7.0, 'dog', 'no', 2], [3.0, 'dog', 'no', 1]], dtype=object)) df2.describe()#\u6570\u636e\u5904\u7406\u5e38\u7528 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age visits count 8.000000 10.000000 mean 3.437500 1.900000 std 2.007797 0.875595 min 0.500000 1.000000 25% 2.375000 1.000000 50% 3.000000 2.000000 75% 4.625000 2.750000 max 7.000000 3.000000 df2.T #\u9006 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e f g h i j age 2.5 3 0.5 NaN 5 2 4.5 NaN 7 3 animal cat cat snake dog dog cat snake cat dog dog priority yes yes no yes no no no yes no no visits 1 3 2 3 2 3 1 1 2 1 df2.sort_values(by='age') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits c 0.5 snake no 2 f 2.0 cat no 3 a 2.5 cat yes 1 b 3.0 cat yes 3 j 3.0 dog no 1 g 4.5 snake no 1 e 5.0 dog no 2 i 7.0 dog no 2 d NaN dog yes 3 h NaN cat yes 1 df2['age']#\u663e\u793aage\u5217 == df2.age a 2.5 b 3.0 c 0.5 d NaN e 5.0 f 2.0 g 4.5 h NaN i 7.0 j 3.0 Name: age, dtype: float64 df2[['age','animal']] #\u591a\u5217\u67e5\u8be2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal a 2.5 cat b 3.0 cat c 0.5 snake d NaN dog e 5.0 dog f 2.0 cat g 4.5 snake h NaN cat i 7.0 dog j 3.0 dog df2.iloc[1:3]#\u67e5\u8be22\uff0c3\u884c ==df2[1:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits b 3.0 cat yes 3 c 0.5 snake no 2 df3 = df2.copy()#\u62f7\u8d1d\u4e00\u4efd df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a 2.5 cat yes 1 b 3.0 cat yes 3 c 0.5 snake no 2 d NaN dog yes 3 e 5.0 dog no 2 f 2.0 cat no 3 g 4.5 snake no 1 h NaN cat yes 1 i 7.0 dog no 2 j 3.0 dog no 1 df3.isnull()#\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8fd4\u56deTrue .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits a False False False False b False False False False c False False False False d True False False False e False False False False f False False False False g False False False False h True False False False i False False False False j False False False False num = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], index=df3.index)#\u5efa\u7acb\u6570\u636e\uff0c\u6ce8\u610f\u7d22\u5f15\u548cdf3\u4e00\u81f4 df3['No.'] = num # \u6dfb\u52a0\u4ee5 'No.' \u4e3a\u5217\u540d\u7684\u65b0\u6570\u636e\u5217 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 cat yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 2.0 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.iat[1,1] = 2 #\u6839\u636e\u7d22\u5f15\u6539\u53d8\u503c\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e86 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.loc['f', 'age'] = 1.5 #\u6839\u636e\u6807\u7b7e\u6765\u4fee\u6539 df3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df3.mean()#\u6c42\u5e73\u5747\u503c age 3.375 visits 1.900 No. 4.500 dtype: float64 df3['visits'].sum()#\u5bf9visits\u5217\u8fdb\u884c\u6c42\u548c 19 df4 = df3.copy() print(df4) df4.fillna(value=3)#\u5982\u679c\u662fNAN\u8865\u5145\u4e3a3 age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d 3.0 dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h 3.0 cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 df5 = df3.copy() print(df5) df5.dropna(how='any') # \u4efb\u4f55\u5b58\u5728 NaN \u7684\u884c\u90fd\u5c06\u88ab\u5220\u9664 age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 i 7.0 dog no 2 8 j 3.0 dog no 1 9 left = pd.DataFrame({'key': ['foo1', 'foo2'], 'one': [1, 2]}) right = pd.DataFrame({'key': ['foo2', 'foo3'], 'two': [4, 5]}) print(left) print(right) # \u6309\u7167 key \u5217\u5bf9\u9f50\u8fde\u63a5\uff0c\u53ea\u5b58\u5728 foo2 \u76f8\u540c\uff0c\u6240\u4ee5\u6700\u540e\u53d8\u6210\u4e00\u884c pd.merge(left, right, on='key') key one 0 foo1 1 1 foo2 2 key two 0 foo2 4 1 foo3 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key one two 0 foo2 2 4 df3.to_csv('animal.csv') print(\"\u5199\u5165\u6210\u529f.\") \u5199\u5165\u6210\u529f. df_animal = pd.read_csv('animal.csv') df_animal .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 age animal priority visits No. 0 a 2.5 cat yes 1 0 1 b 3.0 2 yes 3 1 2 c 0.5 snake no 2 2 3 d NaN dog yes 3 3 4 e 5.0 dog no 2 4 5 f 1.5 cat no 3 5 6 g 4.5 snake no 1 6 7 h NaN cat yes 1 7 8 i 7.0 dog no 2 8 9 j 3.0 dog no 1 9 df3.to_excel('animal.xlsx', sheet_name='Sheet1') print(\"\u5199\u5165\u6210\u529f.\") \u5199\u5165\u6210\u529f. pd.read_excel('animal.xlsx', 'Sheet1', index_col=None, na_values=['NA']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age animal priority visits No. a 2.5 cat yes 1 0 b 3.0 2 yes 3 1 c 0.5 snake no 2 2 d NaN dog yes 3 3 e 5.0 dog no 2 4 f 1.5 cat no 3 5 g 4.5 snake no 1 6 h NaN cat yes 1 7 i 7.0 dog no 2 8 j 3.0 dog no 1 9","title":"DataFrame"},{"location":"pandas/learn_one/#_4","text":"dti = pd.date_range(start='2018-01-01', end='2018-12-31', freq='D') s = pd.Series(np.random.rand(len(dti)), index=dti) s 2018-01-01 0.201676 2018-01-02 0.502547 2018-01-03 0.170739 2018-01-04 0.725599 2018-01-05 0.550199 2018-01-06 0.032421 2018-01-07 0.699385 2018-01-08 0.486797 2018-01-09 0.829427 2018-01-10 0.180882 2018-01-11 0.038766 2018-01-12 0.277279 2018-01-13 0.549932 2018-01-14 0.053058 2018-01-15 0.031786 2018-01-16 0.418983 2018-01-17 0.118010 2018-01-18 0.396846 2018-01-19 0.337507 2018-01-20 0.357052 2018-01-21 0.715088 2018-01-22 0.147573 2018-01-23 0.444479 2018-01-24 0.354306 2018-01-25 0.054420 2018-01-26 0.024047 2018-01-27 0.432698 2018-01-28 0.532165 2018-01-29 0.262547 2018-01-30 0.727870 ... 2018-12-02 0.855610 2018-12-03 0.682516 2018-12-04 0.991494 2018-12-05 0.935902 2018-12-06 0.893206 2018-12-07 0.884918 2018-12-08 0.285479 2018-12-09 0.317185 2018-12-10 0.449078 2018-12-11 0.266593 2018-12-12 0.432669 2018-12-13 0.065663 2018-12-14 0.524504 2018-12-15 0.164935 2018-12-16 0.347022 2018-12-17 0.127325 2018-12-18 0.406984 2018-12-19 0.698307 2018-12-20 0.135198 2018-12-21 0.153526 2018-12-22 0.312617 2018-12-23 0.965893 2018-12-24 0.957769 2018-12-25 0.449219 2018-12-26 0.037703 2018-12-27 0.640956 2018-12-28 0.434779 2018-12-29 0.750819 2018-12-30 0.471872 2018-12-31 0.566274 Freq: D, Length: 365, dtype: float64 # \u5468\u4e00\u4ece 0 \u5f00\u59cb s[s.index.weekday == 2].sum()#\u6c42\u6240\u6709\u5468\u4e09\u7684\u548c 26.097402479556862 s.resample('M').mean()# \u6bcf\u4e2a\u6708\u503c\u7684\u5e73\u5747\u503c 2018-01-31 0.351720 2018-02-28 0.555833 2018-03-31 0.510938 2018-04-30 0.524954 2018-05-31 0.477990 2018-06-30 0.584583 2018-07-31 0.531724 2018-08-31 0.494037 2018-09-30 0.579968 2018-10-31 0.532052 2018-11-30 0.471283 2018-12-31 0.518058 Freq: M, dtype: float64","title":"\u8fdb\u9636\u90e8\u5206"},{"location":"pandas/learn_two/","text":"import pandas as pd import numpy as np \u8bfb\u53d6\u6587\u4ef6 df = pd.read_csv( 'https://labfile.oss.aliyuncs.com/courses/1283/telecom_churn.csv') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 No Yes 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 False 1 OH 107 415 No Yes 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 False 2 NJ 137 415 No No 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 False 3 OH 84 408 Yes No 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 False 4 OK 75 415 Yes No 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 False df.info() #DataFrame \u7684\u4e00\u4e9b\u603b\u4f53\u4fe1\u606f\u3002 <class 'pandas.core.frame.DataFrame'> RangeIndex: 3333 entries, 0 to 3332 Data columns (total 20 columns): State 3333 non-null object Account length 3333 non-null int64 Area code 3333 non-null int64 International plan 3333 non-null object Voice mail plan 3333 non-null object Number vmail messages 3333 non-null int64 Total day minutes 3333 non-null float64 Total day calls 3333 non-null int64 Total day charge 3333 non-null float64 Total eve minutes 3333 non-null float64 Total eve calls 3333 non-null int64 Total eve charge 3333 non-null float64 Total night minutes 3333 non-null float64 Total night calls 3333 non-null int64 Total night charge 3333 non-null float64 Total intl minutes 3333 non-null float64 Total intl calls 3333 non-null int64 Total intl charge 3333 non-null float64 Customer service calls 3333 non-null int64 Churn 3333 non-null bool dtypes: bool(1), float64(8), int64(8), object(3) memory usage: 498.1+ KB df.shape #\u5f62\u72b6\u5927\u5c0f (3333, 20) df.columns #\u5217\u540d Index(['State', 'Account length', 'Area code', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls', 'Churn'], dtype='object') df['Churn'] = df['Churn'].astype('int64') #\u5c06Churn\u5217\u4fee\u6539\u6570\u636e\u7c7b\u578b df.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 3333 entries, 0 to 3332 Data columns (total 20 columns): State 3333 non-null object Account length 3333 non-null int64 Area code 3333 non-null int64 International plan 3333 non-null object Voice mail plan 3333 non-null object Number vmail messages 3333 non-null int64 Total day minutes 3333 non-null float64 Total day calls 3333 non-null int64 Total day charge 3333 non-null float64 Total eve minutes 3333 non-null float64 Total eve calls 3333 non-null int64 Total eve charge 3333 non-null float64 Total night minutes 3333 non-null float64 Total night calls 3333 non-null int64 Total night charge 3333 non-null float64 Total intl minutes 3333 non-null float64 Total intl calls 3333 non-null int64 Total intl charge 3333 non-null float64 Customer service calls 3333 non-null int64 Churn 3333 non-null int64 dtypes: float64(8), int64(9), object(3) memory usage: 520.9+ KB df.describe() #\u663e\u793a\u6570\u503c\u7279\u5f81\uff08int64 \u548c float64\uff09\u7684\u57fa\u672c\u7edf\u8ba1\u5b66\u7279\u6027 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Account length Area code Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn count 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 mean 101.064806 437.182418 8.099010 179.775098 100.435644 30.562307 200.980348 100.114311 17.083540 200.872037 100.107711 9.039325 10.237294 4.479448 2.764581 1.562856 0.144914 std 39.822106 42.371290 13.688365 54.467389 20.069084 9.259435 50.713844 19.922625 4.310668 50.573847 19.568609 2.275873 2.791840 2.461214 0.753773 1.315491 0.352067 min 1.000000 408.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 23.200000 33.000000 1.040000 0.000000 0.000000 0.000000 0.000000 0.000000 25% 74.000000 408.000000 0.000000 143.700000 87.000000 24.430000 166.600000 87.000000 14.160000 167.000000 87.000000 7.520000 8.500000 3.000000 2.300000 1.000000 0.000000 50% 101.000000 415.000000 0.000000 179.400000 101.000000 30.500000 201.400000 100.000000 17.120000 201.200000 100.000000 9.050000 10.300000 4.000000 2.780000 1.000000 0.000000 75% 127.000000 510.000000 20.000000 216.400000 114.000000 36.790000 235.300000 114.000000 20.000000 235.300000 113.000000 10.590000 12.100000 6.000000 3.270000 2.000000 0.000000 max 243.000000 510.000000 51.000000 350.800000 165.000000 59.640000 363.700000 170.000000 30.910000 395.000000 175.000000 17.770000 20.000000 20.000000 5.400000 9.000000 1.000000 df.describe(include=['object', 'bool']) #\u901a\u8fc7 include \u53c2\u6570\u663e\u5f0f\u6307\u5b9a\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u67e5\u770b\u975e\u6570\u503c\u7279\u5f81\u7684\u7edf\u8ba1\u6570\u636e .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State International plan Voice mail plan count 3333 3333 3333 unique 51 2 2 top WV No No freq 106 3010 2411 df['Churn'].value_counts() #\u5982\u5176\u540d 0 2850 1 483 Name: Churn, dtype: int64 df['Churn'].value_counts(normalize=True) #\u4f20\u5165\u53c2\u6570\u663e\u793a\u6bd4\u4f8b 0 0.855086 1 0.144914 Name: Churn, dtype: float64 df.sort_values(by='Total day charge', ascending=False).head() #\u6839\u636eTotal day charge\u5217\u8fdb\u884c\u6392\u5e8f ascending=False\u4e3a\u5012\u5e8f\u6392\u5e8f .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 365 CO 154 415 No No 0 350.8 75 59.64 216.5 94 18.40 253.9 100 11.43 10.1 9 2.73 1 1 985 NY 64 415 Yes No 0 346.8 55 58.96 249.5 79 21.21 275.4 102 12.39 13.3 9 3.59 1 1 2594 OH 115 510 Yes No 0 345.3 81 58.70 203.4 106 17.29 217.5 107 9.79 11.8 8 3.19 1 1 156 OH 83 415 No No 0 337.4 120 57.36 227.4 116 19.33 153.9 114 6.93 15.8 7 4.27 0 1 605 MO 112 415 No No 0 335.5 77 57.04 212.5 109 18.06 265.0 132 11.93 12.7 8 3.43 2 1 df.sort_values(by=['Churn', 'Total day charge'], ascending=[True, False]).head() #\u5148\u6309 Churn \u79bb\u7f51\u7387 \u5347\u5e8f\u6392\u5217\uff0c\u518d\u6309 Total day charge \u6bcf\u65e5\u603b\u8bdd\u8d39 \u964d\u5e8f\u6392\u5217 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 688 MN 13 510 No Yes 21 315.6 105 53.65 208.9 71 17.76 260.1 123 11.70 12.1 3 3.27 3 0 2259 NC 210 415 No Yes 31 313.8 87 53.35 147.7 103 12.55 192.7 97 8.67 10.1 7 2.73 3 0 534 LA 67 510 No No 0 310.4 97 52.77 66.5 123 5.65 246.5 99 11.09 9.2 10 2.48 4 0 575 SD 114 415 No Yes 36 309.9 90 52.68 200.3 89 17.03 183.5 105 8.26 14.2 2 3.83 1 0 2858 AL 141 510 No Yes 28 308.0 123 52.36 247.8 128 21.06 152.9 103 6.88 7.4 3 2.00 1 0 df[df['Churn'] == 1].mean() Account length 102.664596 Area code 437.817805 Number vmail messages 5.115942 Total day minutes 206.914079 Total day calls 101.335404 Total day charge 35.175921 Total eve minutes 212.410145 Total eve calls 100.561077 Total eve charge 18.054969 Total night minutes 205.231677 Total night calls 100.399586 Total night charge 9.235528 Total intl minutes 10.700000 Total intl calls 4.163561 Total intl charge 2.889545 Customer service calls 2.229814 Churn 1.000000 dtype: float64 df[df['Churn'] == 1]['Total day minutes'].mean() 206.91407867494814 df.loc[0:5, 'State':'Area code'] #\u901a\u8fc7\u6807\u7b7e\u6765\u9009\u53d6 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code 0 KS 128 415 1 OH 107 415 2 NJ 137 415 3 OH 84 408 4 OK 75 415 5 AL 118 510 df.iloc[0:5, 0:3] #\u901a\u8fc7\u7d22\u5f15\u6765\u9009\u53d6\uff0c\u7c7b\u4f3c\u4e8epython\u7684\u5207\u7247\u64cd\u4f5c .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code 0 KS 128 415 1 OH 107 415 2 NJ 137 415 3 OH 84 408 4 OK 75 415 df.apply(max) #\u5e94\u7528\u5230\u6bcf\u4e00\u5217 State WY Account length 243 Area code 510 International plan Yes Voice mail plan Yes Number vmail messages 51 Total day minutes 350.8 Total day calls 165 Total day charge 59.64 Total eve minutes 363.7 Total eve calls 170 Total eve charge 30.91 Total night minutes 395 Total night calls 175 Total night charge 17.77 Total intl minutes 20 Total intl calls 20 Total intl charge 5.4 Customer service calls 9 Churn 1 dtype: object df[df['State'].apply(lambda state: state[0] == 'W')].head() #\u83b7\u53d6\u9996\u5b57\u6bcd\u4e3aW\u7684\u5dde .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 9 WV 141 415 Yes Yes 37 258.6 84 43.96 222.0 111 18.87 326.4 97 14.69 11.2 5 3.02 0 0 26 WY 57 408 No Yes 39 213.0 115 36.21 191.1 112 16.24 182.7 115 8.22 9.5 3 2.57 0 0 44 WI 64 510 No No 0 154.0 67 26.18 225.8 118 19.19 265.3 86 11.94 3.5 3 0.95 1 0 49 WY 97 415 No Yes 24 133.2 135 22.64 217.2 58 18.46 70.6 79 3.18 11.0 3 2.97 1 0 54 WY 87 415 No No 0 151.0 83 25.67 219.7 116 18.67 203.9 127 9.18 9.7 3 2.62 5 1 d = {'No': False, 'Yes': True} df['International plan'] = df['International plan'].map(d) #\u5c06No\u8f6c\u6362\u4e3aFalse Yes\u8f6c\u6362\u4e3aTrue df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 False Yes 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 0 1 OH 107 415 False Yes 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 0 2 NJ 137 415 False No 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 0 3 OH 84 408 True No 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 0 4 OK 75 415 True No 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 0 df = df.replace({'Voice mail plan': d}) #\u7528replace\u4e5f\u53ef\u4ee5\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684 df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 False True 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 0 1 OH 107 415 False True 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 0 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 0 3 OH 84 408 True False 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 0 4 OK 75 415 True False 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 0 \u6c47\u603b\u8868 pd.crosstab(df['Churn'], df['International plan']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } International plan False True Churn 0 2664 186 1 346 137 pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Voice mail plan False True Churn 0 0.602460 0.252625 1 0.120912 0.024002 total_calls = df['Total day calls'] + df['Total eve calls'] + \\ df['Total night calls'] + df['Total intl calls'] # loc \u53c2\u6570\u662f\u63d2\u5165 Series \u5bf9\u8c61\u540e\u9009\u62e9\u7684\u5217\u6570 # \u8bbe\u7f6e\u4e3a len(df.columns)\u4ee5\u4fbf\u5c06\u8ba1\u7b97\u540e\u7684 Total calls \u7c98\u8d34\u5230\u6700\u540e\u4e00\u5217 df.insert(loc=len(df.columns), column='Total calls', value=total_calls) df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes ... Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn Total calls 0 KS 128 415 False True 25 265.1 110 45.07 197.4 ... 16.78 244.7 91 11.01 10.0 3 2.70 1 0 303 1 OH 107 415 False True 26 161.6 123 27.47 195.5 ... 16.62 254.4 103 11.45 13.7 3 3.70 1 0 332 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 ... 10.30 162.6 104 7.32 12.2 5 3.29 0 0 333 3 OH 84 408 True False 0 299.4 71 50.90 61.9 ... 5.26 196.9 89 8.86 6.6 7 1.78 2 0 255 4 OK 75 415 True False 0 166.7 113 28.34 148.3 ... 12.61 186.9 121 8.41 10.1 3 2.73 3 0 359 5 rows \u00d7 21 columns df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + \\ df['Total night charge'] + df['Total intl charge'] #\u4e0d\u521b\u9020\u5b9e\u4f8b\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u63d2\u5165 df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes ... Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn Total calls Total charge 0 KS 128 415 False True 25 265.1 110 45.07 197.4 ... 244.7 91 11.01 10.0 3 2.70 1 0 303 75.56 1 OH 107 415 False True 26 161.6 123 27.47 195.5 ... 254.4 103 11.45 13.7 3 3.70 1 0 332 59.24 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 ... 162.6 104 7.32 12.2 5 3.29 0 0 333 62.29 3 OH 84 408 True False 0 299.4 71 50.90 61.9 ... 196.9 89 8.86 6.6 7 1.78 2 0 255 66.80 4 OK 75 415 True False 0 166.7 113 28.34 148.3 ... 186.9 121 8.41 10.1 3 2.73 3 0 359 52.09 5 rows \u00d7 22 columns","title":"\u5b66\u4e602"},{"location":"pandas/learn_two/#_1","text":"df = pd.read_csv( 'https://labfile.oss.aliyuncs.com/courses/1283/telecom_churn.csv') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 No Yes 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 False 1 OH 107 415 No Yes 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 False 2 NJ 137 415 No No 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 False 3 OH 84 408 Yes No 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 False 4 OK 75 415 Yes No 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 False df.info() #DataFrame \u7684\u4e00\u4e9b\u603b\u4f53\u4fe1\u606f\u3002 <class 'pandas.core.frame.DataFrame'> RangeIndex: 3333 entries, 0 to 3332 Data columns (total 20 columns): State 3333 non-null object Account length 3333 non-null int64 Area code 3333 non-null int64 International plan 3333 non-null object Voice mail plan 3333 non-null object Number vmail messages 3333 non-null int64 Total day minutes 3333 non-null float64 Total day calls 3333 non-null int64 Total day charge 3333 non-null float64 Total eve minutes 3333 non-null float64 Total eve calls 3333 non-null int64 Total eve charge 3333 non-null float64 Total night minutes 3333 non-null float64 Total night calls 3333 non-null int64 Total night charge 3333 non-null float64 Total intl minutes 3333 non-null float64 Total intl calls 3333 non-null int64 Total intl charge 3333 non-null float64 Customer service calls 3333 non-null int64 Churn 3333 non-null bool dtypes: bool(1), float64(8), int64(8), object(3) memory usage: 498.1+ KB df.shape #\u5f62\u72b6\u5927\u5c0f (3333, 20) df.columns #\u5217\u540d Index(['State', 'Account length', 'Area code', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls', 'Churn'], dtype='object') df['Churn'] = df['Churn'].astype('int64') #\u5c06Churn\u5217\u4fee\u6539\u6570\u636e\u7c7b\u578b df.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 3333 entries, 0 to 3332 Data columns (total 20 columns): State 3333 non-null object Account length 3333 non-null int64 Area code 3333 non-null int64 International plan 3333 non-null object Voice mail plan 3333 non-null object Number vmail messages 3333 non-null int64 Total day minutes 3333 non-null float64 Total day calls 3333 non-null int64 Total day charge 3333 non-null float64 Total eve minutes 3333 non-null float64 Total eve calls 3333 non-null int64 Total eve charge 3333 non-null float64 Total night minutes 3333 non-null float64 Total night calls 3333 non-null int64 Total night charge 3333 non-null float64 Total intl minutes 3333 non-null float64 Total intl calls 3333 non-null int64 Total intl charge 3333 non-null float64 Customer service calls 3333 non-null int64 Churn 3333 non-null int64 dtypes: float64(8), int64(9), object(3) memory usage: 520.9+ KB df.describe() #\u663e\u793a\u6570\u503c\u7279\u5f81\uff08int64 \u548c float64\uff09\u7684\u57fa\u672c\u7edf\u8ba1\u5b66\u7279\u6027 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Account length Area code Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn count 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 3333.000000 mean 101.064806 437.182418 8.099010 179.775098 100.435644 30.562307 200.980348 100.114311 17.083540 200.872037 100.107711 9.039325 10.237294 4.479448 2.764581 1.562856 0.144914 std 39.822106 42.371290 13.688365 54.467389 20.069084 9.259435 50.713844 19.922625 4.310668 50.573847 19.568609 2.275873 2.791840 2.461214 0.753773 1.315491 0.352067 min 1.000000 408.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 23.200000 33.000000 1.040000 0.000000 0.000000 0.000000 0.000000 0.000000 25% 74.000000 408.000000 0.000000 143.700000 87.000000 24.430000 166.600000 87.000000 14.160000 167.000000 87.000000 7.520000 8.500000 3.000000 2.300000 1.000000 0.000000 50% 101.000000 415.000000 0.000000 179.400000 101.000000 30.500000 201.400000 100.000000 17.120000 201.200000 100.000000 9.050000 10.300000 4.000000 2.780000 1.000000 0.000000 75% 127.000000 510.000000 20.000000 216.400000 114.000000 36.790000 235.300000 114.000000 20.000000 235.300000 113.000000 10.590000 12.100000 6.000000 3.270000 2.000000 0.000000 max 243.000000 510.000000 51.000000 350.800000 165.000000 59.640000 363.700000 170.000000 30.910000 395.000000 175.000000 17.770000 20.000000 20.000000 5.400000 9.000000 1.000000 df.describe(include=['object', 'bool']) #\u901a\u8fc7 include \u53c2\u6570\u663e\u5f0f\u6307\u5b9a\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u67e5\u770b\u975e\u6570\u503c\u7279\u5f81\u7684\u7edf\u8ba1\u6570\u636e .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State International plan Voice mail plan count 3333 3333 3333 unique 51 2 2 top WV No No freq 106 3010 2411 df['Churn'].value_counts() #\u5982\u5176\u540d 0 2850 1 483 Name: Churn, dtype: int64 df['Churn'].value_counts(normalize=True) #\u4f20\u5165\u53c2\u6570\u663e\u793a\u6bd4\u4f8b 0 0.855086 1 0.144914 Name: Churn, dtype: float64 df.sort_values(by='Total day charge', ascending=False).head() #\u6839\u636eTotal day charge\u5217\u8fdb\u884c\u6392\u5e8f ascending=False\u4e3a\u5012\u5e8f\u6392\u5e8f .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 365 CO 154 415 No No 0 350.8 75 59.64 216.5 94 18.40 253.9 100 11.43 10.1 9 2.73 1 1 985 NY 64 415 Yes No 0 346.8 55 58.96 249.5 79 21.21 275.4 102 12.39 13.3 9 3.59 1 1 2594 OH 115 510 Yes No 0 345.3 81 58.70 203.4 106 17.29 217.5 107 9.79 11.8 8 3.19 1 1 156 OH 83 415 No No 0 337.4 120 57.36 227.4 116 19.33 153.9 114 6.93 15.8 7 4.27 0 1 605 MO 112 415 No No 0 335.5 77 57.04 212.5 109 18.06 265.0 132 11.93 12.7 8 3.43 2 1 df.sort_values(by=['Churn', 'Total day charge'], ascending=[True, False]).head() #\u5148\u6309 Churn \u79bb\u7f51\u7387 \u5347\u5e8f\u6392\u5217\uff0c\u518d\u6309 Total day charge \u6bcf\u65e5\u603b\u8bdd\u8d39 \u964d\u5e8f\u6392\u5217 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 688 MN 13 510 No Yes 21 315.6 105 53.65 208.9 71 17.76 260.1 123 11.70 12.1 3 3.27 3 0 2259 NC 210 415 No Yes 31 313.8 87 53.35 147.7 103 12.55 192.7 97 8.67 10.1 7 2.73 3 0 534 LA 67 510 No No 0 310.4 97 52.77 66.5 123 5.65 246.5 99 11.09 9.2 10 2.48 4 0 575 SD 114 415 No Yes 36 309.9 90 52.68 200.3 89 17.03 183.5 105 8.26 14.2 2 3.83 1 0 2858 AL 141 510 No Yes 28 308.0 123 52.36 247.8 128 21.06 152.9 103 6.88 7.4 3 2.00 1 0 df[df['Churn'] == 1].mean() Account length 102.664596 Area code 437.817805 Number vmail messages 5.115942 Total day minutes 206.914079 Total day calls 101.335404 Total day charge 35.175921 Total eve minutes 212.410145 Total eve calls 100.561077 Total eve charge 18.054969 Total night minutes 205.231677 Total night calls 100.399586 Total night charge 9.235528 Total intl minutes 10.700000 Total intl calls 4.163561 Total intl charge 2.889545 Customer service calls 2.229814 Churn 1.000000 dtype: float64 df[df['Churn'] == 1]['Total day minutes'].mean() 206.91407867494814 df.loc[0:5, 'State':'Area code'] #\u901a\u8fc7\u6807\u7b7e\u6765\u9009\u53d6 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code 0 KS 128 415 1 OH 107 415 2 NJ 137 415 3 OH 84 408 4 OK 75 415 5 AL 118 510 df.iloc[0:5, 0:3] #\u901a\u8fc7\u7d22\u5f15\u6765\u9009\u53d6\uff0c\u7c7b\u4f3c\u4e8epython\u7684\u5207\u7247\u64cd\u4f5c .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code 0 KS 128 415 1 OH 107 415 2 NJ 137 415 3 OH 84 408 4 OK 75 415 df.apply(max) #\u5e94\u7528\u5230\u6bcf\u4e00\u5217 State WY Account length 243 Area code 510 International plan Yes Voice mail plan Yes Number vmail messages 51 Total day minutes 350.8 Total day calls 165 Total day charge 59.64 Total eve minutes 363.7 Total eve calls 170 Total eve charge 30.91 Total night minutes 395 Total night calls 175 Total night charge 17.77 Total intl minutes 20 Total intl calls 20 Total intl charge 5.4 Customer service calls 9 Churn 1 dtype: object df[df['State'].apply(lambda state: state[0] == 'W')].head() #\u83b7\u53d6\u9996\u5b57\u6bcd\u4e3aW\u7684\u5dde .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 9 WV 141 415 Yes Yes 37 258.6 84 43.96 222.0 111 18.87 326.4 97 14.69 11.2 5 3.02 0 0 26 WY 57 408 No Yes 39 213.0 115 36.21 191.1 112 16.24 182.7 115 8.22 9.5 3 2.57 0 0 44 WI 64 510 No No 0 154.0 67 26.18 225.8 118 19.19 265.3 86 11.94 3.5 3 0.95 1 0 49 WY 97 415 No Yes 24 133.2 135 22.64 217.2 58 18.46 70.6 79 3.18 11.0 3 2.97 1 0 54 WY 87 415 No No 0 151.0 83 25.67 219.7 116 18.67 203.9 127 9.18 9.7 3 2.62 5 1 d = {'No': False, 'Yes': True} df['International plan'] = df['International plan'].map(d) #\u5c06No\u8f6c\u6362\u4e3aFalse Yes\u8f6c\u6362\u4e3aTrue df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 False Yes 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 0 1 OH 107 415 False Yes 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 0 2 NJ 137 415 False No 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 0 3 OH 84 408 True No 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 0 4 OK 75 415 True No 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 0 df = df.replace({'Voice mail plan': d}) #\u7528replace\u4e5f\u53ef\u4ee5\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684 df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes Total eve calls Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn 0 KS 128 415 False True 25 265.1 110 45.07 197.4 99 16.78 244.7 91 11.01 10.0 3 2.70 1 0 1 OH 107 415 False True 26 161.6 123 27.47 195.5 103 16.62 254.4 103 11.45 13.7 3 3.70 1 0 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 110 10.30 162.6 104 7.32 12.2 5 3.29 0 0 3 OH 84 408 True False 0 299.4 71 50.90 61.9 88 5.26 196.9 89 8.86 6.6 7 1.78 2 0 4 OK 75 415 True False 0 166.7 113 28.34 148.3 122 12.61 186.9 121 8.41 10.1 3 2.73 3 0","title":"\u8bfb\u53d6\u6587\u4ef6"},{"location":"pandas/learn_two/#_2","text":"pd.crosstab(df['Churn'], df['International plan']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } International plan False True Churn 0 2664 186 1 346 137 pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Voice mail plan False True Churn 0 0.602460 0.252625 1 0.120912 0.024002 total_calls = df['Total day calls'] + df['Total eve calls'] + \\ df['Total night calls'] + df['Total intl calls'] # loc \u53c2\u6570\u662f\u63d2\u5165 Series \u5bf9\u8c61\u540e\u9009\u62e9\u7684\u5217\u6570 # \u8bbe\u7f6e\u4e3a len(df.columns)\u4ee5\u4fbf\u5c06\u8ba1\u7b97\u540e\u7684 Total calls \u7c98\u8d34\u5230\u6700\u540e\u4e00\u5217 df.insert(loc=len(df.columns), column='Total calls', value=total_calls) df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes ... Total eve charge Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn Total calls 0 KS 128 415 False True 25 265.1 110 45.07 197.4 ... 16.78 244.7 91 11.01 10.0 3 2.70 1 0 303 1 OH 107 415 False True 26 161.6 123 27.47 195.5 ... 16.62 254.4 103 11.45 13.7 3 3.70 1 0 332 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 ... 10.30 162.6 104 7.32 12.2 5 3.29 0 0 333 3 OH 84 408 True False 0 299.4 71 50.90 61.9 ... 5.26 196.9 89 8.86 6.6 7 1.78 2 0 255 4 OK 75 415 True False 0 166.7 113 28.34 148.3 ... 12.61 186.9 121 8.41 10.1 3 2.73 3 0 359 5 rows \u00d7 21 columns df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + \\ df['Total night charge'] + df['Total intl charge'] #\u4e0d\u521b\u9020\u5b9e\u4f8b\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u63d2\u5165 df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } State Account length Area code International plan Voice mail plan Number vmail messages Total day minutes Total day calls Total day charge Total eve minutes ... Total night minutes Total night calls Total night charge Total intl minutes Total intl calls Total intl charge Customer service calls Churn Total calls Total charge 0 KS 128 415 False True 25 265.1 110 45.07 197.4 ... 244.7 91 11.01 10.0 3 2.70 1 0 303 75.56 1 OH 107 415 False True 26 161.6 123 27.47 195.5 ... 254.4 103 11.45 13.7 3 3.70 1 0 332 59.24 2 NJ 137 415 False False 0 243.4 114 41.38 121.2 ... 162.6 104 7.32 12.2 5 3.29 0 0 333 62.29 3 OH 84 408 True False 0 299.4 71 50.90 61.9 ... 196.9 89 8.86 6.6 7 1.78 2 0 255 66.80 4 OK 75 415 True False 0 166.7 113 28.34 148.3 ... 186.9 121 8.41 10.1 3 2.73 3 0 359 52.09 5 rows \u00d7 22 columns","title":"\u6c47\u603b\u8868"},{"location":"pandas/task1/","text":"pandas\u5b9e\u8df51 \u5728\u8bfb\u53d6\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4fee\u6539\u4e86\u8868\u683c\u91cc\u9762\u7684\u8868\u5934\uff0c\u4ee5\u4fbf\u7a0b\u5e8f\u7684\u7f16\u5199\u3002 \u5148\u4ece excel \u8bfb\u53d6\u6570\u636e,\u7136\u540e\u770b\u770b shape \u4e86\u89e3\u884c\u6570\u5217\u6570,\u7136\u540e\u8c03\u7528 info \u65b9\u6cd5\uff0c \u770b\u770b\u6709\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u53d1\u73b0\u5e76\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u4f46\u9898\u76ee\u91cc\u8bf4\u4e86\u53ef\u80fd\u6709\u91cd\u590d\u6216\u8005\u683c\u5f0f \u4e0d\u5bf9\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u6700\u4e3b\u8981\u7684\u662f\u5b66\u53f7,\u4e00\u822c\u5b66\u53f7\u7684\u957f\u5ea6\u90fd\u662f 12 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u7b5b \u9009\u51fa\u4e0d\u662f 12 \u4f4d\u6570\u7684 data[data['studentid'].apply(lambda x:len(x)!=12)] \u8003\u8651\u5230\u53ef\u80fd\u51fa\u73b0\u4e2d\u6587\u7684\u60c5\u51b5\uff0c\u5148\u5c1d\u8bd5\u8f6c\u5316\u4e3a\u6574\u6570\u8bd5\u8bd5 data[\u2018studentid\u2019] = data[\u2018studentid\u2019].astype(\u201cint64\u201d) \u53d1\u73b0\u62a5\u9519\u4e86\uff0c\u7136\u540e\u5c31\u770b\u89c1\u4e86\u90a3\u4e2a\u5b66\u53f7\u662f\u2019\u5fd8\u8bb0\u4e86\u2019\u7684 \u6700\u540e\u4fee\u6539\u6210\u4e86 data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')] \u5c06\u8fd9\u4e9b\u6570\u636e\u5220\u9664 data = data.drop(data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')].index) \u8003\u8651\u5230\u6709\u91cd\u590d\uff0c\u91cd\u590d\u7684\u4e24\u4e2a\u56e0\u7d20\u5c31\u662f\u59d3\u540d\u548c\u5b66\u53f7\uff0c\u56e0\u6b64\u8fdb\u884c\u53bb\u91cd\u5904\u7406 data.drop_duplicates(subset=['name','studentid'],keep='first',inplace=Tru e) \u6b64\u5916\uff0c\u5bf9\u4e13\u4e1a\u7684\u5904\u7406\uff0c\u5c06\u65e0\u7528\u7684 xx-x \u53bb\u6389\u5373\u53ef\uff0c\u8fd9\u91cc\u8003\u8651\u5230\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f data['class'] = data['class'].apply(lambda s:re.sub(r\"[\\s*\\d*\\-*\\\u2014*\\ \uff0d *\\\u2013*\\/*]?\",'',s)) \u56e0\u4e3a\u5404\u79cd\u5404\u6837\u7684-\u8d1f\u53f7\u5343\u5947\u767e\u602a\uff0c\u6211\u53ea\u80fd\u4e00\u6b21\u6b21\u4fee\u6539\u540e\u7136\u540e\u7edf\u8ba1\u4e00\u4e0b\u5373\u8c03\u7528 data[\u2018class\u2019].value_counts() \u6709\u6ca1\u6709\u6ca1\u6709\u5904\u7406\u5230\u7684\uff0c\u7136\u540e\u628a\u90a3\u4e2a-\u7b26\u53f7\u52a0\u8fdb\u53bb \u8fd8\u53d1\u73b0\u4e86\u6709/\u53f7\u3002 \u6700\u540e\u5c31\u6210\u4e86\u90a3\u6837\uff0c\u5199\u5230\u8fd9\u91cc\u6211\u6709\u4e86\u66f4\u597d\u7684\u60f3\u6cd5\uff0c\u548c\u4e0b\u9762\u7684 \u67d0\u4e24\u4e2a\u4e2a\u4f8b\u6709\u5173\u7cfb\u3002 \u7136\u540e\u5c31\u662f\u90a3\u4e2a maps \u8868\uff0c\u90fd\u7b80\u5316\u4e3a\u7b80\u79f0\uff0c\u5bf9\u79f0\u547c\u8fdb\u884c\u7edf\u4e00\uff0c\u7528\u4e86 apply \u65b9 \u6cd5 \u518d\u7edf\u8ba1\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e24\u4e2a\u4e13\u4e1a\u540e\u9762\u5e26\u540d\u5b57\u7684\u5b66\u957f\u5b66\u59d0\uff0c\u56e0\u4e3a\u5c31\u4e24\u4e2a\uff0c\u5c31\u628a\u4ed6 \u4eec\u52a0\u5230 maps \u91cc\u9762\u4e86\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5224\u65ad\u540d\u5b57\u662f\u5426\u5728\u4e13\u4e1a\u91cc\u9762\uff0c\u5982\u679c\u5728\u5c31\u66ff\u6362 \u4e3a\u7a7a\u5427\u3002 \u4e4b\u540e\u5c31\u5dee\u4e0d\u591a\u53ef\u4ee5\u4e86\uff0c\u6570\u636e\u9884\u5904\u7406\u5b8c\u6bd5\uff0c\u6309\u7167\u8981\u6c42\u4fdd\u5b58\u5373\u53ef\u3002 #\u6570\u636e\u9884\u5904\u7406\u6587\u4ef6 import pandas as pd import re data = pd.read_excel(\"\u9644\u4ef61.xlsx\") #\u53bb\u9664\u9519\u8bef\u6570\u636e data = data.drop(data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')].index) #\u53bb\u91cd data.drop_duplicates(subset=['name','studentid'], keep='first', inplace=True) data['class'] = data['class'].apply(lambda s:re.sub(r\"[\\s*\\d*\\-*\\\u2014*\\\uff0d*\\\u2013*\\/*]?\", '', s)) maps = { '\u667a\u80fd\u79d1\u5b66':'\u667a\u79d1', '\u4e91\u8ba1\u7b97':'\u4e91\u8ba1', '\u5e94\u7528\u7edf\u8ba1\u5b66':'\u7edf\u8ba1', '\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66':'\u4fe1\u8ba1', '\u667a\u80fd\u79d1\u5b66\u4e0e\u6280\u672f':'\u667a\u79d1', '\u5e94\u7528\u7edf\u8ba1':'\u7edf\u8ba1', '\u8f6f\u4ef6\u5de5\u7a0b':'\u8f6f\u5de5', '\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66\uff08\u4e91\u8ba1\u7b97\uff09':'\u4fe1\u8ba1', '\u5149\u7535\u4fe1\u606f\u4e0e\u79d1\u5b66':'\u5149\u7535', '\u4fe1\u8ba1\uff08\u4e91\u8ba1\u7b97\uff09':'\u4fe1\u8ba1', '\u5149\u7535\u4fe1\u606f\u79d1\u5b66\u4e0e\u5de5\u7a0b':'\u5149\u7535', '\u6570\u636e\u79d1\u5b66':'\u5927\u6570\u636e', '\u667a\u79d1\u79d1\u5b66':'\u667a\u79d1', '\u4fe1\u8ba1\u5b66\u957f':'\u4fe1\u8ba1', '\u4fe1\u8ba1\u5b66\u59d0':'\u4fe1\u8ba1', '\u7edf\u8ba1\u5b66':'\u7edf\u8ba1', '\u4fe1\u606f\u8ba1\u7b97\u4e0e\u79d1\u5b66':'\u4fe1\u8ba1', '\u4fe1\u8ba1\u4e0e\u8ba1\u7b97\u79d1\u5b66':'\u4fe1\u8ba1' } def replaces(clas): if clas in maps.keys(): return maps[clas] else: return clas data['class'] = data['class'].apply(replaces) res = pd.DataFrame() res['\u8d26\u53f7'] = '21aidc' + data['studentid'] res['\u59d3\u540d'] = data['name'] res['\u5bc6\u7801'] = res['\u8d26\u53f7'] res['\u4e13\u4e1a'] = data['class'] res.to_excel(\"result.xlsx\", index=False,encoding='utf-8')","title":"pandas\u5b9e\u8df51"},{"location":"pandas/task1/#pandas1","text":"\u5728\u8bfb\u53d6\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4fee\u6539\u4e86\u8868\u683c\u91cc\u9762\u7684\u8868\u5934\uff0c\u4ee5\u4fbf\u7a0b\u5e8f\u7684\u7f16\u5199\u3002 \u5148\u4ece excel \u8bfb\u53d6\u6570\u636e,\u7136\u540e\u770b\u770b shape \u4e86\u89e3\u884c\u6570\u5217\u6570,\u7136\u540e\u8c03\u7528 info \u65b9\u6cd5\uff0c \u770b\u770b\u6709\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u53d1\u73b0\u5e76\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u4f46\u9898\u76ee\u91cc\u8bf4\u4e86\u53ef\u80fd\u6709\u91cd\u590d\u6216\u8005\u683c\u5f0f \u4e0d\u5bf9\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u6700\u4e3b\u8981\u7684\u662f\u5b66\u53f7,\u4e00\u822c\u5b66\u53f7\u7684\u957f\u5ea6\u90fd\u662f 12 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u7b5b \u9009\u51fa\u4e0d\u662f 12 \u4f4d\u6570\u7684 data[data['studentid'].apply(lambda x:len(x)!=12)] \u8003\u8651\u5230\u53ef\u80fd\u51fa\u73b0\u4e2d\u6587\u7684\u60c5\u51b5\uff0c\u5148\u5c1d\u8bd5\u8f6c\u5316\u4e3a\u6574\u6570\u8bd5\u8bd5 data[\u2018studentid\u2019] = data[\u2018studentid\u2019].astype(\u201cint64\u201d) \u53d1\u73b0\u62a5\u9519\u4e86\uff0c\u7136\u540e\u5c31\u770b\u89c1\u4e86\u90a3\u4e2a\u5b66\u53f7\u662f\u2019\u5fd8\u8bb0\u4e86\u2019\u7684 \u6700\u540e\u4fee\u6539\u6210\u4e86 data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')] \u5c06\u8fd9\u4e9b\u6570\u636e\u5220\u9664 data = data.drop(data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')].index) \u8003\u8651\u5230\u6709\u91cd\u590d\uff0c\u91cd\u590d\u7684\u4e24\u4e2a\u56e0\u7d20\u5c31\u662f\u59d3\u540d\u548c\u5b66\u53f7\uff0c\u56e0\u6b64\u8fdb\u884c\u53bb\u91cd\u5904\u7406 data.drop_duplicates(subset=['name','studentid'],keep='first',inplace=Tru e) \u6b64\u5916\uff0c\u5bf9\u4e13\u4e1a\u7684\u5904\u7406\uff0c\u5c06\u65e0\u7528\u7684 xx-x \u53bb\u6389\u5373\u53ef\uff0c\u8fd9\u91cc\u8003\u8651\u5230\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f data['class'] = data['class'].apply(lambda s:re.sub(r\"[\\s*\\d*\\-*\\\u2014*\\ \uff0d *\\\u2013*\\/*]?\",'',s)) \u56e0\u4e3a\u5404\u79cd\u5404\u6837\u7684-\u8d1f\u53f7\u5343\u5947\u767e\u602a\uff0c\u6211\u53ea\u80fd\u4e00\u6b21\u6b21\u4fee\u6539\u540e\u7136\u540e\u7edf\u8ba1\u4e00\u4e0b\u5373\u8c03\u7528 data[\u2018class\u2019].value_counts() \u6709\u6ca1\u6709\u6ca1\u6709\u5904\u7406\u5230\u7684\uff0c\u7136\u540e\u628a\u90a3\u4e2a-\u7b26\u53f7\u52a0\u8fdb\u53bb \u8fd8\u53d1\u73b0\u4e86\u6709/\u53f7\u3002 \u6700\u540e\u5c31\u6210\u4e86\u90a3\u6837\uff0c\u5199\u5230\u8fd9\u91cc\u6211\u6709\u4e86\u66f4\u597d\u7684\u60f3\u6cd5\uff0c\u548c\u4e0b\u9762\u7684 \u67d0\u4e24\u4e2a\u4e2a\u4f8b\u6709\u5173\u7cfb\u3002 \u7136\u540e\u5c31\u662f\u90a3\u4e2a maps \u8868\uff0c\u90fd\u7b80\u5316\u4e3a\u7b80\u79f0\uff0c\u5bf9\u79f0\u547c\u8fdb\u884c\u7edf\u4e00\uff0c\u7528\u4e86 apply \u65b9 \u6cd5 \u518d\u7edf\u8ba1\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e24\u4e2a\u4e13\u4e1a\u540e\u9762\u5e26\u540d\u5b57\u7684\u5b66\u957f\u5b66\u59d0\uff0c\u56e0\u4e3a\u5c31\u4e24\u4e2a\uff0c\u5c31\u628a\u4ed6 \u4eec\u52a0\u5230 maps \u91cc\u9762\u4e86\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5224\u65ad\u540d\u5b57\u662f\u5426\u5728\u4e13\u4e1a\u91cc\u9762\uff0c\u5982\u679c\u5728\u5c31\u66ff\u6362 \u4e3a\u7a7a\u5427\u3002 \u4e4b\u540e\u5c31\u5dee\u4e0d\u591a\u53ef\u4ee5\u4e86\uff0c\u6570\u636e\u9884\u5904\u7406\u5b8c\u6bd5\uff0c\u6309\u7167\u8981\u6c42\u4fdd\u5b58\u5373\u53ef\u3002 #\u6570\u636e\u9884\u5904\u7406\u6587\u4ef6 import pandas as pd import re data = pd.read_excel(\"\u9644\u4ef61.xlsx\") #\u53bb\u9664\u9519\u8bef\u6570\u636e data = data.drop(data[data['studentid'].apply(lambda x:len(x)!=12 or x=='\u5fd8\u8bb0\u4e86')].index) #\u53bb\u91cd data.drop_duplicates(subset=['name','studentid'], keep='first', inplace=True) data['class'] = data['class'].apply(lambda s:re.sub(r\"[\\s*\\d*\\-*\\\u2014*\\\uff0d*\\\u2013*\\/*]?\", '', s)) maps = { '\u667a\u80fd\u79d1\u5b66':'\u667a\u79d1', '\u4e91\u8ba1\u7b97':'\u4e91\u8ba1', '\u5e94\u7528\u7edf\u8ba1\u5b66':'\u7edf\u8ba1', '\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66':'\u4fe1\u8ba1', '\u667a\u80fd\u79d1\u5b66\u4e0e\u6280\u672f':'\u667a\u79d1', '\u5e94\u7528\u7edf\u8ba1':'\u7edf\u8ba1', '\u8f6f\u4ef6\u5de5\u7a0b':'\u8f6f\u5de5', '\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66\uff08\u4e91\u8ba1\u7b97\uff09':'\u4fe1\u8ba1', '\u5149\u7535\u4fe1\u606f\u4e0e\u79d1\u5b66':'\u5149\u7535', '\u4fe1\u8ba1\uff08\u4e91\u8ba1\u7b97\uff09':'\u4fe1\u8ba1', '\u5149\u7535\u4fe1\u606f\u79d1\u5b66\u4e0e\u5de5\u7a0b':'\u5149\u7535', '\u6570\u636e\u79d1\u5b66':'\u5927\u6570\u636e', '\u667a\u79d1\u79d1\u5b66':'\u667a\u79d1', '\u4fe1\u8ba1\u5b66\u957f':'\u4fe1\u8ba1', '\u4fe1\u8ba1\u5b66\u59d0':'\u4fe1\u8ba1', '\u7edf\u8ba1\u5b66':'\u7edf\u8ba1', '\u4fe1\u606f\u8ba1\u7b97\u4e0e\u79d1\u5b66':'\u4fe1\u8ba1', '\u4fe1\u8ba1\u4e0e\u8ba1\u7b97\u79d1\u5b66':'\u4fe1\u8ba1' } def replaces(clas): if clas in maps.keys(): return maps[clas] else: return clas data['class'] = data['class'].apply(replaces) res = pd.DataFrame() res['\u8d26\u53f7'] = '21aidc' + data['studentid'] res['\u59d3\u540d'] = data['name'] res['\u5bc6\u7801'] = res['\u8d26\u53f7'] res['\u4e13\u4e1a'] = data['class'] res.to_excel(\"result.xlsx\", index=False,encoding='utf-8')","title":"pandas\u5b9e\u8df51"},{"location":"pandas/task2/","text":"age workclass fnlwgt education education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country salary 0 39 State-gov 77516 Bachelors 13 Never-married Adm-clerical Not-in-family White Male 2174 0 40 United-States <=50K 1 50 Self-emp-not-inc 83311 Bachelors 13 Married-civ-spouse Exec-managerial Husband White Male 0 0 13 United-States <=50K 2 38 Private 215646 HS-grad 9 Divorced Handlers-cleaners Not-in-family White Male 0 0 40 United-States <=50K 3 53 Private 234721 11th 7 Married-civ-spouse Handlers-cleaners Husband Black Male 0 0 40 United-States <=50K 4 28 Private 338409 Bachelors 13 Married-civ-spouse Prof-specialty Wife Black Female 0 0 40 Cuba <=50K \u6570\u636e\u96c6\u6709\u591a\u5c11\u7537\u6027\u548c\u5973\u6027\uff1f data['sex'].value_counts() Male 21790 Female 10771 Name: sex, dtype: int64 \u6570\u636e\u96c6\u5973\u6027\u7684\u5e73\u5747\u5e74\u9f84 data[data['sex'] == 'Female']['age'].mean() 36.85823043357163 \u6570\u636e\u96c6\u4e2d\u5fb7\u56fd\u516c\u6c11\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f data['native-country'].value_counts(normalize=True)['Germany'] 0.004207487485028101 \u5e74\u6536\u5165\u8d85\u8fc7 50K \u548c\u4f4e\u4e8e 50K \u4eba\u7fa4\u5e74\u9f84\u7684\u5e73\u5747\u503c\u548c\u6807\u51c6\u5dee\u662f\u591a\u5c11\uff1f salary1 = data[data['salary'] == '>50K']['age'] salary2 = data[data['salary'] == '<=50K']['age'] print(salary1.mean(),salary1.std()) print(salary2.mean(),salary2.std()) 44.24984058155847 10.51902771985177 36.78373786407767 14.020088490824813 \u5e74\u6536\u5165\u8d85\u8fc7 50K \u7684\u4eba\u7fa4\u662f\u5426\u90fd\u63a5\u53d7\u8fc7\u9ad8\u4e2d\u4ee5\u4e0a\u6559\u80b2\uff1f data[data['salary'] == \">50K\"]['education'].unique() array(['HS-grad', 'Masters', 'Bachelors', 'Some-college', 'Assoc-voc', 'Doctorate', 'Prof-school', 'Assoc-acdm', '7th-8th', '12th', '10th', '11th', '9th', '5th-6th', '1st-4th'], dtype=object) \u4f7f\u7528 groupby \u548c describe \u7edf\u8ba1\u4e0d\u540c\u79cd\u65cf\u548c\u6027\u522b\u4eba\u7fa4\u7684\u5e74\u9f84\u5206\u5e03\u6570\u636e\u3002 for (race,sex),mini_data in data.groupby(['race','sex']): print(race,sex) print(mini_data['age'].describe()) Amer-Indian-Eskimo Female count 119.000000 mean 37.117647 std 13.114991 min 17.000000 25% 27.000000 50% 36.000000 75% 46.000000 max 80.000000 Name: age, dtype: float64 Amer-Indian-Eskimo Male count 192.000000 mean 37.208333 std 12.049563 min 17.000000 25% 28.000000 50% 35.000000 75% 45.000000 max 82.000000 Name: age, dtype: float64 Asian-Pac-Islander Female count 346.000000 mean 35.089595 std 12.300845 min 17.000000 25% 25.000000 50% 33.000000 75% 43.750000 max 75.000000 Name: age, dtype: float64 Asian-Pac-Islander Male count 693.000000 mean 39.073593 std 12.883944 min 18.000000 25% 29.000000 50% 37.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Black Female count 1555.000000 mean 37.854019 std 12.637197 min 17.000000 25% 28.000000 50% 37.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Black Male count 1569.000000 mean 37.682600 std 12.882612 min 17.000000 25% 27.000000 50% 36.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Other Female count 109.000000 mean 31.678899 std 11.631599 min 17.000000 25% 23.000000 50% 29.000000 75% 39.000000 max 74.000000 Name: age, dtype: float64 Other Male count 162.000000 mean 34.654321 std 11.355531 min 17.000000 25% 26.000000 50% 32.000000 75% 42.000000 max 77.000000 Name: age, dtype: float64 White Female count 8642.000000 mean 36.811618 std 14.329093 min 17.000000 25% 25.000000 50% 35.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 White Male count 19174.000000 mean 39.652498 std 13.436029 min 17.000000 25% 29.000000 50% 38.000000 75% 49.000000 max 90.000000 Name: age, dtype: float64 \u7edf\u8ba1\u7537\u6027\u9ad8\u6536\u5165\u4eba\u7fa4\u4e2d\u5df2\u5a5a\u548c\u672a\u5a5a\uff08\u5305\u542b\u79bb\u5a5a\u548c\u5206\u5c45\uff09\u4eba\u7fa4\u5404\u81ea\u6240\u5360\u6570\u91cf\u3002 # \u672a\u5a5a data[(data['sex'] == 'Male') & (data['marital-status'].isin(['Never-married', 'Separated', 'Divorced']))]['salary'].value_counts() <=50K 7423 >50K 658 Name: salary, dtype: int64 # \u5df2\u5a5a data[(data['sex'] == 'Male') & (data['marital-status'].str.startswith('Married'))]['salary'].value_counts() <=50K 7576 >50K 5965 Name: salary, dtype: int64 \u8ba1\u7b97\u5404\u56fd\u8d85\u8fc7\u548c\u4f4e\u4e8e 50K \u4eba\u7fa4\u5404\u81ea\u7684\u5e73\u5747\u5468\u5de5\u4f5c\u65f6\u957f\u3002 for (country, salary), sub_df in data.groupby(['native-country', 'salary']): print(country, salary, round(sub_df['hours-per-week'].mean(), 2)) ? <=50K 40.16 ? >50K 45.55 Cambodia <=50K 41.42 Cambodia >50K 40.0 Canada <=50K 37.91 Canada >50K 45.64 China <=50K 37.38 China >50K 38.9 Columbia <=50K 38.68 Columbia >50K 50.0 Cuba <=50K 37.99 Cuba >50K 42.44 Dominican-Republic <=50K 42.34 Dominican-Republic >50K 47.0 Ecuador <=50K 38.04 Ecuador >50K 48.75 El-Salvador <=50K 36.03 El-Salvador >50K 45.0 England <=50K 40.48 England >50K 44.53 France <=50K 41.06 France >50K 50.75 Germany <=50K 39.14 Germany >50K 44.98 Greece <=50K 41.81 Greece >50K 50.62 Guatemala <=50K 39.36 Guatemala >50K 36.67 Haiti <=50K 36.33 Haiti >50K 42.75 Holand-Netherlands <=50K 40.0 Honduras <=50K 34.33 Honduras >50K 60.0 Hong <=50K 39.14 Hong >50K 45.0 Hungary <=50K 31.3 Hungary >50K 50.0 India <=50K 38.23 India >50K 46.48 Iran <=50K 41.44 Iran >50K 47.5 Ireland <=50K 40.95 Ireland >50K 48.0 Italy <=50K 39.62 Italy >50K 45.4 Jamaica <=50K 38.24 Jamaica >50K 41.1 Japan <=50K 41.0 Japan >50K 47.96 Laos <=50K 40.38 Laos >50K 40.0 Mexico <=50K 40.0 Mexico >50K 46.58 Nicaragua <=50K 36.09 Nicaragua >50K 37.5 Outlying-US(Guam-USVI-etc) <=50K 41.86 Peru <=50K 35.07 Peru >50K 40.0 Philippines <=50K 38.07 Philippines >50K 43.03 Poland <=50K 38.17 Poland >50K 39.0 Portugal <=50K 41.94 Portugal >50K 41.5 Puerto-Rico <=50K 38.47 Puerto-Rico >50K 39.42 Scotland <=50K 39.44 Scotland >50K 46.67 South <=50K 40.16 South >50K 51.44 Taiwan <=50K 33.77 Taiwan >50K 46.8 Thailand <=50K 42.87 Thailand >50K 58.33 Trinadad&Tobago <=50K 37.06 Trinadad&Tobago >50K 40.0 United-States <=50K 38.8 United-States >50K 45.51 Vietnam <=50K 37.19 Vietnam >50K 39.2 Yugoslavia <=50K 41.6 Yugoslavia >50K 49.5 # \u4ea4\u53c9\u8868 pd.crosstab(data['native-country'], data['salary'], values=data['hours-per-week'], aggfunc=np.mean) salary <=50K >50K native-country ? 40.164760 45.547945 Cambodia 41.416667 40.000000 Canada 37.914634 45.641026 China 37.381818 38.900000 Columbia 38.684211 50.000000 Cuba 37.985714 42.440000 Dominican-Republic 42.338235 47.000000 Ecuador 38.041667 48.750000 El-Salvador 36.030928 45.000000 England 40.483333 44.533333 France 41.058824 50.750000 Germany 39.139785 44.977273 Greece 41.809524 50.625000 Guatemala 39.360656 36.666667 Haiti 36.325000 42.750000 Holand-Netherlands 40.000000 NaN Honduras 34.333333 60.000000 Hong 39.142857 45.000000 Hungary 31.300000 50.000000 India 38.233333 46.475000 Iran 41.440000 47.500000 Ireland 40.947368 48.000000 Italy 39.625000 45.400000 Jamaica 38.239437 41.100000 Japan 41.000000 47.958333 Laos 40.375000 40.000000 Mexico 40.003279 46.575758 Nicaragua 36.093750 37.500000 Outlying-US(Guam-USVI-etc) 41.857143 NaN Peru 35.068966 40.000000 Philippines 38.065693 43.032787 Poland 38.166667 39.000000 Portugal 41.939394 41.500000 Puerto-Rico 38.470588 39.416667 Scotland 39.444444 46.666667 South 40.156250 51.437500 Taiwan 33.774194 46.800000 Thailand 42.866667 58.333333 Trinadad&Tobago 37.058824 40.000000 United-States 38.799127 45.505369 Vietnam 37.193548 39.200000 Yugoslavia 41.600000 49.500000","title":"pandas\u5b9e\u8df52"},{"location":"pandas/task2/#_1","text":"data['sex'].value_counts() Male 21790 Female 10771 Name: sex, dtype: int64","title":"\u6570\u636e\u96c6\u6709\u591a\u5c11\u7537\u6027\u548c\u5973\u6027\uff1f"},{"location":"pandas/task2/#_2","text":"data[data['sex'] == 'Female']['age'].mean() 36.85823043357163","title":"\u6570\u636e\u96c6\u5973\u6027\u7684\u5e73\u5747\u5e74\u9f84"},{"location":"pandas/task2/#_3","text":"data['native-country'].value_counts(normalize=True)['Germany'] 0.004207487485028101","title":"\u6570\u636e\u96c6\u4e2d\u5fb7\u56fd\u516c\u6c11\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f"},{"location":"pandas/task2/#50k-50k","text":"salary1 = data[data['salary'] == '>50K']['age'] salary2 = data[data['salary'] == '<=50K']['age'] print(salary1.mean(),salary1.std()) print(salary2.mean(),salary2.std()) 44.24984058155847 10.51902771985177 36.78373786407767 14.020088490824813","title":"\u5e74\u6536\u5165\u8d85\u8fc7 50K \u548c\u4f4e\u4e8e 50K \u4eba\u7fa4\u5e74\u9f84\u7684\u5e73\u5747\u503c\u548c\u6807\u51c6\u5dee\u662f\u591a\u5c11\uff1f"},{"location":"pandas/task2/#50k","text":"data[data['salary'] == \">50K\"]['education'].unique() array(['HS-grad', 'Masters', 'Bachelors', 'Some-college', 'Assoc-voc', 'Doctorate', 'Prof-school', 'Assoc-acdm', '7th-8th', '12th', '10th', '11th', '9th', '5th-6th', '1st-4th'], dtype=object)","title":"\u5e74\u6536\u5165\u8d85\u8fc7 50K \u7684\u4eba\u7fa4\u662f\u5426\u90fd\u63a5\u53d7\u8fc7\u9ad8\u4e2d\u4ee5\u4e0a\u6559\u80b2\uff1f"},{"location":"pandas/task2/#groupby-describe","text":"for (race,sex),mini_data in data.groupby(['race','sex']): print(race,sex) print(mini_data['age'].describe()) Amer-Indian-Eskimo Female count 119.000000 mean 37.117647 std 13.114991 min 17.000000 25% 27.000000 50% 36.000000 75% 46.000000 max 80.000000 Name: age, dtype: float64 Amer-Indian-Eskimo Male count 192.000000 mean 37.208333 std 12.049563 min 17.000000 25% 28.000000 50% 35.000000 75% 45.000000 max 82.000000 Name: age, dtype: float64 Asian-Pac-Islander Female count 346.000000 mean 35.089595 std 12.300845 min 17.000000 25% 25.000000 50% 33.000000 75% 43.750000 max 75.000000 Name: age, dtype: float64 Asian-Pac-Islander Male count 693.000000 mean 39.073593 std 12.883944 min 18.000000 25% 29.000000 50% 37.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Black Female count 1555.000000 mean 37.854019 std 12.637197 min 17.000000 25% 28.000000 50% 37.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Black Male count 1569.000000 mean 37.682600 std 12.882612 min 17.000000 25% 27.000000 50% 36.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 Other Female count 109.000000 mean 31.678899 std 11.631599 min 17.000000 25% 23.000000 50% 29.000000 75% 39.000000 max 74.000000 Name: age, dtype: float64 Other Male count 162.000000 mean 34.654321 std 11.355531 min 17.000000 25% 26.000000 50% 32.000000 75% 42.000000 max 77.000000 Name: age, dtype: float64 White Female count 8642.000000 mean 36.811618 std 14.329093 min 17.000000 25% 25.000000 50% 35.000000 75% 46.000000 max 90.000000 Name: age, dtype: float64 White Male count 19174.000000 mean 39.652498 std 13.436029 min 17.000000 25% 29.000000 50% 38.000000 75% 49.000000 max 90.000000 Name: age, dtype: float64","title":"\u4f7f\u7528 groupby \u548c describe \u7edf\u8ba1\u4e0d\u540c\u79cd\u65cf\u548c\u6027\u522b\u4eba\u7fa4\u7684\u5e74\u9f84\u5206\u5e03\u6570\u636e\u3002"},{"location":"pandas/task2/#_4","text":"# \u672a\u5a5a data[(data['sex'] == 'Male') & (data['marital-status'].isin(['Never-married', 'Separated', 'Divorced']))]['salary'].value_counts() <=50K 7423 >50K 658 Name: salary, dtype: int64 # \u5df2\u5a5a data[(data['sex'] == 'Male') & (data['marital-status'].str.startswith('Married'))]['salary'].value_counts() <=50K 7576 >50K 5965 Name: salary, dtype: int64","title":"\u7edf\u8ba1\u7537\u6027\u9ad8\u6536\u5165\u4eba\u7fa4\u4e2d\u5df2\u5a5a\u548c\u672a\u5a5a\uff08\u5305\u542b\u79bb\u5a5a\u548c\u5206\u5c45\uff09\u4eba\u7fa4\u5404\u81ea\u6240\u5360\u6570\u91cf\u3002"},{"location":"pandas/task2/#50k_1","text":"for (country, salary), sub_df in data.groupby(['native-country', 'salary']): print(country, salary, round(sub_df['hours-per-week'].mean(), 2)) ? <=50K 40.16 ? >50K 45.55 Cambodia <=50K 41.42 Cambodia >50K 40.0 Canada <=50K 37.91 Canada >50K 45.64 China <=50K 37.38 China >50K 38.9 Columbia <=50K 38.68 Columbia >50K 50.0 Cuba <=50K 37.99 Cuba >50K 42.44 Dominican-Republic <=50K 42.34 Dominican-Republic >50K 47.0 Ecuador <=50K 38.04 Ecuador >50K 48.75 El-Salvador <=50K 36.03 El-Salvador >50K 45.0 England <=50K 40.48 England >50K 44.53 France <=50K 41.06 France >50K 50.75 Germany <=50K 39.14 Germany >50K 44.98 Greece <=50K 41.81 Greece >50K 50.62 Guatemala <=50K 39.36 Guatemala >50K 36.67 Haiti <=50K 36.33 Haiti >50K 42.75 Holand-Netherlands <=50K 40.0 Honduras <=50K 34.33 Honduras >50K 60.0 Hong <=50K 39.14 Hong >50K 45.0 Hungary <=50K 31.3 Hungary >50K 50.0 India <=50K 38.23 India >50K 46.48 Iran <=50K 41.44 Iran >50K 47.5 Ireland <=50K 40.95 Ireland >50K 48.0 Italy <=50K 39.62 Italy >50K 45.4 Jamaica <=50K 38.24 Jamaica >50K 41.1 Japan <=50K 41.0 Japan >50K 47.96 Laos <=50K 40.38 Laos >50K 40.0 Mexico <=50K 40.0 Mexico >50K 46.58 Nicaragua <=50K 36.09 Nicaragua >50K 37.5 Outlying-US(Guam-USVI-etc) <=50K 41.86 Peru <=50K 35.07 Peru >50K 40.0 Philippines <=50K 38.07 Philippines >50K 43.03 Poland <=50K 38.17 Poland >50K 39.0 Portugal <=50K 41.94 Portugal >50K 41.5 Puerto-Rico <=50K 38.47 Puerto-Rico >50K 39.42 Scotland <=50K 39.44 Scotland >50K 46.67 South <=50K 40.16 South >50K 51.44 Taiwan <=50K 33.77 Taiwan >50K 46.8 Thailand <=50K 42.87 Thailand >50K 58.33 Trinadad&Tobago <=50K 37.06 Trinadad&Tobago >50K 40.0 United-States <=50K 38.8 United-States >50K 45.51 Vietnam <=50K 37.19 Vietnam >50K 39.2 Yugoslavia <=50K 41.6 Yugoslavia >50K 49.5 # \u4ea4\u53c9\u8868 pd.crosstab(data['native-country'], data['salary'], values=data['hours-per-week'], aggfunc=np.mean) salary <=50K >50K native-country ? 40.164760 45.547945 Cambodia 41.416667 40.000000 Canada 37.914634 45.641026 China 37.381818 38.900000 Columbia 38.684211 50.000000 Cuba 37.985714 42.440000 Dominican-Republic 42.338235 47.000000 Ecuador 38.041667 48.750000 El-Salvador 36.030928 45.000000 England 40.483333 44.533333 France 41.058824 50.750000 Germany 39.139785 44.977273 Greece 41.809524 50.625000 Guatemala 39.360656 36.666667 Haiti 36.325000 42.750000 Holand-Netherlands 40.000000 NaN Honduras 34.333333 60.000000 Hong 39.142857 45.000000 Hungary 31.300000 50.000000 India 38.233333 46.475000 Iran 41.440000 47.500000 Ireland 40.947368 48.000000 Italy 39.625000 45.400000 Jamaica 38.239437 41.100000 Japan 41.000000 47.958333 Laos 40.375000 40.000000 Mexico 40.003279 46.575758 Nicaragua 36.093750 37.500000 Outlying-US(Guam-USVI-etc) 41.857143 NaN Peru 35.068966 40.000000 Philippines 38.065693 43.032787 Poland 38.166667 39.000000 Portugal 41.939394 41.500000 Puerto-Rico 38.470588 39.416667 Scotland 39.444444 46.666667 South 40.156250 51.437500 Taiwan 33.774194 46.800000 Thailand 42.866667 58.333333 Trinadad&Tobago 37.058824 40.000000 United-States 38.799127 45.505369 Vietnam 37.193548 39.200000 Yugoslavia 41.600000 49.500000","title":"\u8ba1\u7b97\u5404\u56fd\u8d85\u8fc7\u548c\u4f4e\u4e8e 50K \u4eba\u7fa4\u5404\u81ea\u7684\u5e73\u5747\u5468\u5de5\u4f5c\u65f6\u957f\u3002"},{"location":"python/","text":"python\u662f\u6211\u9ad8\u4e2d\u81ea\u5b66\u7684\u8bed\u8a00\uff0c\u672c\u8eab\u5176\u5c31\u6bd4\u8f83\u7b80\u5355\u3002 \u6240\u4ee5\u7b80\u5355\u7684python\u57fa\u7840\u7c7b\u7684\u4e1c\u897f\u6211\u4e0d\u4f1a\u5199\u7684 \u6211\u53ea\u4f1a\u5199\u4e00\u4e9b\u6211\u76ee\u524d\u6b63\u5728\u5b66\u4e60\u7684python\u7684\u77e5\u8bc6\u5185\u5bb9 \u6bd4\u5982\u591a\u7ebf\u7a0b\uff0c\u722c\u866b\u6848\u4f8b\uff0c\u5404\u79cd\u5e93\u7b49\u7b49 Then,START!","title":"\u4ecb\u7ecd"},{"location":"python/#thenstart","text":"","title":"Then,START!"},{"location":"python/WTF/","text":"\u5fae\u5999\u7684\u5b57\u7b26\u4e32 a = 'some_thing' b = 'some'+'_'+'thing' id(a),id(b) (1957716471920, 1957716471920) a = 'wtf' b = 'wtf' a is b True a = 'wtf!' b = 'wtf!' a is b False a,b = 'wtf!','wtf!' a is b True 'a'*20 is 'aaaaaaaaaaaaaaaaaaaa','a'*21 is 'aaaaaaaaaaaaaaaaaaaaa' (True, False) Cpython \u5728\u7f16\u8bd1\u4f18\u5316\u65f6, \u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u6210\u4e3a\u5b57\u7b26\u4e32\u9a7b\u7559 \u53d1\u751f\u9a7b\u7559\u4e4b\u540e, \u8bb8\u591a\u53d8\u91cf\u53ef\u80fd\u6307\u5411\u5185\u5b58\u4e2d\u7684\u76f8\u540c\u5b57\u7b26\u4e32\u5bf9\u8c61 \u6240\u6709\u957f\u5ea6\u4e3a 0 \u548c\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u90fd\u88ab\u9a7b\u7559. \u5b57\u7b26\u4e32\u5728\u7f16\u8bd1\u65f6\u88ab\u5b9e\u73b0 ('wtf' \u5c06\u88ab\u9a7b\u7559, \u4f46\u662f ''.join(['w', 't', 'f'] \u5c06\u4e0d\u4f1a\u88ab\u9a7b\u7559) \u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u65f6\u5c06\u4f1a\u9a7b\u7559. \u6240\u4ee5 'wtf!' \u7531\u4e8e\u5305\u542b ! \u800c\u672a\u88ab\u9a7b\u7559\u3002 \u5f53\u5728\u540c\u4e00\u884c\u5c06 a \u548c b \u7684\u503c\u8bbe\u7f6e\u4e3a \"wtf!\" \u7684\u65f6\u5019, Python \u89e3\u91ca\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61, \u7136\u540e\u540c\u65f6\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf. \u5e38\u91cf\u6298\u53e0(constant folding) \u662f Python \u4e2d\u7684\u4e00\u79cd \u7aa5\u5b54\u4f18\u5316(peephole optimization) \u6280\u672f. \u8fd9\u610f\u5473\u7740\u5728\u7f16\u8bd1\u65f6\u8868\u8fbe\u5f0f 'a'*20 \u4f1a\u88ab\u66ff\u6362\u4e3a 'aaaaaaaaaaaaaaaaaaaa' \u4ee5\u51cf\u5c11\u8fd0\u884c\u65f6\u7684\u65f6\u949f\u5468\u671f. \u53ea\u6709\u957f\u5ea6\u5c0f\u4e8e 20 \u7684\u5b57\u7b26\u4e32\u624d\u4f1a\u53d1\u751f\u5e38\u91cf\u6298\u53e0. a = 1 b = 1 a is b,id(a) == id(b) (True, True) is \u662f\u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u540c(is \u8868\u793a\u5bf9\u8c61\u6807\u8bc6\u7b26\u5373 object identity)\uff0c\u5373\u7528 id() \u51fd\u6570\u67e5\u770b\u7684\u5730\u5740\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\u5219\u8fd4\u56de True\uff0c\u5982\u679c\u4e0d\u540c\u5219\u8fd4\u56de False\u3002is \u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 == \u662f\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u6b64\u64cd\u4f5c\u7b26\u5185\u90e8\u8c03\u7528\u7684\u662f eq _() \u65b9\u6cd5\u3002\u6240\u4ee5 a==b \u7b49\u6548\u4e8ea. _eq__(b)\uff0c\u6240\u4ee5 = \u53ef\u4ee5\u88ab\u91cd\u8f7d \u662f\u65f6\u5019\u6765\u70b9\u86cb\u7cd5\u4e86! some_dict = {} some_dict[5.5] = 'ruby' some_dict[5.0] = 'javascript' some_dict[5] = 'python' print(some_dict[5.0]) python 5 == 5.0,hash(5) == hash(5.0) (True, True) Python \u5b57\u5178\u901a\u8fc7\u68c0\u67e5\u952e\u503c\u662f\u5426\u76f8\u7b49\u548c\u6bd4\u8f83\u54c8\u5e0c\u503c\u6765\u786e\u5b9a\u4e24\u4e2a\u952e\u662f\u5426\u76f8\u540c. \u5177\u6709\u76f8\u540c\u503c\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u5728Python\u4e2d\u59cb\u7ec8\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c \u672c\u8d28\u4e0a,\u6211\u4eec\u90fd\u4e00\u6837 class WTF: pass print(WTF() == WTF(),WTF() is WTF()) print(hash(WTF()) == hash(WTF())) print(id(WTF()) == id(WTF())) False False True True \u5f53\u8c03\u7528 id \u51fd\u6570\u65f6, Python \u521b\u5efa\u4e86\u4e00\u4e2a WTF \u7c7b\u7684\u5bf9\u8c61\u5e76\u4f20\u7ed9 id \u51fd\u6570. \u7136\u540e id \u51fd\u6570\u83b7\u53d6\u5176id\u503c (\u4e5f\u5c31\u662f\u5185\u5b58\u5730\u5740), \u7136\u540e\u4e22\u5f03\u8be5\u5bf9\u8c61. \u8be5\u5bf9\u8c61\u5c31\u88ab\u9500\u6bc1\u4e86. \u5f53\u6211\u4eec\u8fde\u7eed\u4e24\u6b21\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6, Python\u4f1a\u5c06\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740\u5206\u914d\u7ed9\u7b2c\u4e8c\u4e2a\u5bf9\u8c61. \u56e0\u4e3a (\u5728CPython\u4e2d) id \u51fd\u6570\u4f7f\u7528\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f5c\u4e3a\u5bf9\u8c61\u7684id\u503c, \u6240\u4ee5\u4e24\u4e2a\u5bf9\u8c61\u7684id\u503c\u662f\u76f8\u540c\u7684. print(id(id(WTF())) == id(id(WTF()))) #\u65e0\u8bba\u591a\u5c11\u4e2aID\u90fd\u662fTrue \u539f\u56e0\u5c31\u5728\u4e0a\u9762 #\u867d\u7136id(id(WTF())) == id(id(WTF())) \u4f46\u662fid(WTF()) is id(WTF()) \u8fd4\u56deTrue #\u539f\u56e0\u5c31\u662fid\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u7279\u6b8a\u6027 print(id(WTF()) is id(WTF())) True False class WTF(object): def __init__(self): print(\"I\") def __del__(self): print(\"D\") WTF() is WTF() #\u8fd9\u65f6\u662f\u4e24\u4e2a\u5bf9\u8c61\u4e00\u8d77\u521b\u5efa\uff0c\u7136\u540e\u4e00\u8d77\u9500\u6bc1\uff0c\u6240\u4ee5id\u4e0d\u4e00\u6837 I I D D False id(WTF()) == id(WTF()) #\u8fd9\u65f6\u5019\u5148\u521b\u5efa\u4e00\u4e2a\u9500\u6bc1\uff0c\u7136\u540e\u518d\u521b\u5efa\u3002\u5bf9\u8c61\u9500\u6bc1\u7684\u987a\u5e8f\u662f\u9020\u6210\u6240\u6709\u4e0d\u540c\u4e4b\u5904\u7684\u539f\u56e0. I D I D True \u4e3a\u4ec0\u4e48\uff1f some_string = \"wtf\" some_dict = {} for i, some_dict[i] in enumerate(some_string): pass some_dict Python \u8bed\u6cd5 \u4e2d\u5bf9 for \u7684\u5b9a\u4e49\u662f: {0: 'w', 1: 't', 2: 'f'} for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] \u5176\u4e2d exprlist \u6307\u5206\u914d\u76ee\u6807. \u8fd9\u610f\u5473\u7740\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684 \u6bcf\u4e00\u9879\u90fd\u4f1a\u6267\u884c \u7c7b\u4f3c {exprlist} = {next_value} \u7684\u64cd\u4f5c. for i in range(4): print(i) i = 10 0 1 2 3 \u5217\u8868\u526f\u672c list1 = [1,2,3,4,5] list2 = list1 list2[0] = 6 print(list1,list2) [6, 2, 3, 4, 5] [6, 2, 3, 4, 5] list1 = [1,2,3,4,5] list2 = list1[:] list2[0] = 6 print(list1,list2) [1, 2, 3, 4, 5] [6, 2, 3, 4, 5] \u6267\u884c\u65f6\u673a\u5dee\u5f02 array = [1, 8, 15] g = (x for x in array if array.count(x) > 0) #\u8fd9\u65f6\u5019x\u4e3a[1,8,15]\u7684\u89e3\u5305 #\u800c\u540e\u9762\u7684array\u53d8\u6210\u4e86\u4e0b\u9762\u7684 array = [2, 8, 22] print(list(g)) [8] \u5728\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d, in \u5b50\u53e5\u5728\u58f0\u660e\u65f6\u6267\u884c, \u800c\u6761\u4ef6\u5b50\u53e5\u5219\u662f\u5728\u8fd0\u884c\u65f6\u6267\u884c. \u6240\u4ee5\u5728\u8fd0\u884c\u524d, array \u5df2\u7ecf\u88ab\u91cd\u65b0\u8d4b\u503c\u4e3a [2, 8, 22], \u56e0\u6b64\u5bf9\u4e8e\u4e4b\u524d\u7684 1, 8 \u548c 15, \u53ea\u6709 count(8) \u7684\u7ed3\u679c\u662f\u5927\u4e8e 0 \u7684, \u6240\u4ee5\u751f\u6210\u5668\u53ea\u4f1a\u751f\u6210 8. array_1 = [1,2,3,4] g1 = (x for x in array_1) array_1 = [1,2,3,4,5] array_2 = [1,2,3,4] g2 = (x for x in array_2) array_2[:] = [1,2,3,4,5] print(list(g1)) print(list(g2)) [1, 2, 3, 4] [1, 2, 3, 4, 5] \u7b2c\u4e8c\u90e8\u5206\u4e2d g1 \u548c g2 \u7684\u8f93\u51fa\u5dee\u5f02\u5219\u662f\u7531\u4e8e\u53d8\u91cf array_1 \u548c array_2 \u88ab\u91cd\u65b0\u8d4b\u503c\u7684\u65b9\u5f0f\u5bfc\u81f4\u7684. \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b, array_1 \u88ab\u7ed1\u5b9a\u5230\u65b0\u5bf9\u8c61 [1,2,3,4,5], \u56e0\u4e3a in \u5b50\u53e5\u662f\u5728\u58f0\u660e\u65f6\u88ab\u6267\u884c\u7684\uff0c \u6240\u4ee5\u5b83\u4ecd\u7136\u5f15\u7528\u65e7\u5bf9\u8c61 1,2,3,4 . \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b, \u5bf9 array_2 \u7684\u5207\u7247\u8d4b\u503c\u5c06\u76f8\u540c\u7684\u65e7\u5bf9\u8c61 [1,2,3,4] \u539f\u5730\u66f4\u65b0\u4e3a [1,2,3,4,5]. \u56e0\u6b64 g2 \u548c array_2 \u4ecd\u7136\u5f15\u7528\u540c\u4e00\u4e2a\u5bf9\u8c61(\u8fd9\u4e2a\u5bf9\u8c61\u73b0\u5728\u5df2\u7ecf\u66f4\u65b0\u4e3a [1,2,3,4,5]). \u51fa\u4eba\u610f\u6599\u7684is a = 256 b = 256 a is b True a = 257 b = 257 #256 \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61, \u800c 257 \u4e0d\u662f #\u5f53\u4f60\u542f\u52a8Python \u7684\u65f6\u5019, -5 \u5230 256 \u7684\u6570\u503c\u5c31\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86. #\u8fd9\u4e9b\u6570\u5b57\u56e0\u4e3a\u7ecf\u5e38\u4f7f\u7528\u6240\u4ee5\u9002\u5408\u88ab\u63d0\u524d\u51c6\u5907\u597d a is b False a,b = 257,257 #\u5f53 a \u548c b \u5728\u540c\u4e00\u884c\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u503c\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61. print(a is b) print(id(a),id(b)) True 1957717387056 1957717387056 [] == [] True [] is [] #\u4e24\u4e2a\u7a7a\u5217\u8868\u4f4d\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740 False \u4e00\u8e74\u5373\u81f3! row = [\"\"] * 3 board = [row] * 3 board [['', '', ''], ['', '', ''], ['', '', '']] board[0][0] = 'X' board #\u8fd9\u662f\u56e0\u4e3a\u4e4b\u524d\u5bf9row\u505a\u4e58\u6cd5\u5bfc\u81f4\u7684 [['X', '', ''], ['X', '', ''], ['X', '', '']] #\u5982\u4f55\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff1f board = [['']*3 for _ in range(3)] board[0][0] = 'X' board [['X', '', ''], ['', '', ''], ['', '', '']] \u9ebb\u70e6\u7684\u8f93\u51fa funcs = [] res = [] for x in range(7): def func(): return x funcs.append(func) res.append(func()) func_res = [func() for func in funcs] print(func_res,res) [6, 6, 6, 6, 6, 6, 6] [0, 1, 2, 3, 4, 5, 6] power_x = [lambda x:x**i for i in range(11)] print([func(2) for func in power_x]) [1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024] \u5728\u5faa\u73af\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6, \u5982\u679c\u8be5\u51fd\u6570\u5728\u5176\u4e3b\u4f53\u4e2d\u4f7f\u7528\u4e86\u5faa\u73af\u53d8\u91cf, \u5219\u95ed\u5305\u51fd\u6570\u5c06\u4e0e\u5faa\u73af\u53d8\u91cf\u7ed1\u5b9a, \u800c\u4e0d\u662f\u5b83\u7684\u503c. \u56e0\u6b64, \u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u4f7f\u7528\u6700\u540e\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684. \u8fdePython\u4e5f\u77e5\u9053\u7231\u662f\u96be\u8a00\u7684 import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! love = this this is love True love is True False love is False False love is not True or False True love is not True or False;love is love True \u4e09\u4e2a\u5f15\u53f7 print('wtfpython''') wtfpython print(\"wtf\" \"python\") wtfpython \u5e03\u5c14\u4f60\u548b\u4e86? mixed_list = [False, 1.0, \"some_string\", 3, True, [], False] integers_found_so_far = 0 booleans_found_so_far = 0 for item in mixed_list: if isinstance(item, int): integers_found_so_far += 1 elif isinstance(item, bool): booleans_found_so_far += 1 integers_found_so_far 4 booleans_found_so_far 0 another_dict = {} another_dict[True] = \"JavaScript\" another_dict[1] = \"Ruby\" another_dict[1.0] = \"Python\" another_dict[True] 'Python' \u5e03\u5c14\u503c\u662f int \u7684\u5b50\u7c7b some_iterable = ('a', 'b') def some_func(val): return \"something\" [x for x in some_iterable] ['a', 'b'] [(yield x) for x in some_iterable] <generator object <listcomp> at 0x000001CC6FFC3888> list([(yield x) for x in some_iterable]) ['a', 'b'] list(((yield x) for x in some_iterable)) ['a', None, 'b', None] list(some_func((yield x)) for x in some_iterable) ['a', 'something', 'b', 'something'] \u6d88\u5931\u7684\u5916\u90e8\u53d8\u91cf e = 7 try: raise Exception() except Exception as e: pass print(e) #error! \u4ece\u6709\u5230\u65e0 some_list = [1, 2, 3] some_dict = { \"key_1\": 1, \"key_2\": 2, \"key_3\": 3 } some_list = some_list.append(4) some_dict = some_dict.update({\"key_4\": 4}) some_list some_dict \u5927\u591a\u6570\u4fee\u6539\u5e8f\u5217/\u6620\u5c04\u5bf9\u8c61\u7684\u65b9\u6cd5, \u6bd4\u5982 list.append, dict.update, list.sort \u7b49\u7b49. \u90fd\u662f\u539f\u5730\u4fee\u6539\u5bf9\u8c61\u5e76\u8fd4\u56de None. \u8fd9\u6837\u505a\u7684\u7406\u7531\u662f, \u5982\u679c\u64cd\u4f5c\u53ef\u4ee5\u539f\u5730\u5b8c\u6210, \u5c31\u53ef\u4ee5\u907f\u514d\u521b\u5efa\u5bf9\u8c61\u7684\u526f\u672c\u6765\u63d0\u9ad8\u6027\u80fd. \u8fed\u4ee3\u5217\u8868\u65f6\u5220\u9664\u5143\u7d20 list_1 = [1, 2, 3, 4] list_2 = [1, 2, 3, 4] list_3 = [1, 2, 3, 4] list_4 = [1, 2, 3, 4] for idx, item in enumerate(list_1): del item for idx, item in enumerate(list_2): list_2.remove(item) for idx, item in enumerate(list_3[:]): list_3.remove(item) for idx, item in enumerate(list_4): list_4.pop(idx) list_1 #\u6ca1\u6709\u4fee\u6539list_1 [1, 2, 3, 4] list_2 #\u6bcf\u4e00\u6b21\u5220\u9664\u5143\u7d20\u540e \u8fed\u4ee3\u7684list_2\u4e5f\u53d1\u751f\u6539\u53d8 \u6bd4\u5982\u7b2c\u4e00\u6b21\u5220\u9664\u4e861 list_2\u4e3a[2,3,4]\u8fd9\u65f6idx=1 \u6240\u4ee5\u4e0b\u4e00\u4e2a\u5220\u9664\u4e863 [2, 4] list_3 #\u8fed\u4ee3\u526f\u672c\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u60c5\u51b5 [] list_4 [2, 4] \u5faa\u73af\u53d8\u91cf\u6cc4\u9732 for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') 6 : for x inside loop 6 : x in global # \u8fd9\u6b21\u6211\u4eec\u5148\u521d\u59cb\u5316x x = -1 for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') 6 : for x inside loop 6 : x in global x = 1 print([x for x in range(5)]) print(x, ': x in global') [0, 1, 2, 3, 4] 1 : x in global \u5f53\u5fc3\u9ed8\u8ba4\u7684\u53ef\u53d8\u53c2\u6570 def some_func(default_arg=[]): default_arg.append(\"some_string\") return default_arg some_func() ['some_string'] some_func() ['some_string', 'some_string'] some_func([]) ['some_string'] some_func() ['some_string', 'some_string', 'some_string'] Python\u4e2d\u51fd\u6570\u7684\u9ed8\u8ba4\u53ef\u53d8\u53c2\u6570\u5e76\u4e0d\u662f\u6bcf\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u90fd\u4f1a\u88ab\u521d\u59cb\u5316. \u76f8\u53cd, \u5b83\u4eec\u4f1a\u4f7f\u7528\u6700\u8fd1\u5206\u914d\u7684\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u503c. \u5f53\u6211\u4eec\u660e\u786e\u7684\u5c06 [] \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 some_func \u7684\u65f6\u5019, \u5c31\u4e0d\u4f1a\u4f7f\u7528 default_arg \u7684\u9ed8\u8ba4\u503c, \u6240\u4ee5\u51fd\u6570\u4f1a\u8fd4\u56de\u6211\u4eec\u6240\u671f\u671b\u7684\u7ed3\u679c. some_func.__defaults__ (['some_string', 'some_string', 'some_string'],) \u907f\u514d\u53ef\u53d8\u53c2\u6570\u5bfc\u81f4\u7684\u9519\u8bef\u7684\u5e38\u89c1\u505a\u6cd5\u662f\u5c06 None \u6307\u5b9a\u4e3a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c, \u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u503c\u4f20\u7ed9\u5bf9\u5e94\u7684\u53c2\u6570. \u4f8b: def some_func(default_arg=None): if not default_arg: default_arg = [] default_arg.append(\"some_string\") return default_arg \u540c\u4eba\u4e0d\u540c\u547d a = [1, 2, 3, 4] b = a a = a + [5, 6, 7, 8] a [1, 2, 3, 4, 5, 6, 7, 8] b [1, 2, 3, 4] a = [1, 2, 3, 4] b = a a += [5, 6, 7, 8] a [1, 2, 3, 4, 5, 6, 7, 8] b [1, 2, 3, 4, 5, 6, 7, 8] a += b \u5e76\u4e0d\u603b\u662f\u4e0e a = a + b \u8868\u73b0\u76f8\u540c. \u7c7b\u5b9e\u73b0 op= \u8fd0\u7b97\u7b26\u7684\u65b9\u5f0f \u4e5f\u8bb8 \u662f\u4e0d\u540c\u7684, \u5217\u8868\u5c31\u662f\u8fd9\u6837\u505a\u7684. \u8868\u8fbe\u5f0f a = a + [5,6,7,8] \u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u5217\u8868, \u5e76\u8ba9 a \u5f15\u7528\u8fd9\u4e2a\u65b0\u5217\u8868, \u540c\u65f6\u4fdd\u6301 b \u4e0d\u53d8. \u8868\u8fbe\u5f0f a += [5,6,7,8] \u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u7684\u662f \"extend\" \u51fd\u6570, \u6240\u4ee5 a \u548c b \u4ecd\u7136\u6307\u5411\u5df2\u88ab\u4fee\u6539\u7684\u540c\u4e00\u5217\u8868. a_var = 'global variable' def a_func(): print(a_var, '[ a_var inside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') global variable [ a_var inside a_func() ] global variable [ a_var outside a_func() ] a_var = 'global value' def a_func(): a_var = 'local value' print(a_var, '[ a_var inside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') local value [ a_var inside a_func() ] global value [ a_var outside a_func() ] a_var = 'global value' def a_func(): global a_var a_var = 'local value' print(a_var, '[ a_var inside a_func() ]') print(a_var, '[ a_var outside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') global value [ a_var outside a_func() ] local value [ a_var inside a_func() ] local value [ a_var outside a_func() ] a_var = 'global value' def outer(): a_var = 'enclosed value' def inner(): a_var = 'local value' print(a_var) inner() outer() local value a_var = 'global variable' def len(in_var): print('called my len() function') l = 0 for i in in_var: l += 1 return l def a_func(in_var): len_in_var = len(in_var) print('Input variable is of length', len_in_var) a_func('Hello, World!') called my len() function Input variable is of length 13 a = 'global' def outer(): def len(in_var): print('called my len() function: ', end=\"\") l = 0 for i in in_var: l += 1 return l a = 'local' def inner(): global len nonlocal a a += ' variable' inner() print('a is', a) print(len(a)) outer() print(len(a)) print('a is', a) a is local variable called my len() function: 14 called my len() function 6 a is global \u5927\u6d77\u635e\u9488 x, y = (0, 1) if True else None, None x,y ((0, 1), None) #\u6b63\u786e\u505a\u6cd5 x,y = (0,1) if True else (None,None) x,y (0, 1) t = ('one', 'two') for i in t: print(i) t = ('one') for i in t: print(i) t = () print(t) one two o n e () #\u660e\u663e\u4e0a\u9762\u7684\u628at = ('one') t\u5f53\u6210\u5b57\u7b26\u4e32\u4e86\uff0c\u6b63\u786e\u505a\u6cd5\u5982\u4e0b t = ('one',) #\u6ce8\u610f\u9017\u53f7 for i in t: print(i) one","title":"WTFpython\u5b66\u4e60"},{"location":"python/WTF/#_1","text":"a = 'some_thing' b = 'some'+'_'+'thing' id(a),id(b) (1957716471920, 1957716471920) a = 'wtf' b = 'wtf' a is b True a = 'wtf!' b = 'wtf!' a is b False a,b = 'wtf!','wtf!' a is b True 'a'*20 is 'aaaaaaaaaaaaaaaaaaaa','a'*21 is 'aaaaaaaaaaaaaaaaaaaaa' (True, False) Cpython \u5728\u7f16\u8bd1\u4f18\u5316\u65f6, \u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u6210\u4e3a\u5b57\u7b26\u4e32\u9a7b\u7559 \u53d1\u751f\u9a7b\u7559\u4e4b\u540e, \u8bb8\u591a\u53d8\u91cf\u53ef\u80fd\u6307\u5411\u5185\u5b58\u4e2d\u7684\u76f8\u540c\u5b57\u7b26\u4e32\u5bf9\u8c61 \u6240\u6709\u957f\u5ea6\u4e3a 0 \u548c\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u90fd\u88ab\u9a7b\u7559. \u5b57\u7b26\u4e32\u5728\u7f16\u8bd1\u65f6\u88ab\u5b9e\u73b0 ('wtf' \u5c06\u88ab\u9a7b\u7559, \u4f46\u662f ''.join(['w', 't', 'f'] \u5c06\u4e0d\u4f1a\u88ab\u9a7b\u7559) \u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u65f6\u5c06\u4f1a\u9a7b\u7559. \u6240\u4ee5 'wtf!' \u7531\u4e8e\u5305\u542b ! \u800c\u672a\u88ab\u9a7b\u7559\u3002 \u5f53\u5728\u540c\u4e00\u884c\u5c06 a \u548c b \u7684\u503c\u8bbe\u7f6e\u4e3a \"wtf!\" \u7684\u65f6\u5019, Python \u89e3\u91ca\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61, \u7136\u540e\u540c\u65f6\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf. \u5e38\u91cf\u6298\u53e0(constant folding) \u662f Python \u4e2d\u7684\u4e00\u79cd \u7aa5\u5b54\u4f18\u5316(peephole optimization) \u6280\u672f. \u8fd9\u610f\u5473\u7740\u5728\u7f16\u8bd1\u65f6\u8868\u8fbe\u5f0f 'a'*20 \u4f1a\u88ab\u66ff\u6362\u4e3a 'aaaaaaaaaaaaaaaaaaaa' \u4ee5\u51cf\u5c11\u8fd0\u884c\u65f6\u7684\u65f6\u949f\u5468\u671f. \u53ea\u6709\u957f\u5ea6\u5c0f\u4e8e 20 \u7684\u5b57\u7b26\u4e32\u624d\u4f1a\u53d1\u751f\u5e38\u91cf\u6298\u53e0. a = 1 b = 1 a is b,id(a) == id(b) (True, True) is \u662f\u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u540c(is \u8868\u793a\u5bf9\u8c61\u6807\u8bc6\u7b26\u5373 object identity)\uff0c\u5373\u7528 id() \u51fd\u6570\u67e5\u770b\u7684\u5730\u5740\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\u5219\u8fd4\u56de True\uff0c\u5982\u679c\u4e0d\u540c\u5219\u8fd4\u56de False\u3002is \u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 == \u662f\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u6b64\u64cd\u4f5c\u7b26\u5185\u90e8\u8c03\u7528\u7684\u662f eq _() \u65b9\u6cd5\u3002\u6240\u4ee5 a==b \u7b49\u6548\u4e8ea. _eq__(b)\uff0c\u6240\u4ee5 = \u53ef\u4ee5\u88ab\u91cd\u8f7d","title":"\u5fae\u5999\u7684\u5b57\u7b26\u4e32"},{"location":"python/WTF/#_2","text":"some_dict = {} some_dict[5.5] = 'ruby' some_dict[5.0] = 'javascript' some_dict[5] = 'python' print(some_dict[5.0]) python 5 == 5.0,hash(5) == hash(5.0) (True, True) Python \u5b57\u5178\u901a\u8fc7\u68c0\u67e5\u952e\u503c\u662f\u5426\u76f8\u7b49\u548c\u6bd4\u8f83\u54c8\u5e0c\u503c\u6765\u786e\u5b9a\u4e24\u4e2a\u952e\u662f\u5426\u76f8\u540c. \u5177\u6709\u76f8\u540c\u503c\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u5728Python\u4e2d\u59cb\u7ec8\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c","title":"\u662f\u65f6\u5019\u6765\u70b9\u86cb\u7cd5\u4e86!"},{"location":"python/WTF/#_3","text":"class WTF: pass print(WTF() == WTF(),WTF() is WTF()) print(hash(WTF()) == hash(WTF())) print(id(WTF()) == id(WTF())) False False True True \u5f53\u8c03\u7528 id \u51fd\u6570\u65f6, Python \u521b\u5efa\u4e86\u4e00\u4e2a WTF \u7c7b\u7684\u5bf9\u8c61\u5e76\u4f20\u7ed9 id \u51fd\u6570. \u7136\u540e id \u51fd\u6570\u83b7\u53d6\u5176id\u503c (\u4e5f\u5c31\u662f\u5185\u5b58\u5730\u5740), \u7136\u540e\u4e22\u5f03\u8be5\u5bf9\u8c61. \u8be5\u5bf9\u8c61\u5c31\u88ab\u9500\u6bc1\u4e86. \u5f53\u6211\u4eec\u8fde\u7eed\u4e24\u6b21\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6, Python\u4f1a\u5c06\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740\u5206\u914d\u7ed9\u7b2c\u4e8c\u4e2a\u5bf9\u8c61. \u56e0\u4e3a (\u5728CPython\u4e2d) id \u51fd\u6570\u4f7f\u7528\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f5c\u4e3a\u5bf9\u8c61\u7684id\u503c, \u6240\u4ee5\u4e24\u4e2a\u5bf9\u8c61\u7684id\u503c\u662f\u76f8\u540c\u7684. print(id(id(WTF())) == id(id(WTF()))) #\u65e0\u8bba\u591a\u5c11\u4e2aID\u90fd\u662fTrue \u539f\u56e0\u5c31\u5728\u4e0a\u9762 #\u867d\u7136id(id(WTF())) == id(id(WTF())) \u4f46\u662fid(WTF()) is id(WTF()) \u8fd4\u56deTrue #\u539f\u56e0\u5c31\u662fid\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u7279\u6b8a\u6027 print(id(WTF()) is id(WTF())) True False class WTF(object): def __init__(self): print(\"I\") def __del__(self): print(\"D\") WTF() is WTF() #\u8fd9\u65f6\u662f\u4e24\u4e2a\u5bf9\u8c61\u4e00\u8d77\u521b\u5efa\uff0c\u7136\u540e\u4e00\u8d77\u9500\u6bc1\uff0c\u6240\u4ee5id\u4e0d\u4e00\u6837 I I D D False id(WTF()) == id(WTF()) #\u8fd9\u65f6\u5019\u5148\u521b\u5efa\u4e00\u4e2a\u9500\u6bc1\uff0c\u7136\u540e\u518d\u521b\u5efa\u3002\u5bf9\u8c61\u9500\u6bc1\u7684\u987a\u5e8f\u662f\u9020\u6210\u6240\u6709\u4e0d\u540c\u4e4b\u5904\u7684\u539f\u56e0. I D I D True","title":"\u672c\u8d28\u4e0a,\u6211\u4eec\u90fd\u4e00\u6837"},{"location":"python/WTF/#_4","text":"some_string = \"wtf\" some_dict = {} for i, some_dict[i] in enumerate(some_string): pass some_dict Python \u8bed\u6cd5 \u4e2d\u5bf9 for \u7684\u5b9a\u4e49\u662f: {0: 'w', 1: 't', 2: 'f'} for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] \u5176\u4e2d exprlist \u6307\u5206\u914d\u76ee\u6807. \u8fd9\u610f\u5473\u7740\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684 \u6bcf\u4e00\u9879\u90fd\u4f1a\u6267\u884c \u7c7b\u4f3c {exprlist} = {next_value} \u7684\u64cd\u4f5c. for i in range(4): print(i) i = 10 0 1 2 3","title":"\u4e3a\u4ec0\u4e48\uff1f"},{"location":"python/WTF/#_5","text":"list1 = [1,2,3,4,5] list2 = list1 list2[0] = 6 print(list1,list2) [6, 2, 3, 4, 5] [6, 2, 3, 4, 5] list1 = [1,2,3,4,5] list2 = list1[:] list2[0] = 6 print(list1,list2) [1, 2, 3, 4, 5] [6, 2, 3, 4, 5]","title":"\u5217\u8868\u526f\u672c"},{"location":"python/WTF/#_6","text":"array = [1, 8, 15] g = (x for x in array if array.count(x) > 0) #\u8fd9\u65f6\u5019x\u4e3a[1,8,15]\u7684\u89e3\u5305 #\u800c\u540e\u9762\u7684array\u53d8\u6210\u4e86\u4e0b\u9762\u7684 array = [2, 8, 22] print(list(g)) [8] \u5728\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d, in \u5b50\u53e5\u5728\u58f0\u660e\u65f6\u6267\u884c, \u800c\u6761\u4ef6\u5b50\u53e5\u5219\u662f\u5728\u8fd0\u884c\u65f6\u6267\u884c. \u6240\u4ee5\u5728\u8fd0\u884c\u524d, array \u5df2\u7ecf\u88ab\u91cd\u65b0\u8d4b\u503c\u4e3a [2, 8, 22], \u56e0\u6b64\u5bf9\u4e8e\u4e4b\u524d\u7684 1, 8 \u548c 15, \u53ea\u6709 count(8) \u7684\u7ed3\u679c\u662f\u5927\u4e8e 0 \u7684, \u6240\u4ee5\u751f\u6210\u5668\u53ea\u4f1a\u751f\u6210 8. array_1 = [1,2,3,4] g1 = (x for x in array_1) array_1 = [1,2,3,4,5] array_2 = [1,2,3,4] g2 = (x for x in array_2) array_2[:] = [1,2,3,4,5] print(list(g1)) print(list(g2)) [1, 2, 3, 4] [1, 2, 3, 4, 5] \u7b2c\u4e8c\u90e8\u5206\u4e2d g1 \u548c g2 \u7684\u8f93\u51fa\u5dee\u5f02\u5219\u662f\u7531\u4e8e\u53d8\u91cf array_1 \u548c array_2 \u88ab\u91cd\u65b0\u8d4b\u503c\u7684\u65b9\u5f0f\u5bfc\u81f4\u7684. \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b, array_1 \u88ab\u7ed1\u5b9a\u5230\u65b0\u5bf9\u8c61 [1,2,3,4,5], \u56e0\u4e3a in \u5b50\u53e5\u662f\u5728\u58f0\u660e\u65f6\u88ab\u6267\u884c\u7684\uff0c \u6240\u4ee5\u5b83\u4ecd\u7136\u5f15\u7528\u65e7\u5bf9\u8c61 1,2,3,4 . \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b, \u5bf9 array_2 \u7684\u5207\u7247\u8d4b\u503c\u5c06\u76f8\u540c\u7684\u65e7\u5bf9\u8c61 [1,2,3,4] \u539f\u5730\u66f4\u65b0\u4e3a [1,2,3,4,5]. \u56e0\u6b64 g2 \u548c array_2 \u4ecd\u7136\u5f15\u7528\u540c\u4e00\u4e2a\u5bf9\u8c61(\u8fd9\u4e2a\u5bf9\u8c61\u73b0\u5728\u5df2\u7ecf\u66f4\u65b0\u4e3a [1,2,3,4,5]).","title":"\u6267\u884c\u65f6\u673a\u5dee\u5f02"},{"location":"python/WTF/#is","text":"a = 256 b = 256 a is b True a = 257 b = 257 #256 \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61, \u800c 257 \u4e0d\u662f #\u5f53\u4f60\u542f\u52a8Python \u7684\u65f6\u5019, -5 \u5230 256 \u7684\u6570\u503c\u5c31\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86. #\u8fd9\u4e9b\u6570\u5b57\u56e0\u4e3a\u7ecf\u5e38\u4f7f\u7528\u6240\u4ee5\u9002\u5408\u88ab\u63d0\u524d\u51c6\u5907\u597d a is b False a,b = 257,257 #\u5f53 a \u548c b \u5728\u540c\u4e00\u884c\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u503c\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61. print(a is b) print(id(a),id(b)) True 1957717387056 1957717387056 [] == [] True [] is [] #\u4e24\u4e2a\u7a7a\u5217\u8868\u4f4d\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740 False","title":"\u51fa\u4eba\u610f\u6599\u7684is"},{"location":"python/WTF/#_7","text":"row = [\"\"] * 3 board = [row] * 3 board [['', '', ''], ['', '', ''], ['', '', '']] board[0][0] = 'X' board #\u8fd9\u662f\u56e0\u4e3a\u4e4b\u524d\u5bf9row\u505a\u4e58\u6cd5\u5bfc\u81f4\u7684 [['X', '', ''], ['X', '', ''], ['X', '', '']] #\u5982\u4f55\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff1f board = [['']*3 for _ in range(3)] board[0][0] = 'X' board [['X', '', ''], ['', '', ''], ['', '', '']]","title":"\u4e00\u8e74\u5373\u81f3!"},{"location":"python/WTF/#_8","text":"funcs = [] res = [] for x in range(7): def func(): return x funcs.append(func) res.append(func()) func_res = [func() for func in funcs] print(func_res,res) [6, 6, 6, 6, 6, 6, 6] [0, 1, 2, 3, 4, 5, 6] power_x = [lambda x:x**i for i in range(11)] print([func(2) for func in power_x]) [1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024] \u5728\u5faa\u73af\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6, \u5982\u679c\u8be5\u51fd\u6570\u5728\u5176\u4e3b\u4f53\u4e2d\u4f7f\u7528\u4e86\u5faa\u73af\u53d8\u91cf, \u5219\u95ed\u5305\u51fd\u6570\u5c06\u4e0e\u5faa\u73af\u53d8\u91cf\u7ed1\u5b9a, \u800c\u4e0d\u662f\u5b83\u7684\u503c. \u56e0\u6b64, \u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u4f7f\u7528\u6700\u540e\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684.","title":"\u9ebb\u70e6\u7684\u8f93\u51fa"},{"location":"python/WTF/#python","text":"import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! love = this this is love True love is True False love is False False love is not True or False True love is not True or False;love is love True","title":"\u8fdePython\u4e5f\u77e5\u9053\u7231\u662f\u96be\u8a00\u7684"},{"location":"python/WTF/#_9","text":"print('wtfpython''') wtfpython print(\"wtf\" \"python\") wtfpython","title":"\u4e09\u4e2a\u5f15\u53f7"},{"location":"python/WTF/#_10","text":"mixed_list = [False, 1.0, \"some_string\", 3, True, [], False] integers_found_so_far = 0 booleans_found_so_far = 0 for item in mixed_list: if isinstance(item, int): integers_found_so_far += 1 elif isinstance(item, bool): booleans_found_so_far += 1 integers_found_so_far 4 booleans_found_so_far 0 another_dict = {} another_dict[True] = \"JavaScript\" another_dict[1] = \"Ruby\" another_dict[1.0] = \"Python\" another_dict[True] 'Python' \u5e03\u5c14\u503c\u662f int \u7684\u5b50\u7c7b some_iterable = ('a', 'b') def some_func(val): return \"something\" [x for x in some_iterable] ['a', 'b'] [(yield x) for x in some_iterable] <generator object <listcomp> at 0x000001CC6FFC3888> list([(yield x) for x in some_iterable]) ['a', 'b'] list(((yield x) for x in some_iterable)) ['a', None, 'b', None] list(some_func((yield x)) for x in some_iterable) ['a', 'something', 'b', 'something']","title":"\u5e03\u5c14\u4f60\u548b\u4e86?"},{"location":"python/WTF/#_11","text":"e = 7 try: raise Exception() except Exception as e: pass print(e) #error!","title":"\u6d88\u5931\u7684\u5916\u90e8\u53d8\u91cf"},{"location":"python/WTF/#_12","text":"some_list = [1, 2, 3] some_dict = { \"key_1\": 1, \"key_2\": 2, \"key_3\": 3 } some_list = some_list.append(4) some_dict = some_dict.update({\"key_4\": 4}) some_list some_dict \u5927\u591a\u6570\u4fee\u6539\u5e8f\u5217/\u6620\u5c04\u5bf9\u8c61\u7684\u65b9\u6cd5, \u6bd4\u5982 list.append, dict.update, list.sort \u7b49\u7b49. \u90fd\u662f\u539f\u5730\u4fee\u6539\u5bf9\u8c61\u5e76\u8fd4\u56de None. \u8fd9\u6837\u505a\u7684\u7406\u7531\u662f, \u5982\u679c\u64cd\u4f5c\u53ef\u4ee5\u539f\u5730\u5b8c\u6210, \u5c31\u53ef\u4ee5\u907f\u514d\u521b\u5efa\u5bf9\u8c61\u7684\u526f\u672c\u6765\u63d0\u9ad8\u6027\u80fd.","title":"\u4ece\u6709\u5230\u65e0"},{"location":"python/WTF/#_13","text":"list_1 = [1, 2, 3, 4] list_2 = [1, 2, 3, 4] list_3 = [1, 2, 3, 4] list_4 = [1, 2, 3, 4] for idx, item in enumerate(list_1): del item for idx, item in enumerate(list_2): list_2.remove(item) for idx, item in enumerate(list_3[:]): list_3.remove(item) for idx, item in enumerate(list_4): list_4.pop(idx) list_1 #\u6ca1\u6709\u4fee\u6539list_1 [1, 2, 3, 4] list_2 #\u6bcf\u4e00\u6b21\u5220\u9664\u5143\u7d20\u540e \u8fed\u4ee3\u7684list_2\u4e5f\u53d1\u751f\u6539\u53d8 \u6bd4\u5982\u7b2c\u4e00\u6b21\u5220\u9664\u4e861 list_2\u4e3a[2,3,4]\u8fd9\u65f6idx=1 \u6240\u4ee5\u4e0b\u4e00\u4e2a\u5220\u9664\u4e863 [2, 4] list_3 #\u8fed\u4ee3\u526f\u672c\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u60c5\u51b5 [] list_4 [2, 4]","title":"\u8fed\u4ee3\u5217\u8868\u65f6\u5220\u9664\u5143\u7d20"},{"location":"python/WTF/#_14","text":"for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') 6 : for x inside loop 6 : x in global # \u8fd9\u6b21\u6211\u4eec\u5148\u521d\u59cb\u5316x x = -1 for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') 6 : for x inside loop 6 : x in global x = 1 print([x for x in range(5)]) print(x, ': x in global') [0, 1, 2, 3, 4] 1 : x in global","title":"\u5faa\u73af\u53d8\u91cf\u6cc4\u9732"},{"location":"python/WTF/#_15","text":"def some_func(default_arg=[]): default_arg.append(\"some_string\") return default_arg some_func() ['some_string'] some_func() ['some_string', 'some_string'] some_func([]) ['some_string'] some_func() ['some_string', 'some_string', 'some_string'] Python\u4e2d\u51fd\u6570\u7684\u9ed8\u8ba4\u53ef\u53d8\u53c2\u6570\u5e76\u4e0d\u662f\u6bcf\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u90fd\u4f1a\u88ab\u521d\u59cb\u5316. \u76f8\u53cd, \u5b83\u4eec\u4f1a\u4f7f\u7528\u6700\u8fd1\u5206\u914d\u7684\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u503c. \u5f53\u6211\u4eec\u660e\u786e\u7684\u5c06 [] \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 some_func \u7684\u65f6\u5019, \u5c31\u4e0d\u4f1a\u4f7f\u7528 default_arg \u7684\u9ed8\u8ba4\u503c, \u6240\u4ee5\u51fd\u6570\u4f1a\u8fd4\u56de\u6211\u4eec\u6240\u671f\u671b\u7684\u7ed3\u679c. some_func.__defaults__ (['some_string', 'some_string', 'some_string'],) \u907f\u514d\u53ef\u53d8\u53c2\u6570\u5bfc\u81f4\u7684\u9519\u8bef\u7684\u5e38\u89c1\u505a\u6cd5\u662f\u5c06 None \u6307\u5b9a\u4e3a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c, \u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u503c\u4f20\u7ed9\u5bf9\u5e94\u7684\u53c2\u6570. \u4f8b: def some_func(default_arg=None): if not default_arg: default_arg = [] default_arg.append(\"some_string\") return default_arg","title":"\u5f53\u5fc3\u9ed8\u8ba4\u7684\u53ef\u53d8\u53c2\u6570"},{"location":"python/WTF/#_16","text":"a = [1, 2, 3, 4] b = a a = a + [5, 6, 7, 8] a [1, 2, 3, 4, 5, 6, 7, 8] b [1, 2, 3, 4] a = [1, 2, 3, 4] b = a a += [5, 6, 7, 8] a [1, 2, 3, 4, 5, 6, 7, 8] b [1, 2, 3, 4, 5, 6, 7, 8] a += b \u5e76\u4e0d\u603b\u662f\u4e0e a = a + b \u8868\u73b0\u76f8\u540c. \u7c7b\u5b9e\u73b0 op= \u8fd0\u7b97\u7b26\u7684\u65b9\u5f0f \u4e5f\u8bb8 \u662f\u4e0d\u540c\u7684, \u5217\u8868\u5c31\u662f\u8fd9\u6837\u505a\u7684. \u8868\u8fbe\u5f0f a = a + [5,6,7,8] \u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u5217\u8868, \u5e76\u8ba9 a \u5f15\u7528\u8fd9\u4e2a\u65b0\u5217\u8868, \u540c\u65f6\u4fdd\u6301 b \u4e0d\u53d8. \u8868\u8fbe\u5f0f a += [5,6,7,8] \u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u7684\u662f \"extend\" \u51fd\u6570, \u6240\u4ee5 a \u548c b \u4ecd\u7136\u6307\u5411\u5df2\u88ab\u4fee\u6539\u7684\u540c\u4e00\u5217\u8868. a_var = 'global variable' def a_func(): print(a_var, '[ a_var inside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') global variable [ a_var inside a_func() ] global variable [ a_var outside a_func() ] a_var = 'global value' def a_func(): a_var = 'local value' print(a_var, '[ a_var inside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') local value [ a_var inside a_func() ] global value [ a_var outside a_func() ] a_var = 'global value' def a_func(): global a_var a_var = 'local value' print(a_var, '[ a_var inside a_func() ]') print(a_var, '[ a_var outside a_func() ]') a_func() print(a_var, '[ a_var outside a_func() ]') global value [ a_var outside a_func() ] local value [ a_var inside a_func() ] local value [ a_var outside a_func() ] a_var = 'global value' def outer(): a_var = 'enclosed value' def inner(): a_var = 'local value' print(a_var) inner() outer() local value a_var = 'global variable' def len(in_var): print('called my len() function') l = 0 for i in in_var: l += 1 return l def a_func(in_var): len_in_var = len(in_var) print('Input variable is of length', len_in_var) a_func('Hello, World!') called my len() function Input variable is of length 13 a = 'global' def outer(): def len(in_var): print('called my len() function: ', end=\"\") l = 0 for i in in_var: l += 1 return l a = 'local' def inner(): global len nonlocal a a += ' variable' inner() print('a is', a) print(len(a)) outer() print(len(a)) print('a is', a) a is local variable called my len() function: 14 called my len() function 6 a is global","title":"\u540c\u4eba\u4e0d\u540c\u547d"},{"location":"python/WTF/#_17","text":"x, y = (0, 1) if True else None, None x,y ((0, 1), None) #\u6b63\u786e\u505a\u6cd5 x,y = (0,1) if True else (None,None) x,y (0, 1) t = ('one', 'two') for i in t: print(i) t = ('one') for i in t: print(i) t = () print(t) one two o n e () #\u660e\u663e\u4e0a\u9762\u7684\u628at = ('one') t\u5f53\u6210\u5b57\u7b26\u4e32\u4e86\uff0c\u6b63\u786e\u505a\u6cd5\u5982\u4e0b t = ('one',) #\u6ce8\u610f\u9017\u53f7 for i in t: print(i) one","title":"\u5927\u6d77\u635e\u9488"},{"location":"python/asyncio/","text":"import threading import time \u591a\u7ebf\u7a0b\u4f8b\u5b50 def spider(): #..... time.sleep(0.02) def main1(): for i in range(100): spider() def main2(): thread_list = [] for i in range(100): thread = threading.Thread(target = spider) thread.start() thread_list.append(thread) for t in thread_list: t.join() if __name__ == \"__main__\": start = time.time() main1() end = time.time() print(\"time1 :{:.4f}\".format(end-start)) start = time.time() main2() end = time.time() print(\"time2 :{:4f}\".format(end-start)) time1 :2.0523 time2 :0.037929 yield def fib(n): a,b = 0,1 while b<n: a,b = b,a+b yield a print(fib(100)) for i in fib(100): print(i) <generator object fib at 0x000002B1A7AA1E60> 1 1 2 3 5 8 13 21 34 55 89 \u534f\u7a0b GEN_CREATED \u521b\u5efa\u5b8c\u6210\uff0c\u7b49\u5f85\u6267\u884c GEN_RUNNING \u89e3\u91ca\u5668\u6b63\u5728\u6267\u884c GEN_SUSPENDED \u5728 yield \u8868\u8fbe\u5f0f\u5904\u6682\u505c GEN_CLOSE \u6267\u884c\u7ed3\u675f\uff0c\u751f\u6210\u5668\u505c\u6b62 import inspect def generator(): i = \"\u6fc0\u6d3b\u751f\u6210\u5668\" while True: try: value = yield i except ValueError: print(\"OVER\") i = value g = generator() print(inspect.getgeneratorstate(g)) #\u67e5\u770b\u72b6\u6001 next(g) # next(g)\u76f8\u5f53\u4e8eg.send(None) \u53ef\u4ee5\u7528\u540e\u9762\u7684\u8bed\u53e5\u6765\u9884\u7f34\u643a\u7a0b GEN_CREATED '\u6fc0\u6d3b\u751f\u6210\u5668' inspect.getgeneratorstate(g) #\u67e5\u770b\u751f\u6210\u5668\u72b6\u6001 'GEN_SUSPENDED' g.send(\"hello world\") 'hello world' \u6682\u505c\u72b6\u6001\u7684\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u7528 send \u65b9\u6cd5\u53d1\u9001\u6570\u636e\uff0c\u6b64\u65b9\u6cd5\u7684\u53c2\u6570\u5c31\u662f yield \u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f yield \u8868\u8fbe\u5f0f\u7b49\u53f7\u524d\u9762\u7684 value \u53d8\u91cf\u7684\u503c\u53d8\u6210 'Hello Shiyanlou'\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u5b8c\u4e00\u6b21 while \u5faa\u73af\uff0c\u53d8\u91cf i \u88ab\u8d4b\u503c\uff0c\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0cyield \u8868\u8fbe\u5f0f\u5f39\u51fa\u53d8\u91cf i g.throw(ValueError) #\u629b\u51fa\u5f02\u5e38 \u7ed3\u675f OVER 'hello world' g.close() inspect.getgeneratorstate(g) #\u5173\u95ed\u4e86 'GEN_CLOSED' \u9884\u6fc0\u534f\u7a0b from functools import wraps def corcut(func): @wraps(func) def wrapper(*args,**kw): g = func(*args,**kw) next(g) return g return wrapper @corcut #\u88c5\u9970\u5668 def generator(): i = \"\u6fc0\u6d3b\u751f\u6210\u5668\" while True: try: value = yield i except ValueError: print(\"OVER\") i = value g = generator() print(inspect.getgeneratorstate(g)) #\u6b64\u65f6\u5df2\u7ecf\u7528\u88c5\u9970\u5668\u5c06\u751f\u6210\u5668\u6fc0\u6d3b\u4e86 GEN_SUSPENDED @corcut def generator(): l = [] while True: value = yield if value == \"CLOSE\": break l.append(value) return l g = generator() for i in ['a','b','CLOSE']: try: g.send(i) except StopIteration as e: value = e.value value ['a', 'b'] yield from\u7528\u6cd5 from itertools import chain c = chain({'one','two','three'},list(\"abc\")) for i in c: print(i) three two one a b c def chains1(*args): for i in args: for n in i: yield n def chains2(*args): for i in args: yield from i #i\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u907f\u514d\u5d4c\u5957\u5faa\u73af c1 = chains1({\"one\",\"two\",\"three\"},list(\"abc\")) for i in c1: print(i) print(\"\\n\") c2 = chains2({\"one\",\"two\",\"three\"},list(\"abc\")) for i in c2: print(i) three two one a b c three two one a b c \u8f6c\u79fb\u63a7\u5236\u6743 from functools import wraps from faker import Faker import time def corout(func): @wraps(func) def wapper(*args,**kw): g = func(*args,**kw) next(g) return g return wapper def generator(): l = [] while True: i = yield if i == \"CLOSE\": break l.append(i) return sorted(l) @corout def generator2(): while True: l = yield from generator() print(\"\u6392\u5e8f\u540e\u7684\u5217\u8868\",l) print(\"-----------------\") if __name__ == \"__main__\": fake = Faker().country_code nest_country = [[fake() for i in range(3)] for j in range(3)] for country in nest_country: print('\u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a', country) c = generator2() for i in country: c.send(i) c.send(\"CLOSE\") \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['AM', 'ZA', 'BG'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['AM', 'BG', 'ZA'] ----------------- \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['UG', 'BE', 'SI'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['BE', 'SI', 'UG'] ----------------- \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['SC', 'KI', 'KI'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['KI', 'KI', 'SC'] ----------------- asyncio\u6a21\u5757 import time import asyncio def one(): start = time.time() @asyncio.coroutine #1 def do_something(): #2 print(\"start ------\") time.sleep(0.1) #3 print(\"doing something\") loop = asyncio.get_event_loop() #4 coroutine = do_something() #5 loop.run_until_complete(coroutine) #6 end = time.time() print(\"\u6d88\u8017\u65f6\u95f4:{:.4f}\".format(end-start))#7 one() start ------ doing something \u6d88\u8017\u65f6\u95f4:0.1012 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001\u4f7f\u7528\u534f\u7a0b\u88c5\u9970\u5668\u521b\u5efa\u534f\u7a0b\u51fd\u6570 2\u3001\u534f\u7a0b\u51fd\u6570 3\u3001\u6a21\u62df IO \u64cd\u4f5c 4\u3001\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0cget_event_loop \u65b9\u6cd5\u4f1a\u83b7\u53d6\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e2d\u6ca1\u6709\uff0c\u65b0\u5efa\u4e00\u4e2a 5\u3001\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u83b7\u53d6\u534f\u7a0b\u5bf9\u8c61 6\u3001\u5c06\u534f\u7a0b\u5bf9\u8c61\u6ce8\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u534f\u7a0b\u7684\u8fd0\u884c\u7531\u4e8b\u4ef6\u5faa\u73af\u63a7\u5236\u3002\u4e8b\u4ef6\u5faa\u73af\u7684 run_until_complete \u65b9\u6cd5\u4f1a\u963b\u585e\u8fd0\u884c\uff0c\u76f4\u5230\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\u3002\u534f\u7a0b\u5bf9\u8c61\u4f5c\u4e3a run_until_complete \u65b9\u6cd5\u7684\u53c2\u6570\uff0cloop \u4f1a\u81ea\u52a8\u5c06\u534f\u7a0b\u5bf9\u8c61\u5305\u88c5\u6210\u4efb\u52a1\u6765\u8fd0\u884c\u3002\u540e\u9762\u6211\u4eec\u4f1a\u8bb2\u5230\u591a\u4e2a\u4efb\u52a1\u6ce8\u5165\u4e8b\u4ef6\u5faa\u73af\u7684\u60c5\u51b5 7\u3001\u6253\u5370\u7a0b\u5e8f\u8fd0\u884c\u8017\u65f6 import time import asyncio def two(): start = time.time() @asyncio.coroutine def do_something(): print(\"start ------\") time.sleep(0.1) print(\"doing something\") loop = asyncio.get_event_loop() coroutine = do_something() task = loop.create_task(coroutine) #1 print(\"task\u662f\u4e0d\u662fTask\u7684\u793a\u4f8b\uff1f\",isinstance(task,asyncio.Task)) #2 print(\"task state\",task._state) #3 loop.run_until_complete(task) #4 print(\"take state\",task._state) end = time.time() print(\"\u6d88\u8017\u65f6\u95f4:{:.4f}\".format(end-start)) two() task\u662f\u4e0d\u662fTask\u7684\u793a\u4f8b\uff1f True task state PENDING start ------ doing something take state FINISHED \u6d88\u8017\u65f6\u95f4:0.1013 1\u3001\u4e8b\u4ef6\u5faa\u73af\u7684 create_task \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1\uff0c\u53e6\u5916 asyncio.ensure_future \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1\uff0c\u53c2\u6570\u987b\u4e3a\u534f\u7a0b\u5bf9\u8c61 2\u3001task \u662f asyncio.Task \u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u534f\u7a0b\u5bf9\u8c61\u521b\u5efa\u4efb\u52a1\uff1f\u56e0\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d asyncio.Task \u505a\u4e86\u4e00\u4e9b\u5de5\u4f5c\uff0c\u5305\u62ec\u9884\u6fc0\u534f\u7a0b\u3001\u534f\u7a0b\u8fd0\u884c\u4e2d\u9047\u5230\u67d0\u4e9b\u5f02\u5e38\u65f6\u7684\u5904\u7406 3\u3001task \u5bf9\u8c61\u7684 _state \u5c5e\u6027\u4fdd\u5b58\u5f53\u524d\u4efb\u52a1\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u4efb\u52a1\u7684\u8fd0\u884c\u72b6\u6001\u6709 PENDING \u548c FINISHED \u4e24\u79cd 4\u3001\u5c06\u4efb\u52a1\u6ce8\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u963b\u585e\u8fd0\u884c async / await import functools def three(): start = time.time() #@asyncio.coroutine async def do_something(): #1 print(\"start doing\") time.sleep(0.1) print(\"done\") def callback(name,task): #2 print(\"call back:{}\".format(name)) print(\"call back:{}\".format(task._state)) loop = asyncio.get_event_loop() coroutine = do_something() task = loop.create_task(coroutine) task.add_done_callback(functools.partial(callback, 'vllbc')) #3 loop.run_until_complete(task) end = time.time() print(\"total time {:.4f}\".format(end-start)) three() start doing done call back:vllbc call back:FINISHED total time 0.1013 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001\u4f7f\u7528 async \u5173\u952e\u5b57\u66ff\u4ee3 asyncio.coroutine \u88c5\u9970\u5668\u521b\u5efa\u534f\u7a0b\u51fd\u6570 2\u3001\u56de\u8c03\u51fd\u6570\uff0c\u534f\u7a0b\u7ec8\u6b62\u540e\u9700\u8981\u987a\u4fbf\u8fd0\u884c\u7684\u4ee3\u7801\u5199\u5165\u8fd9\u91cc\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6709\u8981\u6c42\uff0c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u987b\u4e3a task \u5bf9\u8c61 3\u3001task \u5bf9\u8c61\u7684 add_done_callback \u65b9\u6cd5\u53ef\u4ee5\u6dfb\u52a0\u56de\u8c03\u51fd\u6570\uff0c\u6ce8\u610f\u53c2\u6570\u5fc5\u987b\u662f\u56de\u8c03\u51fd\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u80fd\u4f20\u5165\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u901a\u8fc7 functools \u6a21\u5757\u7684 partial \u65b9\u6cd5\u89e3\u51b3\uff0c\u5c06\u56de\u8c03\u51fd\u6570\u548c\u5176\u53c2\u6570 name \u4f5c\u4e3a partial \u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5c31\u662f\u504f\u51fd\u6570\uff0c\u504f\u51fd\u6570\u53ef\u4f5c\u4e3a task.add_done_callback \u65b9\u6cd5\u7684\u53c2\u6570 def four(): start = time.time() async def do_something(name,t): print(\"start !>>\",name) await asyncio.sleep(t) #1 print('Stop coroutine', name) return 'Coroutine {} OK'.format(name) #2 loop = asyncio.get_event_loop() coroutine1 = do_something('wlb',3) #3 coroutine2 = do_something('yyh',1) task1 = loop.create_task(coroutine1) #4 task2 = loop.create_task(coroutine2) gather = asyncio.gather(task1,task2) #5 loop.run_until_complete(gather) print(\"task1\",task1.result()) print(\"task2\",task2.result()) #result = loop.run_until_complete(gather) #\u8fd9\u91ccresult\u5c31\u662f\u4e24\u4e2a\u8fd4\u56de\u503c\u7ec4\u6210\u7684\u5217\u8868 \u5373['task1 Coroutine wlb OK','task2 Coroutine yyh OK'] end = time.time() print(\"total time:{:.4f}\".format(end-start)) four() start !>> wlb start !>> yyh Stop coroutine yyh Stop coroutine wlb task1 Coroutine wlb OK task2 Coroutine yyh OK total time:3.0022 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001await \u5173\u952e\u5b57\u7b49\u540c\u4e8e Python 3.4 \u4e2d\u7684 yield from \u8bed\u53e5\uff0c\u540e\u9762\u63a5\u534f\u7a0b\u5bf9\u8c61\u3002asyncio.sleep \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e3a\u534f\u7a0b\u5bf9\u8c61\uff0c\u8fd9\u4e00\u6b65\u4e3a\u963b\u585e\u8fd0\u884c\u3002asyncio.sleep \u4e0e time.sleep \u662f\u4e0d\u540c\u7684\uff0c\u524d\u8005\u963b\u585e\u5f53\u524d\u534f\u7a0b\uff0c\u5373 corowork \u51fd\u6570\u7684\u8fd0\u884c\uff0c\u800c time.sleep \u4f1a\u963b\u585e\u6574\u4e2a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u8fd9\u91cc\u5fc5\u987b\u7528\u524d\u8005\uff0c\u963b\u585e\u5f53\u524d\u534f\u7a0b\uff0cCPU \u53ef\u4ee5\u5728\u7ebf\u7a0b\u5185\u7684\u5176\u5b83\u534f\u7a0b\u4e2d\u6267\u884c 2\u3001\u534f\u7a0b\u51fd\u6570\u7684 return \u503c\u53ef\u4ee5\u5728\u534f\u7a0b\u8fd0\u884c\u7ed3\u675f\u540e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684 task \u5bf9\u8c61\u7684 result \u65b9\u6cd5\u4e2d 3\u3001\u521b\u5efa\u4e24\u4e2a\u534f\u7a0b\u5bf9\u8c61\uff0c\u5728\u534f\u7a0b\u5185\u90e8\u5206\u522b\u963b\u585e 3 \u79d2\u548c 1 \u79d2 4\u3001\u521b\u5efa\u4e24\u4e2a\u4efb\u52a1\u5bf9\u8c61 5\u3001\u5c06\u4efb\u52a1\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0casyncio.gather \u65b9\u6cd5\u521b\u5efa\u4efb\u52a1\u6536\u96c6\u5668\u3002\u6ce8\u610f\uff0casyncio.gather \u65b9\u6cd5\u4e2d\u53c2\u6570\u7684\u987a\u5e8f\u51b3\u5b9a\u4e86\u534f\u7a0b\u7684\u542f\u52a8\u987a\u5e8f 6\u3001\u5c06\u4efb\u52a1\u6536\u96c6\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u4e8b\u4ef6\u5faa\u73af\u7684 run_until_complete \u65b9\u6cd5\uff0c\u963b\u585e\u8fd0\u884c\uff0c\u76f4\u5230\u5168\u90e8\u4efb\u52a1\u5b8c\u6210 7\u3001\u4efb\u52a1\u7ed3\u675f\u540e\uff0c\u4e8b\u4ef6\u5faa\u73af\u505c\u6b62\uff0c\u6253\u5370\u4efb\u52a1\u7684 result \u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5373\u534f\u7a0b\u51fd\u6570\u7684 return \u503c \u5230\u8fd9\u4e00\u6b65\uff0c\u5927\u5bb6\u5e94\u8be5\u53ef\u4ee5\u770b\u5f97\u51fa\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7ecf\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u7ed3\u6784\u4e86\uff0c\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u90e8\uff0c\u4e24\u4e2a\u534f\u7a0b\u662f\u4ea4\u66ff\u8fd0\u884c\u5b8c\u6210\u7684\u3002\u7b80\u5355\u53d9\u8ff0\u4e00\u4e0b\u7a0b\u5e8f\u534f\u7a0b\u90e8\u5206\u7684\u8fd0\u884c\u8fc7\u7a0b\uff1a -> \u9996\u5148\u8fd0\u884c task1 -> \u6253\u5370 [corowork] Start coroutine ONE -> \u9047\u5230 asyncio.sleep \u963b\u585e -> \u91ca\u653e CPU \u8f6c\u5230 task2 \u4e2d\u6267\u884c -> \u6253\u5370 [corowork] Start coroutine TWO -> \u518d\u6b21\u9047\u5230 asyncio.sleep \u963b\u585e -> \u8fd9\u6b21\u6ca1\u6709\u5176\u5b83\u534f\u7a0b\u53ef\u4ee5\u8fd0\u884c\u4e86\uff0c\u53ea\u80fd\u7b49\u963b\u585e\u7ed3\u675f -> task2 \u7684\u963b\u585e\u65f6\u95f4\u8f83\u77ed\uff0c\u963b\u585e 1 \u79d2\u540e\u5148\u7ed3\u675f\uff0c\u6253\u5370 [corowork] Stop coroutine TWO -> \u53c8\u8fc7\u4e86 2 \u79d2\uff0c\u963b\u585e 3 \u79d2\u7684 task1 \u4e5f\u7ed3\u675f\u4e86\u963b\u585e\uff0c\u6253\u5370 [corowork] Stop coroutine ONE -> \u81f3\u6b64\u4e24\u4e2a\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u4e8b\u4ef6\u5faa\u73af\u505c\u6b62 -> \u6253\u5370\u4e24\u4e2a\u4efb\u52a1\u7684 result -> \u6253\u5370\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 -> \u7a0b\u5e8f\u5168\u90e8\u7ed3\u675f \u5f02\u6b65\u7f16\u7a0b","title":"asyncio\u6a21\u5757\u5f02\u6b65\u7f16\u7a0b"},{"location":"python/asyncio/#_1","text":"def spider(): #..... time.sleep(0.02) def main1(): for i in range(100): spider() def main2(): thread_list = [] for i in range(100): thread = threading.Thread(target = spider) thread.start() thread_list.append(thread) for t in thread_list: t.join() if __name__ == \"__main__\": start = time.time() main1() end = time.time() print(\"time1 :{:.4f}\".format(end-start)) start = time.time() main2() end = time.time() print(\"time2 :{:4f}\".format(end-start)) time1 :2.0523 time2 :0.037929","title":"\u591a\u7ebf\u7a0b\u4f8b\u5b50"},{"location":"python/asyncio/#yield","text":"def fib(n): a,b = 0,1 while b<n: a,b = b,a+b yield a print(fib(100)) for i in fib(100): print(i) <generator object fib at 0x000002B1A7AA1E60> 1 1 2 3 5 8 13 21 34 55 89","title":"yield"},{"location":"python/asyncio/#_2","text":"GEN_CREATED \u521b\u5efa\u5b8c\u6210\uff0c\u7b49\u5f85\u6267\u884c GEN_RUNNING \u89e3\u91ca\u5668\u6b63\u5728\u6267\u884c GEN_SUSPENDED \u5728 yield \u8868\u8fbe\u5f0f\u5904\u6682\u505c GEN_CLOSE \u6267\u884c\u7ed3\u675f\uff0c\u751f\u6210\u5668\u505c\u6b62 import inspect def generator(): i = \"\u6fc0\u6d3b\u751f\u6210\u5668\" while True: try: value = yield i except ValueError: print(\"OVER\") i = value g = generator() print(inspect.getgeneratorstate(g)) #\u67e5\u770b\u72b6\u6001 next(g) # next(g)\u76f8\u5f53\u4e8eg.send(None) \u53ef\u4ee5\u7528\u540e\u9762\u7684\u8bed\u53e5\u6765\u9884\u7f34\u643a\u7a0b GEN_CREATED '\u6fc0\u6d3b\u751f\u6210\u5668' inspect.getgeneratorstate(g) #\u67e5\u770b\u751f\u6210\u5668\u72b6\u6001 'GEN_SUSPENDED' g.send(\"hello world\") 'hello world' \u6682\u505c\u72b6\u6001\u7684\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u7528 send \u65b9\u6cd5\u53d1\u9001\u6570\u636e\uff0c\u6b64\u65b9\u6cd5\u7684\u53c2\u6570\u5c31\u662f yield \u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f yield \u8868\u8fbe\u5f0f\u7b49\u53f7\u524d\u9762\u7684 value \u53d8\u91cf\u7684\u503c\u53d8\u6210 'Hello Shiyanlou'\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u5b8c\u4e00\u6b21 while \u5faa\u73af\uff0c\u53d8\u91cf i \u88ab\u8d4b\u503c\uff0c\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0cyield \u8868\u8fbe\u5f0f\u5f39\u51fa\u53d8\u91cf i g.throw(ValueError) #\u629b\u51fa\u5f02\u5e38 \u7ed3\u675f OVER 'hello world' g.close() inspect.getgeneratorstate(g) #\u5173\u95ed\u4e86 'GEN_CLOSED'","title":"\u534f\u7a0b"},{"location":"python/asyncio/#_3","text":"from functools import wraps def corcut(func): @wraps(func) def wrapper(*args,**kw): g = func(*args,**kw) next(g) return g return wrapper @corcut #\u88c5\u9970\u5668 def generator(): i = \"\u6fc0\u6d3b\u751f\u6210\u5668\" while True: try: value = yield i except ValueError: print(\"OVER\") i = value g = generator() print(inspect.getgeneratorstate(g)) #\u6b64\u65f6\u5df2\u7ecf\u7528\u88c5\u9970\u5668\u5c06\u751f\u6210\u5668\u6fc0\u6d3b\u4e86 GEN_SUSPENDED @corcut def generator(): l = [] while True: value = yield if value == \"CLOSE\": break l.append(value) return l g = generator() for i in ['a','b','CLOSE']: try: g.send(i) except StopIteration as e: value = e.value value ['a', 'b']","title":"\u9884\u6fc0\u534f\u7a0b"},{"location":"python/asyncio/#yield-from","text":"from itertools import chain c = chain({'one','two','three'},list(\"abc\")) for i in c: print(i) three two one a b c def chains1(*args): for i in args: for n in i: yield n def chains2(*args): for i in args: yield from i #i\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u907f\u514d\u5d4c\u5957\u5faa\u73af c1 = chains1({\"one\",\"two\",\"three\"},list(\"abc\")) for i in c1: print(i) print(\"\\n\") c2 = chains2({\"one\",\"two\",\"three\"},list(\"abc\")) for i in c2: print(i) three two one a b c three two one a b c","title":"yield from\u7528\u6cd5"},{"location":"python/asyncio/#_4","text":"from functools import wraps from faker import Faker import time def corout(func): @wraps(func) def wapper(*args,**kw): g = func(*args,**kw) next(g) return g return wapper def generator(): l = [] while True: i = yield if i == \"CLOSE\": break l.append(i) return sorted(l) @corout def generator2(): while True: l = yield from generator() print(\"\u6392\u5e8f\u540e\u7684\u5217\u8868\",l) print(\"-----------------\") if __name__ == \"__main__\": fake = Faker().country_code nest_country = [[fake() for i in range(3)] for j in range(3)] for country in nest_country: print('\u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a', country) c = generator2() for i in country: c.send(i) c.send(\"CLOSE\") \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['AM', 'ZA', 'BG'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['AM', 'BG', 'ZA'] ----------------- \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['UG', 'BE', 'SI'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['BE', 'SI', 'UG'] ----------------- \u56fd\u5bb6\u4ee3\u53f7\u5217\u8868\uff1a ['SC', 'KI', 'KI'] \u6392\u5e8f\u540e\u7684\u5217\u8868 ['KI', 'KI', 'SC'] -----------------","title":"\u8f6c\u79fb\u63a7\u5236\u6743"},{"location":"python/asyncio/#asyncio","text":"import time import asyncio def one(): start = time.time() @asyncio.coroutine #1 def do_something(): #2 print(\"start ------\") time.sleep(0.1) #3 print(\"doing something\") loop = asyncio.get_event_loop() #4 coroutine = do_something() #5 loop.run_until_complete(coroutine) #6 end = time.time() print(\"\u6d88\u8017\u65f6\u95f4:{:.4f}\".format(end-start))#7 one() start ------ doing something \u6d88\u8017\u65f6\u95f4:0.1012 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001\u4f7f\u7528\u534f\u7a0b\u88c5\u9970\u5668\u521b\u5efa\u534f\u7a0b\u51fd\u6570 2\u3001\u534f\u7a0b\u51fd\u6570 3\u3001\u6a21\u62df IO \u64cd\u4f5c 4\u3001\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0cget_event_loop \u65b9\u6cd5\u4f1a\u83b7\u53d6\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e2d\u6ca1\u6709\uff0c\u65b0\u5efa\u4e00\u4e2a 5\u3001\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u83b7\u53d6\u534f\u7a0b\u5bf9\u8c61 6\u3001\u5c06\u534f\u7a0b\u5bf9\u8c61\u6ce8\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u534f\u7a0b\u7684\u8fd0\u884c\u7531\u4e8b\u4ef6\u5faa\u73af\u63a7\u5236\u3002\u4e8b\u4ef6\u5faa\u73af\u7684 run_until_complete \u65b9\u6cd5\u4f1a\u963b\u585e\u8fd0\u884c\uff0c\u76f4\u5230\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\u3002\u534f\u7a0b\u5bf9\u8c61\u4f5c\u4e3a run_until_complete \u65b9\u6cd5\u7684\u53c2\u6570\uff0cloop \u4f1a\u81ea\u52a8\u5c06\u534f\u7a0b\u5bf9\u8c61\u5305\u88c5\u6210\u4efb\u52a1\u6765\u8fd0\u884c\u3002\u540e\u9762\u6211\u4eec\u4f1a\u8bb2\u5230\u591a\u4e2a\u4efb\u52a1\u6ce8\u5165\u4e8b\u4ef6\u5faa\u73af\u7684\u60c5\u51b5 7\u3001\u6253\u5370\u7a0b\u5e8f\u8fd0\u884c\u8017\u65f6 import time import asyncio def two(): start = time.time() @asyncio.coroutine def do_something(): print(\"start ------\") time.sleep(0.1) print(\"doing something\") loop = asyncio.get_event_loop() coroutine = do_something() task = loop.create_task(coroutine) #1 print(\"task\u662f\u4e0d\u662fTask\u7684\u793a\u4f8b\uff1f\",isinstance(task,asyncio.Task)) #2 print(\"task state\",task._state) #3 loop.run_until_complete(task) #4 print(\"take state\",task._state) end = time.time() print(\"\u6d88\u8017\u65f6\u95f4:{:.4f}\".format(end-start)) two() task\u662f\u4e0d\u662fTask\u7684\u793a\u4f8b\uff1f True task state PENDING start ------ doing something take state FINISHED \u6d88\u8017\u65f6\u95f4:0.1013 1\u3001\u4e8b\u4ef6\u5faa\u73af\u7684 create_task \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1\uff0c\u53e6\u5916 asyncio.ensure_future \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1\uff0c\u53c2\u6570\u987b\u4e3a\u534f\u7a0b\u5bf9\u8c61 2\u3001task \u662f asyncio.Task \u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u534f\u7a0b\u5bf9\u8c61\u521b\u5efa\u4efb\u52a1\uff1f\u56e0\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d asyncio.Task \u505a\u4e86\u4e00\u4e9b\u5de5\u4f5c\uff0c\u5305\u62ec\u9884\u6fc0\u534f\u7a0b\u3001\u534f\u7a0b\u8fd0\u884c\u4e2d\u9047\u5230\u67d0\u4e9b\u5f02\u5e38\u65f6\u7684\u5904\u7406 3\u3001task \u5bf9\u8c61\u7684 _state \u5c5e\u6027\u4fdd\u5b58\u5f53\u524d\u4efb\u52a1\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u4efb\u52a1\u7684\u8fd0\u884c\u72b6\u6001\u6709 PENDING \u548c FINISHED \u4e24\u79cd 4\u3001\u5c06\u4efb\u52a1\u6ce8\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u963b\u585e\u8fd0\u884c","title":"asyncio\u6a21\u5757"},{"location":"python/asyncio/#async-await","text":"import functools def three(): start = time.time() #@asyncio.coroutine async def do_something(): #1 print(\"start doing\") time.sleep(0.1) print(\"done\") def callback(name,task): #2 print(\"call back:{}\".format(name)) print(\"call back:{}\".format(task._state)) loop = asyncio.get_event_loop() coroutine = do_something() task = loop.create_task(coroutine) task.add_done_callback(functools.partial(callback, 'vllbc')) #3 loop.run_until_complete(task) end = time.time() print(\"total time {:.4f}\".format(end-start)) three() start doing done call back:vllbc call back:FINISHED total time 0.1013 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001\u4f7f\u7528 async \u5173\u952e\u5b57\u66ff\u4ee3 asyncio.coroutine \u88c5\u9970\u5668\u521b\u5efa\u534f\u7a0b\u51fd\u6570 2\u3001\u56de\u8c03\u51fd\u6570\uff0c\u534f\u7a0b\u7ec8\u6b62\u540e\u9700\u8981\u987a\u4fbf\u8fd0\u884c\u7684\u4ee3\u7801\u5199\u5165\u8fd9\u91cc\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6709\u8981\u6c42\uff0c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u987b\u4e3a task \u5bf9\u8c61 3\u3001task \u5bf9\u8c61\u7684 add_done_callback \u65b9\u6cd5\u53ef\u4ee5\u6dfb\u52a0\u56de\u8c03\u51fd\u6570\uff0c\u6ce8\u610f\u53c2\u6570\u5fc5\u987b\u662f\u56de\u8c03\u51fd\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u80fd\u4f20\u5165\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u901a\u8fc7 functools \u6a21\u5757\u7684 partial \u65b9\u6cd5\u89e3\u51b3\uff0c\u5c06\u56de\u8c03\u51fd\u6570\u548c\u5176\u53c2\u6570 name \u4f5c\u4e3a partial \u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5c31\u662f\u504f\u51fd\u6570\uff0c\u504f\u51fd\u6570\u53ef\u4f5c\u4e3a task.add_done_callback \u65b9\u6cd5\u7684\u53c2\u6570 def four(): start = time.time() async def do_something(name,t): print(\"start !>>\",name) await asyncio.sleep(t) #1 print('Stop coroutine', name) return 'Coroutine {} OK'.format(name) #2 loop = asyncio.get_event_loop() coroutine1 = do_something('wlb',3) #3 coroutine2 = do_something('yyh',1) task1 = loop.create_task(coroutine1) #4 task2 = loop.create_task(coroutine2) gather = asyncio.gather(task1,task2) #5 loop.run_until_complete(gather) print(\"task1\",task1.result()) print(\"task2\",task2.result()) #result = loop.run_until_complete(gather) #\u8fd9\u91ccresult\u5c31\u662f\u4e24\u4e2a\u8fd4\u56de\u503c\u7ec4\u6210\u7684\u5217\u8868 \u5373['task1 Coroutine wlb OK','task2 Coroutine yyh OK'] end = time.time() print(\"total time:{:.4f}\".format(end-start)) four() start !>> wlb start !>> yyh Stop coroutine yyh Stop coroutine wlb task1 Coroutine wlb OK task2 Coroutine yyh OK total time:3.0022 \u4ee3\u7801\u8bf4\u660e\uff1a 1\u3001await \u5173\u952e\u5b57\u7b49\u540c\u4e8e Python 3.4 \u4e2d\u7684 yield from \u8bed\u53e5\uff0c\u540e\u9762\u63a5\u534f\u7a0b\u5bf9\u8c61\u3002asyncio.sleep \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e3a\u534f\u7a0b\u5bf9\u8c61\uff0c\u8fd9\u4e00\u6b65\u4e3a\u963b\u585e\u8fd0\u884c\u3002asyncio.sleep \u4e0e time.sleep \u662f\u4e0d\u540c\u7684\uff0c\u524d\u8005\u963b\u585e\u5f53\u524d\u534f\u7a0b\uff0c\u5373 corowork \u51fd\u6570\u7684\u8fd0\u884c\uff0c\u800c time.sleep \u4f1a\u963b\u585e\u6574\u4e2a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u8fd9\u91cc\u5fc5\u987b\u7528\u524d\u8005\uff0c\u963b\u585e\u5f53\u524d\u534f\u7a0b\uff0cCPU \u53ef\u4ee5\u5728\u7ebf\u7a0b\u5185\u7684\u5176\u5b83\u534f\u7a0b\u4e2d\u6267\u884c 2\u3001\u534f\u7a0b\u51fd\u6570\u7684 return \u503c\u53ef\u4ee5\u5728\u534f\u7a0b\u8fd0\u884c\u7ed3\u675f\u540e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684 task \u5bf9\u8c61\u7684 result \u65b9\u6cd5\u4e2d 3\u3001\u521b\u5efa\u4e24\u4e2a\u534f\u7a0b\u5bf9\u8c61\uff0c\u5728\u534f\u7a0b\u5185\u90e8\u5206\u522b\u963b\u585e 3 \u79d2\u548c 1 \u79d2 4\u3001\u521b\u5efa\u4e24\u4e2a\u4efb\u52a1\u5bf9\u8c61 5\u3001\u5c06\u4efb\u52a1\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0casyncio.gather \u65b9\u6cd5\u521b\u5efa\u4efb\u52a1\u6536\u96c6\u5668\u3002\u6ce8\u610f\uff0casyncio.gather \u65b9\u6cd5\u4e2d\u53c2\u6570\u7684\u987a\u5e8f\u51b3\u5b9a\u4e86\u534f\u7a0b\u7684\u542f\u52a8\u987a\u5e8f 6\u3001\u5c06\u4efb\u52a1\u6536\u96c6\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u4e8b\u4ef6\u5faa\u73af\u7684 run_until_complete \u65b9\u6cd5\uff0c\u963b\u585e\u8fd0\u884c\uff0c\u76f4\u5230\u5168\u90e8\u4efb\u52a1\u5b8c\u6210 7\u3001\u4efb\u52a1\u7ed3\u675f\u540e\uff0c\u4e8b\u4ef6\u5faa\u73af\u505c\u6b62\uff0c\u6253\u5370\u4efb\u52a1\u7684 result \u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5373\u534f\u7a0b\u51fd\u6570\u7684 return \u503c \u5230\u8fd9\u4e00\u6b65\uff0c\u5927\u5bb6\u5e94\u8be5\u53ef\u4ee5\u770b\u5f97\u51fa\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7ecf\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u7ed3\u6784\u4e86\uff0c\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u90e8\uff0c\u4e24\u4e2a\u534f\u7a0b\u662f\u4ea4\u66ff\u8fd0\u884c\u5b8c\u6210\u7684\u3002\u7b80\u5355\u53d9\u8ff0\u4e00\u4e0b\u7a0b\u5e8f\u534f\u7a0b\u90e8\u5206\u7684\u8fd0\u884c\u8fc7\u7a0b\uff1a -> \u9996\u5148\u8fd0\u884c task1 -> \u6253\u5370 [corowork] Start coroutine ONE -> \u9047\u5230 asyncio.sleep \u963b\u585e -> \u91ca\u653e CPU \u8f6c\u5230 task2 \u4e2d\u6267\u884c -> \u6253\u5370 [corowork] Start coroutine TWO -> \u518d\u6b21\u9047\u5230 asyncio.sleep \u963b\u585e -> \u8fd9\u6b21\u6ca1\u6709\u5176\u5b83\u534f\u7a0b\u53ef\u4ee5\u8fd0\u884c\u4e86\uff0c\u53ea\u80fd\u7b49\u963b\u585e\u7ed3\u675f -> task2 \u7684\u963b\u585e\u65f6\u95f4\u8f83\u77ed\uff0c\u963b\u585e 1 \u79d2\u540e\u5148\u7ed3\u675f\uff0c\u6253\u5370 [corowork] Stop coroutine TWO -> \u53c8\u8fc7\u4e86 2 \u79d2\uff0c\u963b\u585e 3 \u79d2\u7684 task1 \u4e5f\u7ed3\u675f\u4e86\u963b\u585e\uff0c\u6253\u5370 [corowork] Stop coroutine ONE -> \u81f3\u6b64\u4e24\u4e2a\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u4e8b\u4ef6\u5faa\u73af\u505c\u6b62 -> \u6253\u5370\u4e24\u4e2a\u4efb\u52a1\u7684 result -> \u6253\u5370\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 -> \u7a0b\u5e8f\u5168\u90e8\u7ed3\u675f","title":"async / await"},{"location":"python/asyncio/#_5","text":"","title":"\u5f02\u6b65\u7f16\u7a0b"},{"location":"python/jupyter/","text":"jupyter \u662fpython\u6570\u636e\u5206\u6790\u9886\u57df\u4e0d\u53ef\u7f3a\u5c11\u7684\u5229\u5668\uff0c\u800c\u6211\u4e5f\u5728\u4f7f\u7528\u8fc7\u540e\u7231\u4e0a\u4e86\u5b83\uff01 \u53ef\u4ee5\u7528 pip \u6216\u8005 anaconda \u6765\u5b89\u88c5 jupyter \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u4efb\u610f\u76ee\u5f55\u91cc\u542f\u52a8 jupyter \u4e86 jupyter notebook \u4e4b\u540e\u4f1a\u6253\u5f00\u754c\u9762\uff0c\u5177\u4f53\u64cd\u4f5c\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e0b\u9762\u5199\u4e00\u4e0b\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002 jupyter\u4e2d\u547d\u4ee4\u6a21\u5f0f m\u5207\u6362\u5230markdown\u6a21\u5f0f y\u5207\u6362\u56de\u6765 dd\u5220\u9664\u5f53\u524d\u884c esc\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f S\u4fdd\u5b58 j,k\u5206\u522b\u4e3a\u4e0b\uff0c\u4e0a\u79fb\u52a8\uff0c\u548cvim\u76f8\u540c l\u4e3a\u663e\u793a\u884c\u53f7\uff0c\u518d\u6309\u4e00\u904d\u53d6\u6d88\u663e\u793a \u6b64\u5916\uff0c plotly \u7b49\u5de5\u5177\u4e5f\u5c3d\u91cf\u5728 jupyter \u91cc\u9762\u4f7f\u7528\u4ee5\u65b9\u4fbf\u64cd\u4f5c\uff01","title":"Jupyter"},{"location":"python/logging/","text":"logging\u6a21\u5757\u5b66\u4e60 import logging logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s') #\u5bf9logger\u8fdb\u884c\u57fa\u7840\u8bbe\u7f6e logger = logging.getLogger('vllbc') \u7b49\u7ea7\uff1aCRITICAL > ERROR > WARNING > INFO > DEBUG \u66f4\u4f4e\u7ea7\u7684\u6d88\u606f\u7b49\u7ea7\u5c06\u4e0d\u4f1a\u663e\u793a\u3002 format: %(levelno)s: \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u7684\u6570\u503c %(levelname)s: \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u540d\u79f0 %(pathname)s: \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662fsys.argv[0] %(filename)s: \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u540d %(funcName)s: \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u51fd\u6570 %(lineno)d: \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u884c\u53f7 %(asctime)s: \u6253\u5370\u65e5\u5fd7\u7684\u65f6\u95f4 %(thread)d: \u6253\u5370\u7ebf\u7a0bID %(threadName)s: \u6253\u5370\u7ebf\u7a0b\u540d\u79f0 %(process)d: \u6253\u5370\u8fdb\u7a0bID %(message)s: \u6253\u5370\u65e5\u5fd7\u4fe1\u606f import logging # \u5f15\u5165logging\u6a21\u5757 import time logging.basicConfig(level=logging.INFO,format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') # \u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2alogger logger = logging.getLogger() logger.setLevel(logging.INFO) # Log\u7b49\u7ea7\u603b\u5f00\u5173 # \u7b2c\u4e8c\u6b65\uff0c\u521b\u5efa\u4e00\u4e2ahandler\uff0c\u7528\u4e8e\u5199\u5165\u65e5\u5fd7\u6587\u4ef6 fh = logging.FileHandler('logs.log', mode='w') fh.setLevel(logging.DEBUG) # \u8f93\u51fa\u5230file\u7684log\u7b49\u7ea7\u7684\u5f00\u5173 # \u7b2c\u4e09\u6b65\uff0c\u5b9a\u4e49handler\u7684\u8f93\u51fa\u683c\u5f0f formatter = logging.Formatter(\"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s\") fh.setFormatter(formatter) # \u7b2c\u56db\u6b65\uff0c\u5c06logger\u6dfb\u52a0\u5230handler\u91cc\u9762 logger.addHandler(fh) # \u65e5\u5fd7 logger.debug('this is a logger debug message') logger.info('this is a logger info message') logger.warning('this is a logger warning message') logger.error('this is a logger error message') logger.critical('this is a logger critical message') \u4e0a\u8ff0\u4ee3\u7801\u5c06\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u65e5\u5fd7\u4fe1\u606f\u5e76\u4fdd\u5b58\u5230logs.log\u6587\u4ef6\u91cc\u9762\u3002","title":"logging\u6a21\u5757\u5b66\u4e60"},{"location":"python/logging/#logging","text":"import logging logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s') #\u5bf9logger\u8fdb\u884c\u57fa\u7840\u8bbe\u7f6e logger = logging.getLogger('vllbc')","title":"logging\u6a21\u5757\u5b66\u4e60"},{"location":"python/logging/#critical-error-warning-info-debug","text":"\u66f4\u4f4e\u7ea7\u7684\u6d88\u606f\u7b49\u7ea7\u5c06\u4e0d\u4f1a\u663e\u793a\u3002","title":"\u7b49\u7ea7\uff1aCRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG"},{"location":"python/logging/#format","text":"%(levelno)s: \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u7684\u6570\u503c %(levelname)s: \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u540d\u79f0 %(pathname)s: \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662fsys.argv[0] %(filename)s: \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u540d %(funcName)s: \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u51fd\u6570 %(lineno)d: \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u884c\u53f7 %(asctime)s: \u6253\u5370\u65e5\u5fd7\u7684\u65f6\u95f4 %(thread)d: \u6253\u5370\u7ebf\u7a0bID %(threadName)s: \u6253\u5370\u7ebf\u7a0b\u540d\u79f0 %(process)d: \u6253\u5370\u8fdb\u7a0bID %(message)s: \u6253\u5370\u65e5\u5fd7\u4fe1\u606f import logging # \u5f15\u5165logging\u6a21\u5757 import time logging.basicConfig(level=logging.INFO,format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') # \u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2alogger logger = logging.getLogger() logger.setLevel(logging.INFO) # Log\u7b49\u7ea7\u603b\u5f00\u5173 # \u7b2c\u4e8c\u6b65\uff0c\u521b\u5efa\u4e00\u4e2ahandler\uff0c\u7528\u4e8e\u5199\u5165\u65e5\u5fd7\u6587\u4ef6 fh = logging.FileHandler('logs.log', mode='w') fh.setLevel(logging.DEBUG) # \u8f93\u51fa\u5230file\u7684log\u7b49\u7ea7\u7684\u5f00\u5173 # \u7b2c\u4e09\u6b65\uff0c\u5b9a\u4e49handler\u7684\u8f93\u51fa\u683c\u5f0f formatter = logging.Formatter(\"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s\") fh.setFormatter(formatter) # \u7b2c\u56db\u6b65\uff0c\u5c06logger\u6dfb\u52a0\u5230handler\u91cc\u9762 logger.addHandler(fh) # \u65e5\u5fd7 logger.debug('this is a logger debug message') logger.info('this is a logger info message') logger.warning('this is a logger warning message') logger.error('this is a logger error message') logger.critical('this is a logger critical message') \u4e0a\u8ff0\u4ee3\u7801\u5c06\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u65e5\u5fd7\u4fe1\u606f\u5e76\u4fdd\u5b58\u5230logs.log\u6587\u4ef6\u91cc\u9762\u3002","title":"format:"},{"location":"python/plotly/","text":"plotly \u5b66\u4e60\uff1a import plotly.graph_objects as go \u662f\u753b\u56fe\u7684\u4e3b\u8981\u5e93 \u9009\u62e9\u7c7b\u578b go.Scatter() \u753b\u70b9\u6216\u8005\u753b\u7ebf \u5728 Scatter() \u4e2d\u4f20\u5165 mode='markers\u2019 \u5373\u53ef\u521b\u5efa\u6563\u70b9\u56fe \u9ed8\u8ba4 mode='lines' \u5373\u76f4\u7ebf\u56fe \u4e5f\u53ef\u4ee5 mode='lines+markers' \u8bbe\u4e3a\u6298\u7ebf\u56fe go.Bar() \u5efa\u7acb\u67f1\u72b6\u56fe go.Scatter() \u5efa\u7acb\u6563\u70b9\u6216\u8005\u6298\u7ebf\u56fe go.Scatter3d() \u5efa\u7acb3d\u6563\u70b9\u56fe\uff0c\u53ef\u4ee5\u4f20\u5165mode\u53c2\u6570\u540c\u4e0a \u5728\u521b\u5efa\u8fd9\u4e9b\u56fe\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f20\u5165marker\u6216line\u53c2\u6570\u4fee\u6539\u4e00\u4e9b\u7ec6\u8282 \u6563\u70b9\u56fe\u65f6\u4f20\u5165 marker={'size':3,'color':'red'} \u8bbe\u7f6e\u6563\u70b9 size\u4e3a\u70b9\u7684\u5c3a\u5bf8\uff0ccolorscale\u8bbe\u7f6e\u8272\u7ea7\uff0cshowscale\u51b3\u5b9a\u662f\u5426\u663e\u793a\u989c\u8272\u8303\u56f4\u3002 \u5728\u8fd9\u91cccolor\u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u7cfb\u5217\u6570\u5c06\u4e0d\u540c\u6570\u636e\u7684\u989c\u8272\u5206\u5f00\uff0c\u5e38\u7528\u5728classification\u95ee\u9898\u4e2d \u6298\u7ebf\u56fe\u65f6\uff0c\u4f20\u5165 line={\"dash\":\"dot}#\u8bbe\u7f6e\u4e3a\u865a\u7ebf \u8bbe\u7f6e\u7ebf ps:dash \u4e3adot\u65f6\u4e3a\u865a\u7ebf\uff0c\u4e3adash\u65f6\u662f\u7531\u77ed\u7ebf\u7ec4\u6210\u7684\u865a\u7ebf\uff0c\u4e3adashdot\u65f6\u4e3a\u7531\u70b9\u548c\u77ed\u7ebf\u7ec4\u6210\u7684\u865a\u7ebf \u6709\u65f6\u5019\u6570\u636e\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u4e2d\u95f4\u53ef\u80fd\u4f1a\u65ad\u5c42\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u6307\u5b9a connectgaps \u53c2\u6570\uff0c\u4e3aTure\u65f6\uff0c\u5c06\u65ad\u70b9\u8fde\u8d77\u6765 \u200b \u4e5f\u53ef\u4ee5\u4f20\u5165name\u53c2\u6570\u4fee\u6539\u56fe\u4f8b\u540d\u79f0\u3002 \u56fe\u8868\u4f18\u5316 \u5728\u521b\u5efa\u5b8c\u56fe\u8868\u4e4b\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316 fig = go...... fig.update_layout( title='title',#\u56fe\u8868\u6807\u9898 xaxis_title='xlable',#x\u8f74\u540d\u79f0 yaxis_title='ylable',#y\u8f74\u540d\u79f0 width= ,#\u753b\u5e03\u5bbd\u5ea6 height= ,#\u753b\u5e03\u9ad8\u5ea6 template= '''\u753b\u5e03\u98ce\u683c\u6709\u4ee5\u4e0b\u51e0\u79cd\u9009\u62e9\uff1aggplot2\uff0cseaborn\uff0csimple_white\uff0cplotly\uff0cplotly_white\uff0cplotly_dark\uff0cpresentation\uff0cxgridoff\uff0cygridoff\uff0cgridon\uff0cnone\u3002\u9ed8\u8ba4\u662fplotly''' ) \u989c\u8272\u5206\u7c7b import plotly.express as px fig = px.scatter(data,x=data[],y=data[],color='\u67d0\u4e00\u5217') fig = px.scatter_3d(data,x=data[],y=data[],z=data[],color='\u67d0\u5217') fg.show() ~~\u6ce8\u610f\u8fd9\u4e2ascatter\u7684s\u662f\u5c0f\u5199\u7684\uff0c\u4e0d\u8981\u51fa\u9519\u54e6~~ \u7528\u8fd9\u4e2a\u53ef\u4ee5\u663e\u793a\u6e10\u53d8\u7684\u989c\u8272\u4ee5\u66f4\u597d\u7684\u5206\u7c7b\u3002 \u76f4\u65b9\u56fe \u521b\u7acb\u76f4\u65b9\u56fe \u7528 go.Histogram(data[''],xbins={'size':10})#xibns\u4fee\u6539\u7ec4\u8ddd \u5373\u6bcf\u4e00\u4e2a\u67f1\u7684\u5bbd\u5ea6 fig = go.Figure(hist) fig.update_layout(bargap=0.1)#\u4fee\u6539\u81f3\u6bcf\u4e00\u6bb5\u56fe\u7684\u95f4\u8ddd\uff0c\u5373\u4fee\u6539\u6bcf\u4e2a\u67f1\u95f4\u7684\u8ddd\u79bb \u591a\u7ef4\u56fe\u8868 \u591a\u7ef4\u7684\u56fe\u8868\u7684\u8bdd\u7528 plotly.express \u91cc\u7684\u51fd\u6570 fg = px.scatter_matrix(data,dimensions=[''],color='\u67d0\u4e00\u5217') \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4f20\u5165\u7684\u5404\u5217\u540d\u5b57\u7684\u5217\u8868 plotly \u753b\u56fe\u7684\u4e00\u822c\u6b65\u9aa4 1.\u5bfc\u5165\u6a21\u5757\uff1a import plotly import plotly.graph_objects as go import pandas 2.\u7528pandas\u8bfb\u5165csv\u6587\u4ef6 data = pandas.read_csv('') 3.\u9009\u62e9\u5efa\u7acb\u7684\u56fe\u6807\u7c7b\u578b\uff0c\u662f\u67f1\u72b6\u56fe\uff0c\u8fd8\u662f\u6563\u70b9\u56fe\uff0c\u8fd8\u662f\u6298\u7ebf\u56fe\uff0c\u8fd8\u662f3d\u56fe\u3002 4.\u4ee5\u6298\u7ebf\u56fe\u4e3a\u4f8b scatter = go.Scatter(x='x\u8f74\u6570\u636e',y=\u2018y\u8f74\u6570\u636e\u2019\uff0cname='\u56fe\u4f8b\u540d\u79f0') fg = go.Figure(scatter) fg.show() ps:\u82e5\u8981\u5efa\u7acb\u591a\u4e2a\u56fe\u4f8b\u7684\u8868\uff0c\u9700\u8981\u4ee5\u4e0b\u64cd\u4f5c\u3002 scatter1=go..... scatter2=go..... ........ scattern=go..... fg = go.Figure((scatter1,scatter2......)) \u53ef\u4ee5\u7528\u5faa\u73af\u5199\u5165 \u6700\u540e fg.show() 5.\u6ce8\u610f\u7684\u5730\u65b9\uff1a \u67f1\u72b6\u56fe\u6ce8\u610f\u8981\u663e\u793a\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u9762\u7684\u6570\u5b57\u7684\u8bdd\u8981\u52a0\u4e0a text \u53c2\u6570\uff0c\u7136\u540e\u4ee4 textposition \u53c2\u6570\u7684\u503c\u4e3a outside","title":"Plotly"},{"location":"python/plotly/#plotly","text":"import plotly.graph_objects as go \u662f\u753b\u56fe\u7684\u4e3b\u8981\u5e93","title":"plotly\u5b66\u4e60\uff1a"},{"location":"python/plotly/#_1","text":"go.Scatter() \u753b\u70b9\u6216\u8005\u753b\u7ebf \u5728 Scatter() \u4e2d\u4f20\u5165 mode='markers\u2019 \u5373\u53ef\u521b\u5efa\u6563\u70b9\u56fe \u9ed8\u8ba4 mode='lines' \u5373\u76f4\u7ebf\u56fe \u4e5f\u53ef\u4ee5 mode='lines+markers' \u8bbe\u4e3a\u6298\u7ebf\u56fe go.Bar() \u5efa\u7acb\u67f1\u72b6\u56fe go.Scatter() \u5efa\u7acb\u6563\u70b9\u6216\u8005\u6298\u7ebf\u56fe go.Scatter3d() \u5efa\u7acb3d\u6563\u70b9\u56fe\uff0c\u53ef\u4ee5\u4f20\u5165mode\u53c2\u6570\u540c\u4e0a \u5728\u521b\u5efa\u8fd9\u4e9b\u56fe\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f20\u5165marker\u6216line\u53c2\u6570\u4fee\u6539\u4e00\u4e9b\u7ec6\u8282 \u6563\u70b9\u56fe\u65f6\u4f20\u5165 marker={'size':3,'color':'red'} \u8bbe\u7f6e\u6563\u70b9 size\u4e3a\u70b9\u7684\u5c3a\u5bf8\uff0ccolorscale\u8bbe\u7f6e\u8272\u7ea7\uff0cshowscale\u51b3\u5b9a\u662f\u5426\u663e\u793a\u989c\u8272\u8303\u56f4\u3002 \u5728\u8fd9\u91cccolor\u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u7cfb\u5217\u6570\u5c06\u4e0d\u540c\u6570\u636e\u7684\u989c\u8272\u5206\u5f00\uff0c\u5e38\u7528\u5728classification\u95ee\u9898\u4e2d \u6298\u7ebf\u56fe\u65f6\uff0c\u4f20\u5165 line={\"dash\":\"dot}#\u8bbe\u7f6e\u4e3a\u865a\u7ebf \u8bbe\u7f6e\u7ebf ps:dash \u4e3adot\u65f6\u4e3a\u865a\u7ebf\uff0c\u4e3adash\u65f6\u662f\u7531\u77ed\u7ebf\u7ec4\u6210\u7684\u865a\u7ebf\uff0c\u4e3adashdot\u65f6\u4e3a\u7531\u70b9\u548c\u77ed\u7ebf\u7ec4\u6210\u7684\u865a\u7ebf \u6709\u65f6\u5019\u6570\u636e\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u4e2d\u95f4\u53ef\u80fd\u4f1a\u65ad\u5c42\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u6307\u5b9a connectgaps \u53c2\u6570\uff0c\u4e3aTure\u65f6\uff0c\u5c06\u65ad\u70b9\u8fde\u8d77\u6765 \u200b \u4e5f\u53ef\u4ee5\u4f20\u5165name\u53c2\u6570\u4fee\u6539\u56fe\u4f8b\u540d\u79f0\u3002","title":"\u9009\u62e9\u7c7b\u578b"},{"location":"python/plotly/#_2","text":"\u5728\u521b\u5efa\u5b8c\u56fe\u8868\u4e4b\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316 fig = go...... fig.update_layout( title='title',#\u56fe\u8868\u6807\u9898 xaxis_title='xlable',#x\u8f74\u540d\u79f0 yaxis_title='ylable',#y\u8f74\u540d\u79f0 width= ,#\u753b\u5e03\u5bbd\u5ea6 height= ,#\u753b\u5e03\u9ad8\u5ea6 template= '''\u753b\u5e03\u98ce\u683c\u6709\u4ee5\u4e0b\u51e0\u79cd\u9009\u62e9\uff1aggplot2\uff0cseaborn\uff0csimple_white\uff0cplotly\uff0cplotly_white\uff0cplotly_dark\uff0cpresentation\uff0cxgridoff\uff0cygridoff\uff0cgridon\uff0cnone\u3002\u9ed8\u8ba4\u662fplotly''' )","title":"\u56fe\u8868\u4f18\u5316"},{"location":"python/plotly/#_3","text":"import plotly.express as px fig = px.scatter(data,x=data[],y=data[],color='\u67d0\u4e00\u5217') fig = px.scatter_3d(data,x=data[],y=data[],z=data[],color='\u67d0\u5217') fg.show() ~~\u6ce8\u610f\u8fd9\u4e2ascatter\u7684s\u662f\u5c0f\u5199\u7684\uff0c\u4e0d\u8981\u51fa\u9519\u54e6~~ \u7528\u8fd9\u4e2a\u53ef\u4ee5\u663e\u793a\u6e10\u53d8\u7684\u989c\u8272\u4ee5\u66f4\u597d\u7684\u5206\u7c7b\u3002","title":"\u989c\u8272\u5206\u7c7b"},{"location":"python/plotly/#_4","text":"\u521b\u7acb\u76f4\u65b9\u56fe \u7528 go.Histogram(data[''],xbins={'size':10})#xibns\u4fee\u6539\u7ec4\u8ddd \u5373\u6bcf\u4e00\u4e2a\u67f1\u7684\u5bbd\u5ea6 fig = go.Figure(hist) fig.update_layout(bargap=0.1)#\u4fee\u6539\u81f3\u6bcf\u4e00\u6bb5\u56fe\u7684\u95f4\u8ddd\uff0c\u5373\u4fee\u6539\u6bcf\u4e2a\u67f1\u95f4\u7684\u8ddd\u79bb","title":"\u76f4\u65b9\u56fe"},{"location":"python/plotly/#_5","text":"\u591a\u7ef4\u7684\u56fe\u8868\u7684\u8bdd\u7528 plotly.express \u91cc\u7684\u51fd\u6570 fg = px.scatter_matrix(data,dimensions=[''],color='\u67d0\u4e00\u5217') \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4f20\u5165\u7684\u5404\u5217\u540d\u5b57\u7684\u5217\u8868 plotly \u753b\u56fe\u7684\u4e00\u822c\u6b65\u9aa4 1.\u5bfc\u5165\u6a21\u5757\uff1a import plotly import plotly.graph_objects as go import pandas 2.\u7528pandas\u8bfb\u5165csv\u6587\u4ef6 data = pandas.read_csv('') 3.\u9009\u62e9\u5efa\u7acb\u7684\u56fe\u6807\u7c7b\u578b\uff0c\u662f\u67f1\u72b6\u56fe\uff0c\u8fd8\u662f\u6563\u70b9\u56fe\uff0c\u8fd8\u662f\u6298\u7ebf\u56fe\uff0c\u8fd8\u662f3d\u56fe\u3002 4.\u4ee5\u6298\u7ebf\u56fe\u4e3a\u4f8b scatter = go.Scatter(x='x\u8f74\u6570\u636e',y=\u2018y\u8f74\u6570\u636e\u2019\uff0cname='\u56fe\u4f8b\u540d\u79f0') fg = go.Figure(scatter) fg.show() ps:\u82e5\u8981\u5efa\u7acb\u591a\u4e2a\u56fe\u4f8b\u7684\u8868\uff0c\u9700\u8981\u4ee5\u4e0b\u64cd\u4f5c\u3002 scatter1=go..... scatter2=go..... ........ scattern=go..... fg = go.Figure((scatter1,scatter2......)) \u53ef\u4ee5\u7528\u5faa\u73af\u5199\u5165 \u6700\u540e fg.show() 5.\u6ce8\u610f\u7684\u5730\u65b9\uff1a \u67f1\u72b6\u56fe\u6ce8\u610f\u8981\u663e\u793a\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u9762\u7684\u6570\u5b57\u7684\u8bdd\u8981\u52a0\u4e0a text \u53c2\u6570\uff0c\u7136\u540e\u4ee4 textposition \u53c2\u6570\u7684\u503c\u4e3a outside","title":"\u591a\u7ef4\u56fe\u8868"},{"location":"python/pyplot/","text":"matplotlib.pyplot\u5b66\u4e60 \u7ed8\u56fe\u6807\u8bb0 import matplotlib.pyplot as plt import numpy as np ypoints = np.array([1,3,4,5,8,9,6,1,3,4,5,2,4]) plt.plot(ypoints, marker = 'o') # \"o\"\u4ee3\u8868\u5b9e\u5fc3\u5706 plt.show() maker\u53ef\u7528\u7684\u7b26\u53f7\u5982\u4e0b\uff1a fmt\u53c2\u6570 fmt = '[marker][line][color]' \u4f8b\u5982 o:r \uff0c o \u8868\u793a\u5b9e\u5fc3\u5706\u6807\u8bb0\uff0c : \u8868\u793a\u865a\u7ebf\uff0c r \u8868\u793a\u989c\u8272\u4e3a\u7ea2\u8272\u3002 \u7ebf\u7c7b\u578b \u7ebf\u7684\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528 linestyle \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a ls \u3002 \u7ebf\u7684\u5bbd\u5ea6 \u7ebf\u7684\u5bbd\u5ea6\u53ef\u4ee5\u4f7f\u7528 linewidth \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a lw \uff0c\u503c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u5982\uff1a 1 \u3001 2.0 \u3001 5.67 \u7b49\u3002 \u989c\u8272\u7c7b\u578b \u7ebf\u7684\u989c\u8272 \u7ebf\u7684\u989c\u8272\u53ef\u4ee5\u4f7f\u7528 color \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a c \u3002 \u6807\u8bb0\u5927\u5c0f\u4e0e\u989c\u8272 \u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6807\u8bb0\u7684\u5927\u5c0f\u4e0e\u989c\u8272\uff0c\u4f7f\u7528\u7684\u53c2\u6570\u5206\u522b\u662f\uff1a markersize\uff0c\u7b80\u5199\u4e3a ms \uff1a\u5b9a\u4e49\u6807\u8bb0\u7684\u5927\u5c0f\u3002 markerfacecolor\uff0c\u7b80\u5199\u4e3a mfc \uff1a\u5b9a\u4e49\u6807\u8bb0\u5185\u90e8\u7684\u989c\u8272\u3002 markeredgecolor\uff0c\u7b80\u5199\u4e3a mec \uff1a\u5b9a\u4e49\u6807\u8bb0\u8fb9\u6846\u7684\u989c\u8272\u3002 import matplotlib.pyplot as plt import numpy as np ypoints = np.array([6, 2, 13, 10]) plt.plot(ypoints, marker = 'o', ms = 20) plt.show() Matplotlib \u8f74\u6807\u7b7e\u548c\u6807\u9898 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 xlabel() \u548c ylabel() \u65b9\u6cd5\u6765\u8bbe\u7f6e x \u8f74\u548c y \u8f74\u7684\u6807\u7b7e\u3002 import numpy as np import matplotlib.pyplot as plt x = np.array([1, 2, 3, 4]) y = np.array([1, 4, 9, 16]) plt.plot(x, y) plt.xlabel(\"x - label\") plt.ylabel(\"y - label\") plt.show() \u6807\u9898 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 title() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u6807\u9898 \u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u4f53\u6837\u5f0f\uff0c\u901a\u8fc7\u4f20\u5165fontdict\u53c2\u6570 import matplotlib.pyplot as plt import numpy as np font = {\"color\":\"blue\",\"size\":20} ypoints = np.array([1,3,4,5,8,9,6,1,3,4,5,2,4]) plt.plot(ypoints,marker=\"o\",color=\"r\",linestyle=\"-.\") plt.title(\"test\",fontdict=font) plt.xlabel(\"x\",fontdict=font) plt.ylabel(\"y\",fontdict=font) plt.show() Matplotlib \u7f51\u683c\u7ebf \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 grid() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u56fe\u8868\u4e2d\u7684\u7f51\u683c\u7ebf\u3002 grid() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.grid(b=None, which='major', axis='both', ) \u53c2\u6570\u8bf4\u660e\uff1a b \uff1a\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5e03\u5c14\u503c\uff0ctrue \u4e3a\u663e\u793a\u7f51\u683c\u7ebf\uff0cfalse \u4e3a\u4e0d\u663e\u793a\uff0c\u5982\u679c\u8bbe\u7f6e **kwargs \u53c2\u6570\uff0c\u5219\u503c\u4e3a true\u3002 which \uff1a\u53ef\u9009\uff0c\u53ef\u9009\u503c\u6709 'major'\u3001'minor' \u548c 'both'\uff0c\u9ed8\u8ba4\u4e3a 'major'\uff0c\u8868\u793a\u5e94\u7528\u66f4\u6539\u7684\u7f51\u683c\u7ebf\u3002 axis \uff1a\u53ef\u9009\uff0c\u8bbe\u7f6e\u663e\u793a\u54ea\u4e2a\u65b9\u5411\u7684\u7f51\u683c\u7ebf\uff0c\u53ef\u4ee5\u662f\u53d6 'both'\uff08\u9ed8\u8ba4\uff09\uff0c'x' \u6216 'y'\uff0c\u5206\u522b\u8868\u793a\u4e24\u4e2a\u65b9\u5411\uff0cx \u8f74\u65b9\u5411\u6216 y \u8f74\u65b9\u5411\u3002 **kwargs \uff1a\u53ef\u9009\uff0c\u8bbe\u7f6e\u7f51\u683c\u6837\u5f0f\uff0c\u53ef\u4ee5\u662f color='r', linestyle='-' \u548c linewidth=2\uff0c\u5206\u522b\u8868\u793a\u7f51\u683c\u7ebf\u7684\u989c\u8272\uff0c\u6837\u5f0f\u548c\u5bbd\u5ea6\u3002 \u4ee5\u4e0b\u5b9e\u4f8b\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u683c\u7ebf\uff0c\u5e76\u8bbe\u7f6e\u7f51\u683c\u7ebf\u7684\u6837\u5f0f\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a grid(color = 'color', linestyle = 'linestyle', linewidth = number) \u53c2\u6570\u8bf4\u660e\uff1a color\uff1a 'b' \u84dd\u8272\uff0c'm' \u6d0b\u7ea2\u8272\uff0c'g' \u7eff\u8272\uff0c'y' \u9ec4\u8272\uff0c'r' \u7ea2\u8272\uff0c'k' \u9ed1\u8272\uff0c'w' \u767d\u8272\uff0c'c' \u9752\u7eff\u8272\uff0c'#008000' RGB \u989c\u8272\u7b26\u4e32\u3002 linestyle\uff1a '\u2010' \u5b9e\u7ebf\uff0c'\u2010\u2010' \u7834\u6298\u7ebf\uff0c'\u2010.' \u70b9\u5212\u7ebf\uff0c':' \u865a\u7ebf\u3002 linewidth \uff1a\u8bbe\u7f6e\u7ebf\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6570\u5b57\u3002 Matplotlib \u7ed8\u5236\u591a\u56fe \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 subplot() \u548c subplots() \u65b9\u6cd5\u6765\u7ed8\u5236\u591a\u4e2a\u5b50\u56fe\u3002 subpot() \u65b9\u6cd5\u5728\u7ed8\u56fe\u65f6\u9700\u8981\u6307\u5b9a\u4f4d\u7f6e\uff0c subplots() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u751f\u6210\u591a\u4e2a\uff0c\u5728\u8c03\u7528\u65f6\u53ea\u9700\u8981\u8c03\u7528\u751f\u6210\u5bf9\u8c61\u7684 ax \u5373\u53ef\u3002 subplot subplot(nrows, ncols, index, **kwargs) subplot(pos, **kwargs) subplot(**kwargs) subplot(ax) \u4ee5\u4e0a\u51fd\u6570\u5c06\u6574\u4e2a\u7ed8\u56fe\u533a\u57df\u5206\u6210 nrows \u884c\u548c ncols \u5217\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u5bf9\u6bcf\u4e2a\u5b50\u533a\u57df\u8fdb\u884c\u7f16\u53f7 1...N \uff0c\u5de6\u4e0a\u7684\u5b50\u533a\u57df\u7684\u7f16\u53f7\u4e3a 1\u3001\u53f3\u4e0b\u7684\u533a\u57df\u7f16\u53f7\u4e3a N\uff0c\u7f16\u53f7\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 index \u6765\u8bbe\u7f6e\u3002 \u8bbe\u7f6e numRows \uff1d 1\uff0cnumCols \uff1d 2\uff0c\u5c31\u662f\u5c06\u56fe\u8868\u7ed8\u5236\u6210 1x2 \u7684\u56fe\u7247\u533a\u57df, \u5bf9\u5e94\u7684\u5750\u6807\u4e3a\uff1a (1, 1), (1, 2) \u8bbe\u7f6e numRows \uff1d 2\uff0cnumCols \uff1d 2\uff0c\u5c31\u662f\u5c06\u56fe\u8868\u7ed8\u5236\u6210 2x2 \u7684\u56fe\u7247\u533a\u57df, \u5bf9\u5e94\u7684\u5750\u6807\u4e3a\uff1a (1, 1), (1, 2) (2, 1), (2, 2) subplots() subplots() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw) \u53c2\u6570\u8bf4\u660e\uff1a nrows \uff1a\u9ed8\u8ba4\u4e3a 1\uff0c\u8bbe\u7f6e\u56fe\u8868\u7684\u884c\u6570\u3002 ncols \uff1a\u9ed8\u8ba4\u4e3a 1\uff0c\u8bbe\u7f6e\u56fe\u8868\u7684\u5217\u6570\u3002 sharex\u3001sharey \uff1a\u8bbe\u7f6e x\u3001y \u8f74\u662f\u5426\u5171\u4eab\u5c5e\u6027\uff0c\u9ed8\u8ba4\u4e3a false\uff0c\u53ef\u8bbe\u7f6e\u4e3a 'none'\u3001'all'\u3001'row' \u6216 'col'\u3002 False \u6216 none \u6bcf\u4e2a\u5b50\u56fe\u7684 x \u8f74\u6216 y \u8f74\u90fd\u662f\u72ec\u7acb\u7684\uff0cTrue \u6216 'all'\uff1a\u6240\u6709\u5b50\u56fe\u5171\u4eab x \u8f74\u6216 y \u8f74\uff0c'row' \u8bbe\u7f6e\u6bcf\u4e2a\u5b50\u56fe\u884c\u5171\u4eab\u4e00\u4e2a x \u8f74\u6216 y \u8f74\uff0c'col'\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u5b50\u56fe\u5217\u5171\u4eab\u4e00\u4e2a x \u8f74\u6216 y \u8f74\u3002 squeeze \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3a True\uff0c\u8868\u793a\u989d\u5916\u7684\u7ef4\u5ea6\u4ece\u8fd4\u56de\u7684 Axes(\u8f74)\u5bf9\u8c61\u4e2d\u6324\u51fa\uff0c\u5bf9\u4e8e N 1 \u6216 1 N \u4e2a\u5b50\u56fe\uff0c\u8fd4\u56de\u4e00\u4e2a 1 \u7ef4\u6570\u7ec4\uff0c\u5bf9\u4e8e N*M\uff0cN>1 \u548c M>1 \u8fd4\u56de\u4e00\u4e2a 2 \u7ef4\u6570\u7ec4\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0c\u5219\u4e0d\u8fdb\u884c\u6324\u538b\u64cd\u4f5c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u4e3a Axes \u5b9e\u4f8b\u76842\u7ef4\u6570\u7ec4\uff0c\u5373\u4f7f\u5b83\u6700\u7ec8\u662f1x1\u3002 subplot_kw \uff1a\u53ef\u9009\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u628a\u5b57\u5178\u7684\u5173\u952e\u5b57\u4f20\u9012\u7ed9 add_subplot() \u6765\u521b\u5efa\u6bcf\u4e2a\u5b50\u56fe\u3002 gridspec_kw \uff1a\u53ef\u9009\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u628a\u5b57\u5178\u7684\u5173\u952e\u5b57\u4f20\u9012\u7ed9 GridSpec \u6784\u9020\u51fd\u6570\u521b\u5efa\u5b50\u56fe\u653e\u5728\u7f51\u683c\u91cc(grid)\u3002 **fig_kw \uff1a\u628a\u8be6\u7ec6\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9 figure() \u51fd\u6570\u3002 Matplotlib \u6563\u70b9\u56fe \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 scatter() \u65b9\u6cd5\u6765\u7ed8\u5236\u6563\u70b9\u56fe\u3002 scatter() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs) \u53c2\u6570\u8bf4\u660e\uff1a x\uff0cy \uff1a\u957f\u5ea6\u76f8\u540c\u7684\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5373\u5c06\u7ed8\u5236\u6563\u70b9\u56fe\u7684\u6570\u636e\u70b9\uff0c\u8f93\u5165\u6570\u636e\u3002 s \uff1a\u70b9\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4 20\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u6bcf\u4e2a\u53c2\u6570\u4e3a\u5bf9\u5e94\u70b9\u7684\u5927\u5c0f\u3002 c \uff1a\u70b9\u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u84dd\u8272 'b'\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e2a RGB \u6216 RGBA \u4e8c\u7ef4\u884c\u6570\u7ec4\u3002 marker \uff1a\u70b9\u7684\u6837\u5f0f\uff0c\u9ed8\u8ba4\u5c0f\u5706\u5708 'o'\u3002 cmap \uff1aColormap\uff0c\u9ed8\u8ba4 None\uff0c\u6807\u91cf\u6216\u8005\u662f\u4e00\u4e2a colormap \u7684\u540d\u5b57\uff0c\u53ea\u6709 c \u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u65f6\u624d\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\u7533\u660e\u5c31\u662f image.cmap\u3002 norm \uff1aNormalize\uff0c\u9ed8\u8ba4 None\uff0c\u6570\u636e\u4eae\u5ea6\u5728 0-1 \u4e4b\u95f4\uff0c\u53ea\u6709 c \u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\u7684\u65f6\u624d\u4f7f\u7528\u3002 vmin\uff0cvmax\uff1a \uff1a\u4eae\u5ea6\u8bbe\u7f6e\uff0c\u5728 norm \u53c2\u6570\u5b58\u5728\u65f6\u4f1a\u5ffd\u7565\u3002 alpha\uff1a \uff1a\u900f\u660e\u5ea6\u8bbe\u7f6e\uff0c0-1 \u4e4b\u95f4\uff0c\u9ed8\u8ba4 None\uff0c\u5373\u4e0d\u900f\u660e\u3002 linewidths\uff1a \uff1a\u6807\u8bb0\u70b9\u7684\u957f\u5ea6\u3002 edgecolors\uff1a \uff1a\u989c\u8272\u6216\u989c\u8272\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a 'face'\uff0c\u53ef\u9009\u503c\u6709 'face', 'none', None\u3002 plotnonfinite\uff1a \uff1a\u5e03\u5c14\u503c\uff0c\u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u975e\u9650\u5b9a\u7684 c ( inf, -inf \u6216 nan) \u7ed8\u5236\u70b9\u3002 **kwargs\uff1a \uff1a\u5176\u4ed6\u53c2\u6570\u3002 \u8bbe\u7f6e\u989c\u8272\u6761\u9700\u8981\u4f7f\u7528 cmap \u53c2\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a 'viridis'\uff0c\u4e4b\u540e\u989c\u8272\u503c\u8bbe\u7f6e\u4e3a 0 \u5230 100 \u7684\u6570\u7ec4\u3002 \u5982\u679c\u8981\u663e\u793a\u989c\u8272\u6761\uff0c\u9700\u8981\u4f7f\u7528 plt.colorbar() \u65b9\u6cd5\uff1a Matplotlib \u67f1\u5f62\u56fe \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 bar() \u65b9\u6cd5\u6765\u7ed8\u5236\u67f1\u5f62\u56fe\u3002 bar() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs) \u53c2\u6570\u8bf4\u660e\uff1a x \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684 x \u8f74\u6570\u636e\u3002 height \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684\u9ad8\u5ea6\u3002 width \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684\u5bbd\u5ea6\u3002 bottom \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u5e95\u5ea7\u7684 y \u5750\u6807\uff0c\u9ed8\u8ba4 0\u3002 align \uff1a\u67f1\u5f62\u56fe\u4e0e x \u5750\u6807\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c'center' \u4ee5 x \u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\uff0c\u8fd9\u662f\u9ed8\u8ba4\u503c\u3002 'edge'\uff1a\u5c06\u67f1\u5f62\u56fe\u7684\u5de6\u8fb9\u7f18\u4e0e x \u4f4d\u7f6e\u5bf9\u9f50\u3002\u8981\u5bf9\u9f50\u53f3\u8fb9\u7f18\u7684\u6761\u5f62\uff0c\u53ef\u4ee5\u4f20\u9012\u8d1f\u6570\u7684\u5bbd\u5ea6\u503c\u53ca align='edge'\u3002 **kwargs\uff1a \uff1a\u5176\u4ed6\u53c2\u6570\u3002 \u5782\u76f4\u65b9\u5411\u7684\u67f1\u5f62\u56fe\u53ef\u4ee5\u4f7f\u7528 barh() \u65b9\u6cd5\u6765\u8bbe\u7f6e\uff1a Matplotlib \u997c\u56fe \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 pie() \u65b9\u6cd5\u6765\u7ed8\u5236\u997c\u56fe\u3002 pie() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=0, 0, frame=False, rotatelabels=False, *, normalize=None, data=None)[source] \u53c2\u6570\u8bf4\u660e\uff1a x \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6247\u5f62\u7684\u9762\u79ef\u3002 explode \uff1a\u6570\u7ec4\uff0c\u8868\u793a\u5404\u4e2a\u6247\u5f62\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 labels \uff1a\u5217\u8868\uff0c\u5404\u4e2a\u6247\u5f62\u7684\u6807\u7b7e\uff0c\u9ed8\u8ba4\u503c\u4e3a None\u3002 colors \uff1a\u6570\u7ec4\uff0c\u8868\u793a\u5404\u4e2a\u6247\u5f62\u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u503c\u4e3a None\u3002 autopct \uff1a\u8bbe\u7f6e\u997c\u56fe\u5185\u5404\u4e2a\u6247\u5f62\u767e\u5206\u6bd4\u663e\u793a\u683c\u5f0f\uff0c %d%% \u6574\u6570\u767e\u5206\u6bd4\uff0c %0.1f \u4e00\u4f4d\u5c0f\u6570\uff0c %0.1f%% \u4e00\u4f4d\u5c0f\u6570\u767e\u5206\u6bd4\uff0c %0.2f%% \u4e24\u4f4d\u5c0f\u6570\u767e\u5206\u6bd4\u3002 labeldistance \uff1a\u6807\u7b7e\u6807\u8bb0\u7684\u7ed8\u5236\u4f4d\u7f6e\uff0c\u76f8\u5bf9\u4e8e\u534a\u5f84\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u503c\u4e3a 1.1\uff0c\u5982 <1 \u5219\u7ed8\u5236\u5728\u997c\u56fe\u5185\u4fa7\u3002 pctdistance\uff1a \uff1a\u7c7b\u4f3c\u4e8e labeldistance\uff0c\u6307\u5b9a autopct \u7684\u4f4d\u7f6e\u523b\u5ea6\uff0c\u9ed8\u8ba4\u503c\u4e3a 0.6\u3002 shadow\uff1a \uff1a\u5e03\u5c14\u503c True \u6216 False\uff0c\u8bbe\u7f6e\u997c\u56fe\u7684\u9634\u5f71\uff0c\u9ed8\u8ba4\u4e3a False\uff0c\u4e0d\u8bbe\u7f6e\u9634\u5f71\u3002 radius\uff1a \uff1a\u8bbe\u7f6e\u997c\u56fe\u7684\u534a\u5f84\uff0c\u9ed8\u8ba4\u4e3a 1\u3002 startangle\uff1a \uff1a\u8d77\u59cb\u7ed8\u5236\u997c\u56fe\u7684\u89d2\u5ea6\uff0c\u9ed8\u8ba4\u4e3a\u4ece x \u8f74\u6b63\u65b9\u5411\u9006\u65f6\u9488\u753b\u8d77\uff0c\u5982\u8bbe\u5b9a =90 \u5219\u4ece y \u8f74\u6b63\u65b9\u5411\u753b\u8d77\u3002 counterclock \uff1a\u5e03\u5c14\u503c\uff0c\u8bbe\u7f6e\u6307\u9488\u65b9\u5411\uff0c\u9ed8\u8ba4\u4e3a True\uff0c\u5373\u9006\u65f6\u9488\uff0cFalse \u4e3a\u987a\u65f6\u9488\u3002 wedgeprops \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c None\u3002\u53c2\u6570\u5b57\u5178\u4f20\u9012\u7ed9 wedge \u5bf9\u8c61\u7528\u6765\u753b\u4e00\u4e2a\u997c\u56fe\u3002\u4f8b\u5982\uff1awedgeprops={'linewidth':5} \u8bbe\u7f6e wedge \u7ebf\u5bbd\u4e3a5\u3002 textprops \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\u4e3a\uff1aNone\u3002\u4f20\u9012\u7ed9 text \u5bf9\u8c61\u7684\u5b57\u5178\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u6807\u7b7e\uff08labels\uff09\u548c\u6bd4\u4f8b\u6587\u5b57\u7684\u683c\u5f0f\u3002 center \uff1a\u6d6e\u70b9\u7c7b\u578b\u7684\u5217\u8868\uff0c\u9ed8\u8ba4\u503c\uff1a(0,0)\u3002\u7528\u4e8e\u8bbe\u7f6e\u56fe\u6807\u4e2d\u5fc3\u4f4d\u7f6e\u3002 frame \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\uff1aFalse\u3002\u5982\u679c\u662f True\uff0c\u7ed8\u5236\u5e26\u6709\u8868\u7684\u8f74\u6846\u67b6\u3002 rotatelabels \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a False\u3002\u5982\u679c\u4e3a True\uff0c\u65cb\u8f6c\u6bcf\u4e2a label \u5230\u6307\u5b9a\u7684\u89d2\u5ea6\u3002","title":"Matplotlib.pyplot\u5b66\u4e60"},{"location":"python/pyplot/#matplotlibpyplot","text":"","title":"matplotlib.pyplot\u5b66\u4e60"},{"location":"python/pyplot/#_1","text":"import matplotlib.pyplot as plt import numpy as np ypoints = np.array([1,3,4,5,8,9,6,1,3,4,5,2,4]) plt.plot(ypoints, marker = 'o') # \"o\"\u4ee3\u8868\u5b9e\u5fc3\u5706 plt.show() maker\u53ef\u7528\u7684\u7b26\u53f7\u5982\u4e0b\uff1a","title":"\u7ed8\u56fe\u6807\u8bb0"},{"location":"python/pyplot/#fmt","text":"fmt = '[marker][line][color]' \u4f8b\u5982 o:r \uff0c o \u8868\u793a\u5b9e\u5fc3\u5706\u6807\u8bb0\uff0c : \u8868\u793a\u865a\u7ebf\uff0c r \u8868\u793a\u989c\u8272\u4e3a\u7ea2\u8272\u3002","title":"fmt\u53c2\u6570"},{"location":"python/pyplot/#_2","text":"\u7ebf\u7684\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528 linestyle \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a ls \u3002","title":"\u7ebf\u7c7b\u578b"},{"location":"python/pyplot/#_3","text":"\u7ebf\u7684\u5bbd\u5ea6\u53ef\u4ee5\u4f7f\u7528 linewidth \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a lw \uff0c\u503c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u5982\uff1a 1 \u3001 2.0 \u3001 5.67 \u7b49\u3002","title":"\u7ebf\u7684\u5bbd\u5ea6"},{"location":"python/pyplot/#_4","text":"","title":"\u989c\u8272\u7c7b\u578b"},{"location":"python/pyplot/#_5","text":"\u7ebf\u7684\u989c\u8272\u53ef\u4ee5\u4f7f\u7528 color \u53c2\u6570\u6765\u5b9a\u4e49\uff0c\u7b80\u5199\u4e3a c \u3002","title":"\u7ebf\u7684\u989c\u8272"},{"location":"python/pyplot/#_6","text":"\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6807\u8bb0\u7684\u5927\u5c0f\u4e0e\u989c\u8272\uff0c\u4f7f\u7528\u7684\u53c2\u6570\u5206\u522b\u662f\uff1a markersize\uff0c\u7b80\u5199\u4e3a ms \uff1a\u5b9a\u4e49\u6807\u8bb0\u7684\u5927\u5c0f\u3002 markerfacecolor\uff0c\u7b80\u5199\u4e3a mfc \uff1a\u5b9a\u4e49\u6807\u8bb0\u5185\u90e8\u7684\u989c\u8272\u3002 markeredgecolor\uff0c\u7b80\u5199\u4e3a mec \uff1a\u5b9a\u4e49\u6807\u8bb0\u8fb9\u6846\u7684\u989c\u8272\u3002 import matplotlib.pyplot as plt import numpy as np ypoints = np.array([6, 2, 13, 10]) plt.plot(ypoints, marker = 'o', ms = 20) plt.show()","title":"\u6807\u8bb0\u5927\u5c0f\u4e0e\u989c\u8272"},{"location":"python/pyplot/#matplotlib","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 xlabel() \u548c ylabel() \u65b9\u6cd5\u6765\u8bbe\u7f6e x \u8f74\u548c y \u8f74\u7684\u6807\u7b7e\u3002 import numpy as np import matplotlib.pyplot as plt x = np.array([1, 2, 3, 4]) y = np.array([1, 4, 9, 16]) plt.plot(x, y) plt.xlabel(\"x - label\") plt.ylabel(\"y - label\") plt.show()","title":"Matplotlib \u8f74\u6807\u7b7e\u548c\u6807\u9898"},{"location":"python/pyplot/#_7","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 title() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u6807\u9898 \u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u4f53\u6837\u5f0f\uff0c\u901a\u8fc7\u4f20\u5165fontdict\u53c2\u6570 import matplotlib.pyplot as plt import numpy as np font = {\"color\":\"blue\",\"size\":20} ypoints = np.array([1,3,4,5,8,9,6,1,3,4,5,2,4]) plt.plot(ypoints,marker=\"o\",color=\"r\",linestyle=\"-.\") plt.title(\"test\",fontdict=font) plt.xlabel(\"x\",fontdict=font) plt.ylabel(\"y\",fontdict=font) plt.show()","title":"\u6807\u9898"},{"location":"python/pyplot/#matplotlib_1","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 grid() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u56fe\u8868\u4e2d\u7684\u7f51\u683c\u7ebf\u3002 grid() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.grid(b=None, which='major', axis='both', ) \u53c2\u6570\u8bf4\u660e\uff1a b \uff1a\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5e03\u5c14\u503c\uff0ctrue \u4e3a\u663e\u793a\u7f51\u683c\u7ebf\uff0cfalse \u4e3a\u4e0d\u663e\u793a\uff0c\u5982\u679c\u8bbe\u7f6e **kwargs \u53c2\u6570\uff0c\u5219\u503c\u4e3a true\u3002 which \uff1a\u53ef\u9009\uff0c\u53ef\u9009\u503c\u6709 'major'\u3001'minor' \u548c 'both'\uff0c\u9ed8\u8ba4\u4e3a 'major'\uff0c\u8868\u793a\u5e94\u7528\u66f4\u6539\u7684\u7f51\u683c\u7ebf\u3002 axis \uff1a\u53ef\u9009\uff0c\u8bbe\u7f6e\u663e\u793a\u54ea\u4e2a\u65b9\u5411\u7684\u7f51\u683c\u7ebf\uff0c\u53ef\u4ee5\u662f\u53d6 'both'\uff08\u9ed8\u8ba4\uff09\uff0c'x' \u6216 'y'\uff0c\u5206\u522b\u8868\u793a\u4e24\u4e2a\u65b9\u5411\uff0cx \u8f74\u65b9\u5411\u6216 y \u8f74\u65b9\u5411\u3002 **kwargs \uff1a\u53ef\u9009\uff0c\u8bbe\u7f6e\u7f51\u683c\u6837\u5f0f\uff0c\u53ef\u4ee5\u662f color='r', linestyle='-' \u548c linewidth=2\uff0c\u5206\u522b\u8868\u793a\u7f51\u683c\u7ebf\u7684\u989c\u8272\uff0c\u6837\u5f0f\u548c\u5bbd\u5ea6\u3002 \u4ee5\u4e0b\u5b9e\u4f8b\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u683c\u7ebf\uff0c\u5e76\u8bbe\u7f6e\u7f51\u683c\u7ebf\u7684\u6837\u5f0f\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a grid(color = 'color', linestyle = 'linestyle', linewidth = number) \u53c2\u6570\u8bf4\u660e\uff1a color\uff1a 'b' \u84dd\u8272\uff0c'm' \u6d0b\u7ea2\u8272\uff0c'g' \u7eff\u8272\uff0c'y' \u9ec4\u8272\uff0c'r' \u7ea2\u8272\uff0c'k' \u9ed1\u8272\uff0c'w' \u767d\u8272\uff0c'c' \u9752\u7eff\u8272\uff0c'#008000' RGB \u989c\u8272\u7b26\u4e32\u3002 linestyle\uff1a '\u2010' \u5b9e\u7ebf\uff0c'\u2010\u2010' \u7834\u6298\u7ebf\uff0c'\u2010.' \u70b9\u5212\u7ebf\uff0c':' \u865a\u7ebf\u3002 linewidth \uff1a\u8bbe\u7f6e\u7ebf\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6570\u5b57\u3002","title":"Matplotlib \u7f51\u683c\u7ebf"},{"location":"python/pyplot/#matplotlib_2","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 subplot() \u548c subplots() \u65b9\u6cd5\u6765\u7ed8\u5236\u591a\u4e2a\u5b50\u56fe\u3002 subpot() \u65b9\u6cd5\u5728\u7ed8\u56fe\u65f6\u9700\u8981\u6307\u5b9a\u4f4d\u7f6e\uff0c subplots() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u751f\u6210\u591a\u4e2a\uff0c\u5728\u8c03\u7528\u65f6\u53ea\u9700\u8981\u8c03\u7528\u751f\u6210\u5bf9\u8c61\u7684 ax \u5373\u53ef\u3002","title":"Matplotlib \u7ed8\u5236\u591a\u56fe"},{"location":"python/pyplot/#subplot","text":"subplot(nrows, ncols, index, **kwargs) subplot(pos, **kwargs) subplot(**kwargs) subplot(ax) \u4ee5\u4e0a\u51fd\u6570\u5c06\u6574\u4e2a\u7ed8\u56fe\u533a\u57df\u5206\u6210 nrows \u884c\u548c ncols \u5217\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u5bf9\u6bcf\u4e2a\u5b50\u533a\u57df\u8fdb\u884c\u7f16\u53f7 1...N \uff0c\u5de6\u4e0a\u7684\u5b50\u533a\u57df\u7684\u7f16\u53f7\u4e3a 1\u3001\u53f3\u4e0b\u7684\u533a\u57df\u7f16\u53f7\u4e3a N\uff0c\u7f16\u53f7\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 index \u6765\u8bbe\u7f6e\u3002 \u8bbe\u7f6e numRows \uff1d 1\uff0cnumCols \uff1d 2\uff0c\u5c31\u662f\u5c06\u56fe\u8868\u7ed8\u5236\u6210 1x2 \u7684\u56fe\u7247\u533a\u57df, \u5bf9\u5e94\u7684\u5750\u6807\u4e3a\uff1a (1, 1), (1, 2) \u8bbe\u7f6e numRows \uff1d 2\uff0cnumCols \uff1d 2\uff0c\u5c31\u662f\u5c06\u56fe\u8868\u7ed8\u5236\u6210 2x2 \u7684\u56fe\u7247\u533a\u57df, \u5bf9\u5e94\u7684\u5750\u6807\u4e3a\uff1a (1, 1), (1, 2) (2, 1), (2, 2)","title":"subplot"},{"location":"python/pyplot/#subplots","text":"subplots() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw) \u53c2\u6570\u8bf4\u660e\uff1a nrows \uff1a\u9ed8\u8ba4\u4e3a 1\uff0c\u8bbe\u7f6e\u56fe\u8868\u7684\u884c\u6570\u3002 ncols \uff1a\u9ed8\u8ba4\u4e3a 1\uff0c\u8bbe\u7f6e\u56fe\u8868\u7684\u5217\u6570\u3002 sharex\u3001sharey \uff1a\u8bbe\u7f6e x\u3001y \u8f74\u662f\u5426\u5171\u4eab\u5c5e\u6027\uff0c\u9ed8\u8ba4\u4e3a false\uff0c\u53ef\u8bbe\u7f6e\u4e3a 'none'\u3001'all'\u3001'row' \u6216 'col'\u3002 False \u6216 none \u6bcf\u4e2a\u5b50\u56fe\u7684 x \u8f74\u6216 y \u8f74\u90fd\u662f\u72ec\u7acb\u7684\uff0cTrue \u6216 'all'\uff1a\u6240\u6709\u5b50\u56fe\u5171\u4eab x \u8f74\u6216 y \u8f74\uff0c'row' \u8bbe\u7f6e\u6bcf\u4e2a\u5b50\u56fe\u884c\u5171\u4eab\u4e00\u4e2a x \u8f74\u6216 y \u8f74\uff0c'col'\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u5b50\u56fe\u5217\u5171\u4eab\u4e00\u4e2a x \u8f74\u6216 y \u8f74\u3002 squeeze \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3a True\uff0c\u8868\u793a\u989d\u5916\u7684\u7ef4\u5ea6\u4ece\u8fd4\u56de\u7684 Axes(\u8f74)\u5bf9\u8c61\u4e2d\u6324\u51fa\uff0c\u5bf9\u4e8e N 1 \u6216 1 N \u4e2a\u5b50\u56fe\uff0c\u8fd4\u56de\u4e00\u4e2a 1 \u7ef4\u6570\u7ec4\uff0c\u5bf9\u4e8e N*M\uff0cN>1 \u548c M>1 \u8fd4\u56de\u4e00\u4e2a 2 \u7ef4\u6570\u7ec4\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0c\u5219\u4e0d\u8fdb\u884c\u6324\u538b\u64cd\u4f5c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u4e3a Axes \u5b9e\u4f8b\u76842\u7ef4\u6570\u7ec4\uff0c\u5373\u4f7f\u5b83\u6700\u7ec8\u662f1x1\u3002 subplot_kw \uff1a\u53ef\u9009\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u628a\u5b57\u5178\u7684\u5173\u952e\u5b57\u4f20\u9012\u7ed9 add_subplot() \u6765\u521b\u5efa\u6bcf\u4e2a\u5b50\u56fe\u3002 gridspec_kw \uff1a\u53ef\u9009\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u628a\u5b57\u5178\u7684\u5173\u952e\u5b57\u4f20\u9012\u7ed9 GridSpec \u6784\u9020\u51fd\u6570\u521b\u5efa\u5b50\u56fe\u653e\u5728\u7f51\u683c\u91cc(grid)\u3002 **fig_kw \uff1a\u628a\u8be6\u7ec6\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9 figure() \u51fd\u6570\u3002","title":"subplots()"},{"location":"python/pyplot/#matplotlib_3","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 scatter() \u65b9\u6cd5\u6765\u7ed8\u5236\u6563\u70b9\u56fe\u3002 scatter() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs) \u53c2\u6570\u8bf4\u660e\uff1a x\uff0cy \uff1a\u957f\u5ea6\u76f8\u540c\u7684\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5373\u5c06\u7ed8\u5236\u6563\u70b9\u56fe\u7684\u6570\u636e\u70b9\uff0c\u8f93\u5165\u6570\u636e\u3002 s \uff1a\u70b9\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4 20\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u6bcf\u4e2a\u53c2\u6570\u4e3a\u5bf9\u5e94\u70b9\u7684\u5927\u5c0f\u3002 c \uff1a\u70b9\u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u84dd\u8272 'b'\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e2a RGB \u6216 RGBA \u4e8c\u7ef4\u884c\u6570\u7ec4\u3002 marker \uff1a\u70b9\u7684\u6837\u5f0f\uff0c\u9ed8\u8ba4\u5c0f\u5706\u5708 'o'\u3002 cmap \uff1aColormap\uff0c\u9ed8\u8ba4 None\uff0c\u6807\u91cf\u6216\u8005\u662f\u4e00\u4e2a colormap \u7684\u540d\u5b57\uff0c\u53ea\u6709 c \u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u65f6\u624d\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\u7533\u660e\u5c31\u662f image.cmap\u3002 norm \uff1aNormalize\uff0c\u9ed8\u8ba4 None\uff0c\u6570\u636e\u4eae\u5ea6\u5728 0-1 \u4e4b\u95f4\uff0c\u53ea\u6709 c \u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\u7684\u65f6\u624d\u4f7f\u7528\u3002 vmin\uff0cvmax\uff1a \uff1a\u4eae\u5ea6\u8bbe\u7f6e\uff0c\u5728 norm \u53c2\u6570\u5b58\u5728\u65f6\u4f1a\u5ffd\u7565\u3002 alpha\uff1a \uff1a\u900f\u660e\u5ea6\u8bbe\u7f6e\uff0c0-1 \u4e4b\u95f4\uff0c\u9ed8\u8ba4 None\uff0c\u5373\u4e0d\u900f\u660e\u3002 linewidths\uff1a \uff1a\u6807\u8bb0\u70b9\u7684\u957f\u5ea6\u3002 edgecolors\uff1a \uff1a\u989c\u8272\u6216\u989c\u8272\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a 'face'\uff0c\u53ef\u9009\u503c\u6709 'face', 'none', None\u3002 plotnonfinite\uff1a \uff1a\u5e03\u5c14\u503c\uff0c\u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u975e\u9650\u5b9a\u7684 c ( inf, -inf \u6216 nan) \u7ed8\u5236\u70b9\u3002 **kwargs\uff1a \uff1a\u5176\u4ed6\u53c2\u6570\u3002 \u8bbe\u7f6e\u989c\u8272\u6761\u9700\u8981\u4f7f\u7528 cmap \u53c2\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a 'viridis'\uff0c\u4e4b\u540e\u989c\u8272\u503c\u8bbe\u7f6e\u4e3a 0 \u5230 100 \u7684\u6570\u7ec4\u3002 \u5982\u679c\u8981\u663e\u793a\u989c\u8272\u6761\uff0c\u9700\u8981\u4f7f\u7528 plt.colorbar() \u65b9\u6cd5\uff1a","title":"Matplotlib \u6563\u70b9\u56fe"},{"location":"python/pyplot/#matplotlib_4","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 bar() \u65b9\u6cd5\u6765\u7ed8\u5236\u67f1\u5f62\u56fe\u3002 bar() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs) \u53c2\u6570\u8bf4\u660e\uff1a x \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684 x \u8f74\u6570\u636e\u3002 height \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684\u9ad8\u5ea6\u3002 width \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u67f1\u5f62\u56fe\u7684\u5bbd\u5ea6\u3002 bottom \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u5e95\u5ea7\u7684 y \u5750\u6807\uff0c\u9ed8\u8ba4 0\u3002 align \uff1a\u67f1\u5f62\u56fe\u4e0e x \u5750\u6807\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c'center' \u4ee5 x \u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\uff0c\u8fd9\u662f\u9ed8\u8ba4\u503c\u3002 'edge'\uff1a\u5c06\u67f1\u5f62\u56fe\u7684\u5de6\u8fb9\u7f18\u4e0e x \u4f4d\u7f6e\u5bf9\u9f50\u3002\u8981\u5bf9\u9f50\u53f3\u8fb9\u7f18\u7684\u6761\u5f62\uff0c\u53ef\u4ee5\u4f20\u9012\u8d1f\u6570\u7684\u5bbd\u5ea6\u503c\u53ca align='edge'\u3002 **kwargs\uff1a \uff1a\u5176\u4ed6\u53c2\u6570\u3002 \u5782\u76f4\u65b9\u5411\u7684\u67f1\u5f62\u56fe\u53ef\u4ee5\u4f7f\u7528 barh() \u65b9\u6cd5\u6765\u8bbe\u7f6e\uff1a","title":"Matplotlib \u67f1\u5f62\u56fe"},{"location":"python/pyplot/#matplotlib_5","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pyplot \u4e2d\u7684 pie() \u65b9\u6cd5\u6765\u7ed8\u5236\u997c\u56fe\u3002 pie() \u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a matplotlib.pyplot.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=0, 0, frame=False, rotatelabels=False, *, normalize=None, data=None)[source] \u53c2\u6570\u8bf4\u660e\uff1a x \uff1a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6247\u5f62\u7684\u9762\u79ef\u3002 explode \uff1a\u6570\u7ec4\uff0c\u8868\u793a\u5404\u4e2a\u6247\u5f62\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 labels \uff1a\u5217\u8868\uff0c\u5404\u4e2a\u6247\u5f62\u7684\u6807\u7b7e\uff0c\u9ed8\u8ba4\u503c\u4e3a None\u3002 colors \uff1a\u6570\u7ec4\uff0c\u8868\u793a\u5404\u4e2a\u6247\u5f62\u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u503c\u4e3a None\u3002 autopct \uff1a\u8bbe\u7f6e\u997c\u56fe\u5185\u5404\u4e2a\u6247\u5f62\u767e\u5206\u6bd4\u663e\u793a\u683c\u5f0f\uff0c %d%% \u6574\u6570\u767e\u5206\u6bd4\uff0c %0.1f \u4e00\u4f4d\u5c0f\u6570\uff0c %0.1f%% \u4e00\u4f4d\u5c0f\u6570\u767e\u5206\u6bd4\uff0c %0.2f%% \u4e24\u4f4d\u5c0f\u6570\u767e\u5206\u6bd4\u3002 labeldistance \uff1a\u6807\u7b7e\u6807\u8bb0\u7684\u7ed8\u5236\u4f4d\u7f6e\uff0c\u76f8\u5bf9\u4e8e\u534a\u5f84\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u503c\u4e3a 1.1\uff0c\u5982 <1 \u5219\u7ed8\u5236\u5728\u997c\u56fe\u5185\u4fa7\u3002 pctdistance\uff1a \uff1a\u7c7b\u4f3c\u4e8e labeldistance\uff0c\u6307\u5b9a autopct \u7684\u4f4d\u7f6e\u523b\u5ea6\uff0c\u9ed8\u8ba4\u503c\u4e3a 0.6\u3002 shadow\uff1a \uff1a\u5e03\u5c14\u503c True \u6216 False\uff0c\u8bbe\u7f6e\u997c\u56fe\u7684\u9634\u5f71\uff0c\u9ed8\u8ba4\u4e3a False\uff0c\u4e0d\u8bbe\u7f6e\u9634\u5f71\u3002 radius\uff1a \uff1a\u8bbe\u7f6e\u997c\u56fe\u7684\u534a\u5f84\uff0c\u9ed8\u8ba4\u4e3a 1\u3002 startangle\uff1a \uff1a\u8d77\u59cb\u7ed8\u5236\u997c\u56fe\u7684\u89d2\u5ea6\uff0c\u9ed8\u8ba4\u4e3a\u4ece x \u8f74\u6b63\u65b9\u5411\u9006\u65f6\u9488\u753b\u8d77\uff0c\u5982\u8bbe\u5b9a =90 \u5219\u4ece y \u8f74\u6b63\u65b9\u5411\u753b\u8d77\u3002 counterclock \uff1a\u5e03\u5c14\u503c\uff0c\u8bbe\u7f6e\u6307\u9488\u65b9\u5411\uff0c\u9ed8\u8ba4\u4e3a True\uff0c\u5373\u9006\u65f6\u9488\uff0cFalse \u4e3a\u987a\u65f6\u9488\u3002 wedgeprops \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c None\u3002\u53c2\u6570\u5b57\u5178\u4f20\u9012\u7ed9 wedge \u5bf9\u8c61\u7528\u6765\u753b\u4e00\u4e2a\u997c\u56fe\u3002\u4f8b\u5982\uff1awedgeprops={'linewidth':5} \u8bbe\u7f6e wedge \u7ebf\u5bbd\u4e3a5\u3002 textprops \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\u4e3a\uff1aNone\u3002\u4f20\u9012\u7ed9 text \u5bf9\u8c61\u7684\u5b57\u5178\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u6807\u7b7e\uff08labels\uff09\u548c\u6bd4\u4f8b\u6587\u5b57\u7684\u683c\u5f0f\u3002 center \uff1a\u6d6e\u70b9\u7c7b\u578b\u7684\u5217\u8868\uff0c\u9ed8\u8ba4\u503c\uff1a(0,0)\u3002\u7528\u4e8e\u8bbe\u7f6e\u56fe\u6807\u4e2d\u5fc3\u4f4d\u7f6e\u3002 frame \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\uff1aFalse\u3002\u5982\u679c\u662f True\uff0c\u7ed8\u5236\u5e26\u6709\u8868\u7684\u8f74\u6846\u67b6\u3002 rotatelabels \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a False\u3002\u5982\u679c\u4e3a True\uff0c\u65cb\u8f6c\u6bcf\u4e2a label \u5230\u6307\u5b9a\u7684\u89d2\u5ea6\u3002","title":"Matplotlib \u997c\u56fe"},{"location":"python/pyqt/","text":"\u5bf9pyqt5\u7684\u5b66\u4e60 QtCore:\u5305\u542b\u4e86\u6838\u5fc3\u7684\u975eGUI\u529f\u80fd\u3002\u6b64\u6a21\u5757\u7528\u4e8e\u5904\u7406\u65f6\u95f4\u3001\u6587\u4ef6\u548c\u76ee\u5f55\u3001\u5404\u79cd\u6570\u636e\u7c7b\u578b\u3001\u6d41\u3001URL\u3001MIME\u7c7b\u578b\u3001\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u3002 QtGui\u5305\u542b\u7c7b\u7a97\u53e3\u7cfb\u7edf\u96c6\u6210\u3001\u4e8b\u4ef6\u5904\u7406\u3001\u4e8c\u7ef4\u56fe\u5f62\u3001\u57fa\u672c\u6210\u50cf\u3001\u5b57\u4f53\u548c\u6587\u672c\u3002 qtwidgets\u6a21\u5757\u5305\u542b\u521b\u9020\u7ecf\u5178\u684c\u9762\u98ce\u683c\u7684\u7528\u6237\u754c\u9762\u63d0\u4f9b\u4e86\u4e00\u5957UI\u5143\u7d20\u7684\u7c7b\u3002 QtMultimedia\u5305\u542b\u7684\u7c7b\u6765\u5904\u7406\u591a\u5a92\u4f53\u5185\u5bb9\u548cAPI\u6765\u8bbf\u95ee\u76f8\u673a\u548c\u6536\u97f3\u673a\u7684\u529f\u80fd\u3002 Qtbluetooth\u6a21\u5757\u5305\u542b\u7c7b\u7684\u626b\u63cf\u8bbe\u5907\u548c\u8fde\u63a5\u5e76\u4e0e\u4ed6\u4eec\u4e92\u52a8\u3002\u63cf\u8ff0\u6a21\u5757\u5305\u542b\u4e86\u7f51\u7edc\u7f16\u7a0b\u7684\u7c7b\u3002\u8fd9\u4e9b\u7c7b\u4fbf\u4e8eTCP\u548cIP\u548cUDP\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u7f16\u7801\uff0c\u4f7f\u7f51\u7edc\u7f16\u7a0b\u66f4\u5bb9\u6613\u548c\u66f4\u4fbf\u643a\u3002 Qtpositioning\u5305\u542b\u7c7b\u7684\u5229\u7528\u5404\u79cd\u53ef\u80fd\u7684\u6765\u6e90\uff0c\u786e\u5b9a\u4f4d\u7f6e\uff0c\u5305\u62ec\u536b\u661f\u3001Wi-Fi\u3001\u6216\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u3002 Enginio\u6a21\u5757\u5b9e\u73b0\u4e86\u5ba2\u6237\u7aef\u5e93\u8bbf\u95eeQt\u4e91\u670d\u52a1\u6258\u7ba1\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u3002 Qtwebsockets\u6a21\u5757\u5305\u542b\u5b9e\u73b0WebSocket\u534f\u8bae\u7c7b\u3002 QtWebKit\u5305\u542b\u4e00\u4e2a\u57fa\u4e8eWebkit2\u56fe\u4e66\u9986Web\u6d4f\u89c8\u5668\u5b9e\u73b0\u7c7b\u3002 Qtwebkitwidgets\u5305\u542b\u7684\u7c7b\u7684\u57fa\u7840webkit1\u4e00\u7528\u4e8eqtwidgets\u5e94\u7528Web\u6d4f\u89c8\u5668\u7684\u5b9e\u73b0\u3002 QtXml\u5305\u542b\u4e0eXML\u6587\u4ef6\u7684\u7c7b\u3002\u8fd9\u4e2a\u6a21\u5757\u4e3aSAX\u548cDOM API\u63d0\u4f9b\u4e86\u5b9e\u73b0\u3002 QtSvg\u6a21\u5757\u63d0\u4f9b\u4e86\u663e\u793aSVG\u6587\u4ef6\u5185\u5bb9\u7684\u7c7b\u3002\u53ef\u4f38\u7f29\u77e2\u91cf\u56fe\u5f62\uff08SVG\uff09\u662f\u4e00\u79cd\u63cf\u8ff0\u4e8c\u7ef4\u56fe\u5f62\u548c\u56fe\u5f62\u5e94\u7528\u7684\u8bed\u8a00\u3002 QtSql\u6a21\u5757\u63d0\u4f9b\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u7c7b\u3002 QtTest\u5305\u542b\u7684\u529f\u80fd\uff0c\u4f7fpyqt5\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5 \u6700\u7b80\u5355\u7684\u521b\u5efa\u7a97\u53e3\uff1a import sys from PyQt5.QtWidgets import QApplication, QWidget from PyQt5.QtGui import QIcon class Example(QWidget): def __init__(self): super().__init__() self.initUI() #\u754c\u9762\u7ed8\u5236\u4ea4\u7ed9InitUi\u65b9\u6cd5 def initUI(self): #\u8bbe\u7f6e\u7a97\u53e3\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f self.setGeometry(300, 300, 300, 220) #\u8bbe\u7f6e\u7a97\u53e3\u7684\u6807\u9898 self.setWindowTitle('Icon') #\u8bbe\u7f6e\u7a97\u53e3\u7684\u56fe\u6807\uff0c\u5f15\u7528\u5f53\u524d\u76ee\u5f55\u4e0b\u7684web.png\u56fe\u7247 self.setWindowIcon(QIcon('web.png')) #\u663e\u793a\u7a97\u53e3 self.show() if __name__ == '__main__': #\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u8c61 app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) \u521b\u5efa\u4e00\u4e2a\u6309\u94ae \uff0c\u5e76\u7ed1\u5b9a\u9000\u51fa\u4e8b\u4ef6 import sys from PyQt5.QtWidgets import QWidget, QPushButton, QApplication from PyQt5.QtCore import QCoreApplication class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): qbtn = QPushButton('Quit', self) qbtn.clicked.connect(sys.exit) #\u548csys.exit\u4e8b\u4ef6\u7ed1\u5b9a qbtn.resize(qbtn.sizeHint()) qbtn.move(50, 50) self.setGeometry(300, 300, 250, 150) self.setWindowTitle('Quit button') self.show() if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) \u5b9a\u4f4d import sys from PyQt5.QtWidgets import QWidget, QLabel, QApplication #\u7edd\u5bf9\u5b9a\u4f4d class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): lbl1 = QLabel('Zetcode', self) lbl1.move(15, 10) lbl2 = QLabel('tutorials', self) lbl2.move(35, 40) lbl3 = QLabel('for programmers', self) lbl3.move(55, 70) self.setGeometry(300, 300, 250, 150) self.setWindowTitle('Absolute') self.show() if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) \u4e00\u822c\u5e03\u5c40\u8981 QGridLayout() import sys from PyQt5.QtWidgets import * from PyQt5.QtGui import QIcon class My_blog_control(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): self.commit_btn = QPushButton(\"\u786e\u5b9a\") # self.commit_btn.clicked.connect(sys.exit) self.cel_btn = QPushButton(\"\u9000\u51fa\") grid = QGridLayout() names = ['Cls', 'Bck', '', 'Close', '7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', '0', '.', '=', '+'] position = [(i,j) for i in range(5) for j in range(4)] for positi,name in zip(position,names): if name == '': continue button = QPushButton(name) grid.addWidget(button,*positi) self.setLayout(grid) # self.setGeometry(300, 300, 850, 520) self.move(300,150) self.setWindowTitle(\"MY_BLOG_CONTROL\") self.show() if __name__ == \"__main__\": app = QApplication(sys.argv) mbc = My_blog_control() sys.exit(app.exec_())","title":"pyqt\u5b66\u4e60"},{"location":"python/pyqt/#pyqt5","text":"QtCore:\u5305\u542b\u4e86\u6838\u5fc3\u7684\u975eGUI\u529f\u80fd\u3002\u6b64\u6a21\u5757\u7528\u4e8e\u5904\u7406\u65f6\u95f4\u3001\u6587\u4ef6\u548c\u76ee\u5f55\u3001\u5404\u79cd\u6570\u636e\u7c7b\u578b\u3001\u6d41\u3001URL\u3001MIME\u7c7b\u578b\u3001\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u3002 QtGui\u5305\u542b\u7c7b\u7a97\u53e3\u7cfb\u7edf\u96c6\u6210\u3001\u4e8b\u4ef6\u5904\u7406\u3001\u4e8c\u7ef4\u56fe\u5f62\u3001\u57fa\u672c\u6210\u50cf\u3001\u5b57\u4f53\u548c\u6587\u672c\u3002 qtwidgets\u6a21\u5757\u5305\u542b\u521b\u9020\u7ecf\u5178\u684c\u9762\u98ce\u683c\u7684\u7528\u6237\u754c\u9762\u63d0\u4f9b\u4e86\u4e00\u5957UI\u5143\u7d20\u7684\u7c7b\u3002 QtMultimedia\u5305\u542b\u7684\u7c7b\u6765\u5904\u7406\u591a\u5a92\u4f53\u5185\u5bb9\u548cAPI\u6765\u8bbf\u95ee\u76f8\u673a\u548c\u6536\u97f3\u673a\u7684\u529f\u80fd\u3002 Qtbluetooth\u6a21\u5757\u5305\u542b\u7c7b\u7684\u626b\u63cf\u8bbe\u5907\u548c\u8fde\u63a5\u5e76\u4e0e\u4ed6\u4eec\u4e92\u52a8\u3002\u63cf\u8ff0\u6a21\u5757\u5305\u542b\u4e86\u7f51\u7edc\u7f16\u7a0b\u7684\u7c7b\u3002\u8fd9\u4e9b\u7c7b\u4fbf\u4e8eTCP\u548cIP\u548cUDP\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u7f16\u7801\uff0c\u4f7f\u7f51\u7edc\u7f16\u7a0b\u66f4\u5bb9\u6613\u548c\u66f4\u4fbf\u643a\u3002 Qtpositioning\u5305\u542b\u7c7b\u7684\u5229\u7528\u5404\u79cd\u53ef\u80fd\u7684\u6765\u6e90\uff0c\u786e\u5b9a\u4f4d\u7f6e\uff0c\u5305\u62ec\u536b\u661f\u3001Wi-Fi\u3001\u6216\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u3002 Enginio\u6a21\u5757\u5b9e\u73b0\u4e86\u5ba2\u6237\u7aef\u5e93\u8bbf\u95eeQt\u4e91\u670d\u52a1\u6258\u7ba1\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u3002 Qtwebsockets\u6a21\u5757\u5305\u542b\u5b9e\u73b0WebSocket\u534f\u8bae\u7c7b\u3002 QtWebKit\u5305\u542b\u4e00\u4e2a\u57fa\u4e8eWebkit2\u56fe\u4e66\u9986Web\u6d4f\u89c8\u5668\u5b9e\u73b0\u7c7b\u3002 Qtwebkitwidgets\u5305\u542b\u7684\u7c7b\u7684\u57fa\u7840webkit1\u4e00\u7528\u4e8eqtwidgets\u5e94\u7528Web\u6d4f\u89c8\u5668\u7684\u5b9e\u73b0\u3002 QtXml\u5305\u542b\u4e0eXML\u6587\u4ef6\u7684\u7c7b\u3002\u8fd9\u4e2a\u6a21\u5757\u4e3aSAX\u548cDOM API\u63d0\u4f9b\u4e86\u5b9e\u73b0\u3002 QtSvg\u6a21\u5757\u63d0\u4f9b\u4e86\u663e\u793aSVG\u6587\u4ef6\u5185\u5bb9\u7684\u7c7b\u3002\u53ef\u4f38\u7f29\u77e2\u91cf\u56fe\u5f62\uff08SVG\uff09\u662f\u4e00\u79cd\u63cf\u8ff0\u4e8c\u7ef4\u56fe\u5f62\u548c\u56fe\u5f62\u5e94\u7528\u7684\u8bed\u8a00\u3002 QtSql\u6a21\u5757\u63d0\u4f9b\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u7c7b\u3002 QtTest\u5305\u542b\u7684\u529f\u80fd\uff0c\u4f7fpyqt5\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5 \u6700\u7b80\u5355\u7684\u521b\u5efa\u7a97\u53e3\uff1a import sys from PyQt5.QtWidgets import QApplication, QWidget from PyQt5.QtGui import QIcon class Example(QWidget): def __init__(self): super().__init__() self.initUI() #\u754c\u9762\u7ed8\u5236\u4ea4\u7ed9InitUi\u65b9\u6cd5 def initUI(self): #\u8bbe\u7f6e\u7a97\u53e3\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f self.setGeometry(300, 300, 300, 220) #\u8bbe\u7f6e\u7a97\u53e3\u7684\u6807\u9898 self.setWindowTitle('Icon') #\u8bbe\u7f6e\u7a97\u53e3\u7684\u56fe\u6807\uff0c\u5f15\u7528\u5f53\u524d\u76ee\u5f55\u4e0b\u7684web.png\u56fe\u7247 self.setWindowIcon(QIcon('web.png')) #\u663e\u793a\u7a97\u53e3 self.show() if __name__ == '__main__': #\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u8c61 app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) \u521b\u5efa\u4e00\u4e2a\u6309\u94ae \uff0c\u5e76\u7ed1\u5b9a\u9000\u51fa\u4e8b\u4ef6 import sys from PyQt5.QtWidgets import QWidget, QPushButton, QApplication from PyQt5.QtCore import QCoreApplication class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): qbtn = QPushButton('Quit', self) qbtn.clicked.connect(sys.exit) #\u548csys.exit\u4e8b\u4ef6\u7ed1\u5b9a qbtn.resize(qbtn.sizeHint()) qbtn.move(50, 50) self.setGeometry(300, 300, 250, 150) self.setWindowTitle('Quit button') self.show() if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_())","title":"\u5bf9pyqt5\u7684\u5b66\u4e60"},{"location":"python/pyqt/#_1","text":"import sys from PyQt5.QtWidgets import QWidget, QLabel, QApplication #\u7edd\u5bf9\u5b9a\u4f4d class Example(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): lbl1 = QLabel('Zetcode', self) lbl1.move(15, 10) lbl2 = QLabel('tutorials', self) lbl2.move(35, 40) lbl3 = QLabel('for programmers', self) lbl3.move(55, 70) self.setGeometry(300, 300, 250, 150) self.setWindowTitle('Absolute') self.show() if __name__ == '__main__': app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) \u4e00\u822c\u5e03\u5c40\u8981 QGridLayout() import sys from PyQt5.QtWidgets import * from PyQt5.QtGui import QIcon class My_blog_control(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): self.commit_btn = QPushButton(\"\u786e\u5b9a\") # self.commit_btn.clicked.connect(sys.exit) self.cel_btn = QPushButton(\"\u9000\u51fa\") grid = QGridLayout() names = ['Cls', 'Bck', '', 'Close', '7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', '0', '.', '=', '+'] position = [(i,j) for i in range(5) for j in range(4)] for positi,name in zip(position,names): if name == '': continue button = QPushButton(name) grid.addWidget(button,*positi) self.setLayout(grid) # self.setGeometry(300, 300, 850, 520) self.move(300,150) self.setWindowTitle(\"MY_BLOG_CONTROL\") self.show() if __name__ == \"__main__\": app = QApplication(sys.argv) mbc = My_blog_control() sys.exit(app.exec_())","title":"\u5b9a\u4f4d"},{"location":"python/skill/","text":"\u4e24\u4e2a\u6570\u7684\u4ea4\u6362 # a = 1 # b = 2 # temp = b # b = a # a = temp # print(a,b) a = 1 b = 2 a,b = b,a print(a,b) 2 1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 a = 17 name = \"wlb\" # print('%s is %d years old' % (name,a)) # print('{} is {} years old'.format(name,a)) print(f'{name} is {a} years old') #\u660e\u663e\u8fd9\u4e2a\u65b9\u6cd5\u66f4\u7b80\u5355 wlb is 17 years old yield\u4e0eyield from def fib(n): a = 0 b = 1 for _ in range(n): yield a a,b = b,a+b for i in fib(10): print(i) #\u6ce8\u91ca\u7684\u5185\u5bb9\u4e0eyield a\u6548\u679c\u76f8\u540c\uff0cyield\u76f8\u5f53\u4e8e\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668 yield\u4e00\u4e2a\u6570\u540e\u4f1a\u7acb\u9a6c\u4f20\u9012\u51fa\u53bb\uff0c\u800creturn \u8981\u7b49\u5217\u8868\u90fd\u751f\u6210\u5b8c\u6bd5\u540e\u624d\u4f1a\u4f20\u51fa\u53bb #\u4ed6\u7684\u4f18\u52bf\u5728\u4e8e\u4e00\u4e9b\u8017\u65f6\u7684\u64cd\u4f5c # \u901a\u8fc7yield\u6765\u8fdb\u884cdfs\uff0c\u7531\u4e8e\u6ca1\u6709\u5b9e\u73b0__next__\u56e0\u6b64\u662f\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 class Node: def __init__(self,value) -> None: self._value = value self._node = [] def __repr__(self) -> str: return f'Node({self._value})' def add_children(self,node:'Node') -> 'Node': self._node.append(node) def __iter__(self): return iter(self._node) def dfs(self): yield self for i in self: yield from i.dfs() root = Node(0) children1 = Node(1) children2 = Node(2) root.add_children(children1) root.add_children(children2) children1.add_children(Node(3)) children1.add_children(Node(4)) children11 = Node(5) children2.add_children(children11) children11.add_children(Node(6)) for c in root.dfs(): print(c) from typing import Iterable def test_format(datas: Iterable[str], max_len: int): for data in datas: if len(data) > max_len: yield data[:max_len] + '...' else: yield data print(list(test_format(['vllbc', 'test_for_this_function', 'good'],5))) # \u628a\u957f\u5ea6\u5927\u4e8e5\u7684\u90e8\u5206\u53d8\u6210\u7701\u7565\u53f7 #\u5b50\u751f\u6210\u5668 def average_gen(): total = 0 count = 0 average = 0 while True: new_num = yield average if new_num is None: break count += 1 total += new_num average = total/count return total,count,average # \u59d4\u6258\u751f\u6210\u5668 def proxy_gen(): while True: total,count,average = yield from average_gen() # yield from\u540e\u9762\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61,\u6b64\u6587\u540e\u9762\u7684\u5c06\u591a\u7ef4\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u4e2dflatten\u51fd\u6570\u5c31\u7528\u5230\u4e86yield from\uff0c\u539f\u7406\u5c31\u662f\u5982\u679c\u5217\u8868\u4e2d\u4e00\u4e2a\u5143\u7d20\u662f\u5217\u8868\u5c31yield from\u8fd9\u4e2a\u5217\u8868\uff0c\u5426\u5219\u5c31\u76f4\u63a5yield\u8fd9\u4e2a\u5143\u7d20\uff0c\u4e5f\u5229\u7528\u4e86\u9012\u5f52\u7684\u65b9\u6cd5\u3002\u5982\u679c\u5b50\u751f\u6210\u5668\u9000\u51fawhile\u5faa\u73af\u4e86\uff0c\u5c31\u6267\u884creturn\u4ee5\u83b7\u53d6\u8fd4\u56de\u503c\u3002 print(total,count,average) def main(): t = proxy_gen() next(t) print(t.send(10)) print(t.send(15)) print(t.send(20)) t.send(None) main() \u5217\u8868\u89e3\u6790\u5f0f lists = [f\"http://www.baidu.com/page{n}\" for n in range(21)] lists#\u6b64\u65b9\u6cd5\u5728\u722c\u866b\u6784\u9020urls\u4e2d\u975e\u5e38\u5e38\u7528 # lists = [f\"http://www.baidu.com/page{n}\" for n in range(21) if n%2==0] page\u5076\u6570 # alp = \"abcdefghigklmnopqrstuvwxyz\" # ALP = [n.upper() for n in alp] \u5c06\u5c0f\u5199\u8f6c\u6362\u4e3a\u5927\u5199 enumerate lists = ['apple','banana','cat','dog'] for index,name in enumerate(lists): print(index,name) # \u624b\u52a8\u5b9e\u73b0\u4e00\u4e0benumerate from typing import Iterable def enumerate_(Iterable:Iterable,start=0): yield from zip(range(start,start+len(Iterable)),Iterable) for i,item in enumerate_([1,2,3,4,5,6],9): print(i,item) \u5b57\u5178\u7684\u5408\u5e76 dic1 = {'qq':1683070754, 'phone':123456789 } dic2 = { 'height':180, 'handsome':True } dic3 = {**dic1,**dic2} #\u5408\u5e76\u4e24\u4e2a\u5b57\u5178 **\u53eb\u505a\u89e3\u5305 #\u6216\u8005\u7528dic1.update(dic2) \u5c06dic2\u5408\u5e76\u5230dic1 \u76f8\u540c\u952e\u5219dic2\u66ff\u4ee3dic1 dic3 {'handsome': True, 'height': 180, 'phone': 123456789, 'qq': 1683070754} \u5e8f\u5217\u89e3\u5305 name = \"wang lingbo\" xing,ming = name.split(\" \") #split\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5206\u522b\u8d4b\u7ed9xing \u548cming print(xing,ming) #x,*y,z = [1,2,3,4,5] #x:1 z:5 y:[2,3,4] wang lingbo \u533f\u540d\u51fd\u6570lambda lists = [1,2,3,4,5,6] maps = map(lambda x:x*x,lists) print(maps) print(list(maps)) <map object at 0x000001911C8E03C8> [1, 4, 9, 16, 25, 36] \u88c5\u9970\u5668 def logging(level): def wapper(func): def inner_wapper(*args, **wbargs): print(f'{level} enter in {func.__name__}()') return func(*args, **wbargs) #\u4e0d\u5199return \u4e5f\u53ef\u4ee5 return inner_wapper return wapper @logging('inner') def say(a): print('hello! {}'.format(a)) say('wlb') inner enter in say() hello! wlb import time def print_time(func): def wapper(*args,**wbargs): print(f'{func.__name__}()\u8c03\u7528\u4e8e{time.asctime(time.localtime(time.time()))}') return func(*args,**wbargs) #\u4e0d\u5199return \u4e5f\u53ef\u4ee5 return wapper @print_time def my_name(name): print(f'look!{name}') my_name(\"wlb\") my_name()\u8c03\u7528\u4e8eWed Dec 9 21:21:00 2020 look!wlb map\u3001reduce\u3001filter # map print(list(map(abs,[-1,-2,-3,-4,-5]))) #\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7528\u533f\u540d\u51fd\u6570 # reduce from functools import reduce #python3\u4e2d\u9700\u8981\u4ece\u5185\u7f6e\u5e93\u5bfc\u5165 print(reduce(lambda x,y:x+y,list(map(int,str(131351412))))) # filter a = [1,2,3,4,5,6,7,8,9] new_a = filter(lambda x:x%2!=0,a) #filter\u5c31\u662f\u7b5b\u9009 list(new_a) # \u8fd9\u4e09\u4e2a\u90fd\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u5e38\u7528\u7684\u51fd\u6570 join() # lists = ['1','2','3','4','5'] # ''.join(lists) lists = [1,2,3,4,5] ''.join(list(map(str,lists))) #join\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6240\u4ee5\u8981map\u8f6c\u6362\u4e00\u4e0b '12345' \u5c06\u591a\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u7ef4 ab = [[1, 2, 3], [5, 8], [7, 8, 9]] print([i for item in ab for i in item]) #\u5229\u7528\u5217\u8868\u89e3\u6790\u5f0f print(sum(ab, [])) # \u5229\u7528sum\u51fd\u6570 from functools import reduce print(reduce(lambda x,y:x+y,ab)) # \u5229\u7528reduce from itertools import chain print(list(chain(*ab))) # \u5229\u7528chain def flatten(items,ignore=(str,bytes)): for x in items: if isinstance(x,Iterable) and not isinstance(x,ignore): yield from flatten(x) else: yield x print(list(flatten(ab))) # \u5229\u7528\u81ea\u5df1\u5b9a\u4e49\u7684\u51fd\u6570 [1, 2, 3, 5, 8, 7, 8, 9] \u5c06\u4e00\u4e2a\u5217\u8868\u5012\u5e8f lists = [2,4,3,2,5,4] lists[::-1] # list(reversed(lists)) \u968f\u673a\u751f\u6210\u5bc6\u7801 import random b = 8 t = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' print(''.join(random.sample(t,b))) # \u4e3b\u8981\u5c31\u662f\u7528sample\u8fd9\u4e2a\u65b9\u6cd5\u6765\u53d6\u591a\u4e2a\u968f\u673a\u503c 0KmtEZSU \u65ad\u8a00 assert(True is True) #\u6210\u529f print('yes') assert(True is False) #\u62a5\u9519 print('no') yes \u5408\u5e76\u5217\u8868 list1 = [1,2,31,13] list2 = [5,2,12,32] # list1.append(list2) # print(list1) #\u9519\u8bef\u65b9\u6cd5 list1.extend(list2) print(list1) #\u6b63\u786e\u65b9\u6cd5 [1, 2, 31, 13, 5, 2, 12, 32] a = [1,2,3,4,5] b = ['a','b','c','d','e'] fin = dict() for k,i in zip(a,b): fin[k] = i print(fin) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} # \u6216\u8005 d = {} for i,d[i] in zip(a,b): pass print(d) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} \u4e3a\u4ec0\u4e48\uff1f\u5728WTFpython\u4e2d\u6709\u8bb2 # \u6216\u8005 fin = dict(zip(a,b)) print(fin) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} \u5bf9 \u8fdb\u884c\u89e3\u5305 lists = ['dog','cat','you'] print(*lists) #\u60f3\u5bf9\u4e00\u4e2a\u5217\u8868\u8fdb\u884czip\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837 print(list(zip(*lists))) def test(*args): print(\"args:\",args) test(*lists) dog cat you [('d', 'c', 'y'), ('o', 'a', 'o'), ('g', 't', 'u')] args:('dog','cat','you') \u5bf9\u7c7b\u7684\u4e00\u4e9b\u64cd\u4f5c class Test: x = 1 y = 2 print(Test.x,Test.y) #==>print(Test().x,Test().y) class Test: def __init__(self,x,y): self.x = x self.y = y test = Test(1,2) print(test.x,test.y) 1 2 1 2 class Test: def __init__(self,maxlen): self.maxlen = maxlen self.lists = [] def put(self,*args): for i in args: if len(self.lists) <= self.maxlen: self.lists.append(i) else: break def get(self): return self.lists.pop() def empty(self): if len(self.lists) != 0: return False else: return True def __len__(self): return len(self.lists) def __del__(self): print(\"del this class\") def printfs(self): return self.lists test = Test(10) test.put(1,2,3,4,5,6) print(test.empty()) print(len(test)) print(test.printfs()) test.__del__() #\u76f4\u63a5\u8c03\u7528test\u8fd8\u5b58\u5728\uff0c__del__\u662f\u6790\u6784\u51fd\u6570\uff0c\u5783\u573e\u56de\u6536\u65f6\u5c31\u4f1a\u8c03\u7528a print(test) #del test #print(test) \u8fd9\u65f6\u5019\u5c31\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3adel\u5c06test\u8fd9\u4e2a\u5bf9\u8c61\u76f4\u63a5\u5220\u9664\u4e86 False 6 [1, 2, 3, 4, 5, 6] del this class <__main__.Test object at 0x0000021B7DF33EB0> del this class \u4e00\u4e9b\u5185\u7f6e\u51fd\u6570 all([True,True,False]) #False all([True,True,True]) #True any([True,True,False]) #True any([True,False,False])#True any([False,False]) #False import random for i in iter(lambda:random.randint(1,10),5): print(i) #\u76f8\u5f53\u4e8e while True: x = random.randint(1,10) print(x) if x == 5: break iter(object[, sentinel]) sentinel\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u82e5\u4e0d\u4f20\u5165\uff0c\u5219object\u5fc5\u987b\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f20\u5165\u5219\u5fc5\u987b\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61,\u5f53\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u8fd4\u56de\u503c\u4e3asentinel\u629b\u51fa\u5f02\u5e38\uff0c\u4f46for\u5faa\u73af\u4f1a\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\uff0c\u8fd9\u5e38\u5e38\u7528\u4e8eIO\u64cd\u4f5c \u200b #\u8fd9\u662fcookbook\u91cc\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50 import sys f = open('xxx/xxx.txt') for chunk in iter(lambda:f.read(10),''): n = sys.stdout.write(chunk) #\u6df1\u5165\u7406\u89e3\u4e00\u4e0b import random class Test: def __init__(self): self.lists = [1,23,2,4,1,421,412] def __call__(self): return random.choice(self.lists) for i in iter(Test(),1): print(i) #\u8fd9\u662f\u53ef\u4ee5\u6b63\u5e38\u8f93\u51fa\u7684\uff0c\u56e0\u4e3a\u5b9e\u4f8b\u5316Test\u540e\u662f\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8fd4\u56de\u5217\u8868\u7684\u968f\u673a\u503c\uff0c\u5f53\u8fd4\u56de1\u65f6\u5219\u5faa\u73af\u7ed3\u675f\uff0c\u5982\u679c\u628a__call__\u9b54\u6cd5\u65b9\u6cd5\u53bb\u4e86\u540e\uff0c\u5219\u4f1a\u62a5\u9519\uff0c\u5982\u679c\u60f3\u8981\u4e0d\u4f7f\u7528\u9b54\u6cd5\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u7528\u533f\u540d\u51fd\u6570 import random class Test: def __init__(self): self.lists = [1,23,2,4,1,421,412] # def __call__(self): # return random.choice(self.lists) for i in iter(lambda:random.choice(Test().lists),1): print(i) #\u603b\u4e4b\uff0c\u5439\u7206cookbook functools.partial #\u5148\u770b\u6f14\u793a from functools import partial def add(a,b): return a + b addOne = partial(add,1) addOne(2) #3 addOne(4) #5 #\u5927\u6982\u610f\u601d\u5c31\u662f\u5229\u7528partial\u5c06\u51fd\u6570\u7684\u4e00\u4e2a\u53c2\u6570\u56fa\u5b9a\u4f4f\u4e86 def partial(func,*wargs): def wapper(*kargs): args = list(wargs) print(f\"args:{args}\") print(f\"kargs:{kargs}\") args.extend(kargs) print(f\"last:{args}\") return func(*args) return wapper def add(a,b,c): return a + b + c addone = partial(add,1,2) #\u6b64\u65f6addone\u76f8\u5f53\u4e8ewapper print(addone(3)) #\u8c03\u7528wrapper 3\u4e3a\u4f20\u5165\u7684kargs #\u8f93\u51fa\uff1a args:[1, 2] kargs:(3,) last:[1, 2, 3] 6 #\u4e0a\u9762\u662fpartial\u51fd\u6570\u7684\u7b80\u5316\u7248\u672c #\u5f88\u660e\u663e\u7684\u95ed\u5305\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u7406\u89e3 #\u5f53\u7136\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a\u88c5\u9970\u5668\u64cd\u4f5c from functools import wraps from functools import wraps,partial def out_wapper(*wargs): def partialout(func): return partial(func,*wargs) # \u8fd9\u662f\u4f7f\u7528partial\u539f\u7406\u7684 # @wraps(func) # def wrapper(*kargs): # args = list(wargs) # print(f\"args:{args}\") # print(f\"kargs:{kargs}\") # args.extend(kargs) # print(f\"last:{args}\") # return func(*args) # return wrapper return partialout @out_wapper(1,2) def add(a,b,c): return a + b + c print(add(3)) #6 #\u660e\u663e\u88c5\u9970\u5668\u8981\u9ebb\u70e6\u4e00\u70b9\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6bd5\u7adf\u662f\u5c01\u88c5\u597d\u7684\u51fd\u6570\uff0c\u4ee5\u540e\u76f4\u63a5\u7528\u5c31\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u4e86\u89e3\u8fd9\u4e9b\u6709\u52a9\u4e8e\u63d0\u9ad8\u601d\u7ef4\u6c34\u5e73 @classmethod\u548c@staticmethod class A(object): bar = 1 def func1(self): print ('foo') @classmethod def func2(cls): print ('func2') print (cls.bar) cls().func1() # \u8c03\u7528 foo \u65b9\u6cd5 A.func2() # \u4e0d\u9700\u8981\u5b9e\u4f8b\u5316 func2 1 foo class A(object): # \u5c5e\u6027\u9ed8\u8ba4\u4e3a\u7c7b\u5c5e\u6027\uff08\u53ef\u4ee5\u7ed9\u76f4\u63a5\u88ab\u7c7b\u672c\u8eab\u8c03\u7528\uff09 num = \"\u7c7b\u5c5e\u6027\" # \u5b9e\u4f8b\u5316\u65b9\u6cd5\uff08\u5fc5\u987b\u5b9e\u4f8b\u5316\u7c7b\u4e4b\u540e\u624d\u80fd\u88ab\u8c03\u7528\uff09 def func1(self): # self : \u8868\u793a\u5b9e\u4f8b\u5316\u7c7b\u540e\u7684\u5730\u5740id print(\"func1\") print(self) # \u7c7b\u65b9\u6cd5\uff08\u4e0d\u9700\u8981\u5b9e\u4f8b\u5316\u7c7b\u5c31\u53ef\u4ee5\u88ab\u7c7b\u672c\u8eab\u8c03\u7528\uff09 @classmethod def func2(cls): # cls : \u8868\u793a\u6ca1\u7528\u88ab\u5b9e\u4f8b\u5316\u7684\u7c7b\u672c\u8eab print(\"func2\") print(cls) print(cls.num) cls().func1() # \u4e0d\u4f20\u9012\u4f20\u9012\u9ed8\u8ba4self\u53c2\u6570\u7684\u65b9\u6cd5\uff08\u8be5\u65b9\u6cd5\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5\u88ab\u7c7b\u8c03\u7528\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4e0d\u6807\u51c6\uff09 def func3(): print(\"func3\") print(A.num) # \u5c5e\u6027\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u672c\u8eab\u8c03\u7528\u7684 # A.func1() \u8fd9\u6837\u8c03\u7528\u662f\u4f1a\u62a5\u9519\uff1a\u56e0\u4e3afunc1()\u8c03\u7528\u65f6\u9700\u8981\u9ed8\u8ba4\u4f20\u9012\u5b9e\u4f8b\u5316\u7c7b\u540e\u7684\u5730\u5740id\u53c2\u6570\uff0c\u5982\u679c\u4e0d\u5b9e\u4f8b\u5316\u7c7b\u662f\u65e0\u6cd5\u8c03\u7528\u7684 A.func2() A.func3() class A(object): def foo(self, x): print(\"executing foo(%s,%s)\" % (self, x)) print('self:', self) @staticmethod def static_foo(x): print(\"executing static_foo(%s)\" % x) \u95ee\u9898\uff1a@staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u51fd\u6570\u4e0e\u666e\u901a\u7684\u7c7b\u5916\u51fd\u6570\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff1f @staticmethod\u662f\u628a\u51fd\u6570\u5d4c\u5165\u5230\u7c7b\u4e2d\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u51fd\u6570\u5c31\u5c5e\u4e8e\u7c7b\uff0c\u540c\u65f6\u8868\u660e\u51fd\u6570\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u7c7b\u3002\u901a\u8fc7\u5b50\u7c7b\u7684\u7ee7\u627f\u8986\u76d6\uff0c\u80fd\u66f4\u597d\u7684\u7ec4\u7ec7\u4ee3\u7801\u3002 from pydantic import BaseModel from typing import Sequence class Test(BaseModel): text: Sequence[str] @classmethod def create(cls,text: Sequence[str]) -> \"Test\": # classmethod\u5e38\u7528\u6784\u9020\u51fd\u6570 return cls(text=text) def to_tuple(self) -> \"Test\": return Test(text=tuple(self.text)) @classmethod def join(cls, *Tests): return cls.create(sum([i.text for i in Tests],[])) test = Test.create(list(\"Hello world\")) t2 = Test.create(list(\"NIHAO\")) print(Test.join(test, t2)) # text=['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', 'N', 'I', 'H', 'A', 'O'] \u7528\u7c7b\u5b9e\u73b0\u88c5\u9970\u5668 #\u5148\u770b\u8fd9\u6837\u7684\u4ee3\u7801 \u7c7b\u5b9e\u73b0\u88c5\u9970\u5668\u8981\u6c42\u7c7b\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u7684 import time import functools class DelayFunc: def __init__(self, duration, func): self.duration = duration self.func = func def __call__(self, *args, **kwargs): print(f'Wait for {self.duration} seconds...') time.sleep(self.duration) return self.func(*args, **kwargs) def eager_call(self, *args, **kwargs): print('Call without delay') return self.func(*args, **kwargs) def delay(duration): \"\"\"\u88c5\u9970\u5668\uff1a\u63a8\u8fdf\u67d0\u4e2a\u51fd\u6570\u7684\u6267\u884c\u3002\u540c\u65f6\u63d0\u4f9b .eager_call \u65b9\u6cd5\u7acb\u5373\u6267\u884c \"\"\" # \u6b64\u5904\u4e3a\u4e86\u907f\u514d\u5b9a\u4e49\u989d\u5916\u51fd\u6570\uff0c\u76f4\u63a5\u4f7f\u7528 functools.partial \u5e2e\u52a9\u6784\u9020 # DelayFunc \u5b9e\u4f8b return functools.partial(DelayFunc, duration) @delay(2) def add(a,b): print(a,b) add(1,2) #\u5ef6\u8fdf\u4e24\u79d2\u8f93\u51fa3 \u76f8\u5f53\u4e8edelay(2)(add)(1,2) add.eager_call(1,2) #\u4e0d\u5ef6\u8fdf\u8f93\u51fa3 \u76f8\u5f53\u4e8edelay(2)(add).eager_call(1,2) #\u989d\uff0c\u5f53\u7136\uff0c\u60f3\u66f4\u6df1\u5165\u7406\u89e3\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u5199 def delay(duration): def partial(func): return DelayFunc(duration,func) return partial # \u4e0a\u9762\u7684\u5c31\u76f8\u5f53\u4e8e partial(DelayFunc,duration),\u7f3a\u7684func\u53c2\u6570\u5c31\u662f\u8981\u4fee\u9970\u7684\u51fd\u6570 @delay(2) def add(a,b): return a + b print(add(1,2)) \u4e0e\u7eaf\u51fd\u6570\u76f8\u6bd4\uff0c\u6211\u89c9\u5f97\u4f7f\u7528\u7c7b\u5b9e\u73b0\u7684\u88c5\u9970\u5668\u5728 \u7279\u5b9a\u573a\u666f \u4e0b\u6709\u51e0\u4e2a\u4f18\u52bf\uff1a \u5b9e\u73b0\u6709\u72b6\u6001\u7684\u88c5\u9970\u5668\u65f6\uff0c\u64cd\u4f5c\u7c7b\u5c5e\u6027\u6bd4\u64cd\u4f5c\u95ed\u5305\u5185\u53d8\u91cf\u66f4\u7b26\u5408\u76f4\u89c9\u3001\u4e0d\u6613\u51fa\u9519 \u5b9e\u73b0\u4e3a\u51fd\u6570\u6269\u5145\u63a5\u53e3\u7684\u88c5\u9970\u5668\u65f6\uff0c\u4f7f\u7528\u7c7b\u5305\u88c5\u51fd\u6570\uff0c\u6bd4\u76f4\u63a5\u4e3a\u51fd\u6570\u5bf9\u8c61\u8ffd\u52a0\u5c5e\u6027\u66f4\u6613\u4e8e\u7ef4\u62a4 \u66f4\u5bb9\u6613\u5b9e\u73b0\u4e00\u4e2a\u540c\u65f6\u517c\u5bb9\u88c5\u9970\u5668\u4e0e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae\u7684\u5bf9\u8c61 BaseModel from pydantic import BaseModel,AnyUrl class Test(BaseModel): # \u7ee7\u627f\u540e\u53ef\u4ee5\u7528\u7c7b\u5c5e\u6027\u521b\u5efa\u5b9e\u4f8b url: AnyUrl data: str def __str__(self): return self.url + self.data kwargs = { 'url': 'https://www.baidu.com', 'data': '/search' } print(Test(**kwargs)) python\u7c7b\u578b\u6ce8\u91ca from pydantic import BaseModel from typing import Any class cout(): def __init__(self, cls: \"Test\", text: str) -> None: self.cls = cls self.text = text def __str__(self): return f\"{self.cls} {self.text}\" #\u7a0b\u5e8f\u5230cout\u65f6 Test\u7c7b\u5e76\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u6700\u540eTest\u5728\u53d8\u91cf\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u52a0\u4e0a\u5f15\u53f7 class Test(BaseModel): def __str__(self) -> str: return \"I am Test Class\" print(cout(cls=Test(), text=\"hello world!\")) namedtuple from collections import namedtuple Test = namedtuple(\"Test\", ['name', 'age', 'sex']) def test_for_test(name: str, year: int, sex: str) -> \"Test\": return Test( name=name.title(), age=2021 - year, sex=sex ) name,age,sex = test_for_test('wlb', 2002, 'male') print(name, age, sex) @property from pydantic import BaseModel class Test(): def __init__(self, cls, n): self.cls = cls self.n = n @property def to_string_cls(self): return self.cls @property def to_strings(self): return self.n class Test_For(BaseModel): num: int def __str__(self): return str(self.num) __repr__ = __str__ test = Test(Test_For, 22) print(test.to_string_cls(num=1)) # 1 print(test.to_strings) # 22 \u5728\u8fb9\u754c\u5904\u601d\u8003 from typing import Iterable from pydantic import BaseModel,conint,ValidationError class NumberInput(BaseModel): num: conint(ge=0, le=100) def input_a_number(): while True: n = input(\"\u8f93\u5165\u4e00\u4e2a\u6570\") try: n = NumberInput(num=n) except ValidationError as e: print(e) continue n = n.num break return n print(input_a_number()) #\u8981\u6c42\u8f93\u5165\u4e00\u4e2a0-100\u7684\u6570 \u8fd9\u6837\u662f\u4e0d\u662f\u5f88\u4f18\u96c5 super()\u8fdb\u9636 \u4eca\u5929\u5b66\u4e60cookbook8-8 \u5b50\u7c7b\u4e2d\u6269\u5c55property \u5148\u8d34\u4e00\u4e0b\u4ee3\u7801 class Person: def __init__(self, name): self.name = name # \u6709\u610f\u601d\u7684\u662f \u8fd9\u91cc\u7684self.name\u662f@property\u4fee\u9970\u7684 \u8fd9\u884c\u4ee3\u7801\u8c03\u7528name.setter # Getter function @property def name(self): return self._name # Setter function @name.setter def name(self, value): if not isinstance(value, str): raise TypeError('Expected a string') self._name = value # Deleter function @name.deleter def name(self): raise AttributeError(\"Can't delete attribute\") # \u5b50\u7c7b class SubPerson(Person): @property def name(self): print('Getting name') return super().name @name.setter def name(self, value): print('Setting name to', value) super(SubPerson, SubPerson).name.__set__(self, value) @name.deleter def name(self): print('Deleting name') super(SubPerson, SubPerson).name.__delete__(self) \u770b\u5230super(SubPerson, SubPerson)\u611f\u5230\u5f88\u7591\u60d1\uff0c\u4e8e\u662f\u641c\u7d22\u8d44\u6599\u5927\u81f4\u641e\u660e\u767d\u4e86 \u901a\u4fd7\u8bf4\u9ed8\u8ba4\u7684super(SubPerson,self) (\u76f4\u63a5\u5199super()\u4e5f\u53ef) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u4e3a\u4e86\u59d4\u6258\u7ed9\u4e4b\u524d\u5b9a\u4e49\u7684setter\u65b9\u6cd5\uff0c\u9700\u8981\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u4e4b\u524d\u5b9a\u4e49\u7684name\u5c5e\u6027\u7684 __set__() \u65b9\u6cd5\u3002 \u4e0d\u8fc7\uff0c\u83b7\u53d6\u8fd9\u4e2a\u65b9\u6cd5\u7684\u552f\u4e00\u9014\u5f84\u662f\u4f7f\u7528\u7c7b\u53d8\u91cf\u800c\u4e0d\u662f\u5b9e\u4f8b\u53d8\u91cf\u6765\u8bbf\u95ee\u5b83\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4f7f\u7528 super(SubPerson, SubPerson) \u7684\u539f\u56e0\u3002 \u4ece\u4e66\u4e2d\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u770b\u51fa super(cls,cls)\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b \u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0csuper()\u7684\u53c2\u6570\u7684\u4f5c\u7528\u5c31\u662f\u7528\u4e8e\u5b9a\u4f4d\u4f4d\u7f6e \u7b2c\u4e00\u4e2acls\u5fc5\u987b\u662f\u7b2c\u4e8ccls\u7684\u7236\u7c7b\u6216\u8005\u4e8c\u8005\u76f8\u540c\uff0c\u53ef\u4ee5\u901a\u8fc7 cls.__mro__ \u67e5\u770b\u7ee7\u627f\u987a\u5e8f \u6bd4\u5982\u5728D\u91cc\u9762 super(A,D).__init__(self) \u800c __mro__ \u4e3a (<class '__main__.D'>, <class '__main__.A'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.Base'>, <class 'object'>) \u90a3\u4e48\u5c31\u8c03\u7528\u4eceA\u4ee5\u540e\u7684\u7c7b\u7684 __init__() \u4e0d\u8fc7\u91cd\u70b9\u4e0d\u5728\u8fd9\u91cc\uff0c\u91cd\u70b9\u662fsuper(cls,cls)\u548csuper(cls,object)\u7684\u533a\u522b dataclass from dataclasses import dataclass import random @dataclass(order=True) # \u7b49\u4e8e\u5b9e\u73b0\u4e86\u5404\u79cd\u6bd4\u8f83\u65b9\u6cd5\u4f8b\u5982=\u3001>\u3001<,\u6392\u5e8f\u51fd\u6570\u90fd\u4f9d\u8d56\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61 class A: n: int nums = [A(random.randint(1,10)) for _ in range(10)] nums = sorted(nums) print(nums, end='') x = '''hello''' print(x) dataclass\u53ef\u4ee5\u81ea\u52a8\u6dfb\u52a0__rapr__\u65b9\u6cd5\uff0c\u4e0d\u5fc5\u81ea\u5df1\u5b9e\u73b0 @dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False) init \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __init__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48\u8be5\u7c7b\u5c06\u4e0d\u4f1a\u6709 __init__ \u65b9\u6cd5\u3002 repr \uff1a __repr__ \u65b9\u6cd5\u9ed8\u8ba4\u751f\u6210\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48\u8be5\u7c7b\u5c06\u4e0d\u4f1a\u6709 __repr__ \u65b9\u6cd5\u3002 eq \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __eq__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48 __eq__ \u65b9\u6cd5\u5c06\u4e0d\u4f1a\u88ab dataclass \u6dfb\u52a0\uff0c\u4f46\u9ed8\u8ba4\u4e3a object.__eq__ \u3002 order \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __gt__ \u3001 __ge__ \u3001 __lt__ \u3001 __le__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u5219\u7701\u7565\u5b83\u4eec\u3002 unsafe_hash \uff1a\u9ed8\u8ba4\u751f\u6210__hash__\u65b9\u6cd5\uff0c\u7528\u4e8e\u6784\u5efa\u53efhashable\u7684\u7c7b from dataclasses import dataclass @dataclass(unsafe_hash=True) class VisitRecordDC: first_name: str last_name: str phone_number: str # \u8df3\u8fc7\u201c\u8bbf\u95ee\u65f6\u95f4\u201d\u5b57\u6bb5\uff0c\u4e0d\u4f5c\u4e3a\u4efb\u4f55\u5bf9\u6bd4\u6761\u4ef6 date_visited: str = field(hash=False, compare=False) def find_potential_customers_v4(): return set(VisitRecordDC(**r) for r in users_visited_phuket) - \\ #\u6c42\u5dee\u96c6 set(VisitRecordDC(**r) for r in users_visited_nz) \u81ea\u5b9a\u4e49format class Student: def __init__(self, name, age): self.name = name self.age = age def __format__(self, format_spec): if format_spec == 'long': return f'{self.name} is {self.age} years old.' elif format_spec == 'simple': return f'{self.name}({self.age})' raise ValueError('invalid format spec') vllbc = Student('vllbc', '18') print(f'{vllbc:simple}') print(f'{vllbc:long}') \u62bd\u8c61\u7c7b\u5b9e\u8df5 import collections from abc import ABC, abstractmethod from typing import List customer = collections.namedtuple('customer', ['name', 'points']) class Goods(): def __init__(self, name: str, quantity: float, price: float) -> None: self.name = name self.quantity = quantity self.price = price def total(self) -> float: return self.quantity * self.price class Order(): def __init__(self, customer: customer, cart: List[Goods], prom=None) -> None: self.customer = customer self.cart = cart self.prom = prom def total(self): if not hasattr(self, '__total'): self.__total = sum(i.total() for i in self.cart) return self.__total def due(self): if self.prom is None: discount = 0 else: discount = self.prom.discount(self) return self.total() - discount def __repr__(self) -> str: return f'<Order total: {self.total():.2f} due: {self.due():.2f}>' class Prom(ABC): # \u62bd\u8c61\u7c7b @abstractmethod def discount(self,order) -> float: '''discount''' class discount1(Prom): def discount(self,order) -> float: return order.total() * 0.05 if order.customer.points >= 10000 else 0 john = customer(name='vllbc', points=100000) carts = [Goods(name='apple', quantity=5, price=10), Goods( name='banana', quantity=8, price=5), Goods(name='peach', quantity=4, price=8)] order = Order(customer=john, cart=carts,prom=discount1()) accumulate import itertools test_list = [i for i in range(1, 11)] for i in itertools.accumulate(test_list): print(i, end=\",\") # 1,3,6,10,15,21,28,36,45,55, print() for i in itertools.accumulate(test_list, lambda x, y: x * y): print(i, end=',') # 1,2,6,24,120,720,5040,40320,362880,3628800, \u5f02\u6b65\u88c5\u9970\u5668 from functools import wraps import asyncio def decorator(func): @wraps(func) async def hello(*args, **kwargs): await asyncio.sleep(2) return await func(*args,**kwargs) return hello @decorator async def test(): print(\"hello\") asyncio.run(test()) bisect import bisect import time # BREAKPOINTS \u5fc5\u987b\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\uff0c\u4e0d\u7136\u65e0\u6cd5\u8fdb\u884c\u4e8c\u5206\u67e5\u627e BREAKPOINTS = (1, 60, 3600, 3600 * 24) TMPLS = ( # unit, template (1, \"less than 1 second ago\"), (1, \"{units} seconds ago\"), (60, \"{units} minutes ago\"), (3600, \"{units} hours ago\"), (3600 * 24, \"{units} days ago\"), ) def from_now(ts): \"\"\"\u63a5\u6536\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4\u6233\uff0c\u8fd4\u56de\u8ddd\u79bb\u5f53\u524d\u65f6\u95f4\u7684\u76f8\u5bf9\u65f6\u95f4\u6587\u5b57\u63cf\u8ff0 \"\"\" seconds_delta = int(time.time() - ts) unit, tmpl = TMPLS[bisect.bisect(BREAKPOINTS, seconds_delta)] # bisect\u7c7b\u4f3c\u4e8eindex\u65b9\u6cd5\uff0c\u8981\u662f\u4e0d\u5b58\u5728\u4f1a\u9009\u62e9\u6570\u503c\u6700\u63a5\u8fd1\u7684\u7d22\u5f15 return tmpl.format(units=seconds_delta // unit) contextlib from contextlib import contextmanager,ContextDecorator # contextmanager\u53ef\u4ee5\u628a\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u53bb\u5b9e\u73b0\u4e00\u4e2a\u5b9a\u4e49\u4e86__enter__\u548c__exit__\u65b9\u6cd5\u7684\u7c7b @contextmanager def open_file(filename, methods=\"r\"): print(f\"\u6253\u5f00\u4e86\u6587\u4ef6{filename}\") res_file = open(filename, mode=methods) # __enter__\u65b9\u6cd5 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b try: yield res_file # \u76f8\u5f53\u4e8e\u5728__enter__\u65b9\u6cd5\u91cc\u9762\u8fd4\u56deself yield\u540e\u9762\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4e0d\u7528as\u4e86 except Exception as e: print(\"\u6709\u9519\u8bef\u53d1\u751f\", e) # __exit__\u65b9\u6cd5\u91cc\u7684\u9519\u8bef\u5904\u7406 finally: res_file.close() # __exit__ with open_file(\"testvim.txt\") as fp: print(fp) \u8bfb\u53d6\u5927\u6587\u4ef6 from functools import partial def digits_(file,block_size=1024*8): # \u5206\u5757\u8bfb\u53d6 _read = partial(file.read,block_size) # \u4f7f\u7528partial,\u4e5f\u53ef\u4ee5\u4f7f\u7528lambda:file.read(block_size) for line in iter(_read,\"\"): # \u5f53\u8bfb\u53d6\u5b8c\u6bd5\u65f6\u9000\u51fa for s in line: if s.isdigit(): yield s # \u4f7f\u7528yield def count_digits(fname): \"\"\"\u8ba1\u7b97\u6587\u4ef6\u91cc\u5305\u542b\u591a\u5c11\u4e2a\u6570\u5b57\u5b57\u7b26\"\"\" count = 0 with open(fname) as file: for _ in digits_(file=file): count+=1 return count __exit__\u3001__enter__ # def __enter__(self): # \u8be5\u65b9\u6cd5\u5c06\u5728\u8fdb\u5165\u4e0a\u4e0b\u6587\u65f6\u8c03\u7528 # return self # def __exit__(self, exc_type, exc_val, exc_tb): # \u8be5\u65b9\u6cd5\u5c06\u5728\u9000\u51fa\u4e0a\u4e0b\u6587\u65f6\u8c03\u7528 # exc_type, exc_val, exc_tb \u5206\u522b\u8868\u793a\u8be5\u4e0a\u4e0b\u6587\u5185\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u578b\u3001\u5f02\u5e38\u503c\u3001\u9519\u8bef\u6808 # __enter__()\uff1a\u4e3b\u8981\u6267\u884c\u4e00\u4e9b\u73af\u5883\u51c6\u5907\u5de5\u4f5c\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u8d44\u6e90\u5bf9\u8c61\u3002\u5982\u679c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668open(\"test.txt\")\u7684__enter__()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\u3002 # __exit__()\uff1a\u5b8c\u6574\u5f62\u5f0f\u4e3a__exit__(type, value, traceback),\u8fd9\u4e09\u4e2a\u53c2\u6570\u548c\u8c03\u7528sys.exec_info()\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e00\u6837\u7684\uff0c\u5206\u522b\u4e3a\u5f02\u5e38\u7c7b\u578b\u3001\u5f02\u5e38\u4fe1\u606f\u548c\u5806\u6808\u3002\u5982\u679c*\u6267\u884c\u4f53\u8bed\u53e5*\u6ca1\u6709\u5f15\u53d1\u5f02\u5e38\uff0c\u5219\u8fd9\u4e09\u4e2a\u53c2\u6570\u5747\u88ab\u8bbe\u4e3aNone\u3002\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u4e0a\u4e0b\u6587\u7684\u5f02\u5e38\u4fe1\u606f\u3002__exit__()\u65b9\u6cd5\u8fd4\u56deTrue\u6216False,\u5206\u522b\u6307\u793a\u88ab\u5f15\u53d1\u7684\u5f02\u5e38\u6709\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u5982\u679c\u8fd4\u56deFalse\uff0c\u5f15\u53d1\u7684\u5f02\u5e38\u5c06\u4f1a\u88ab\u4f20\u9012\u51fa\u4e0a\u4e0b\u6587\u3002\u5982\u679c__exit__()\u51fd\u6570\u5185\u90e8\u5f15\u53d1\u4e86\u5f02\u5e38\uff0c\u5219\u4f1a\u8986\u76d6\u6389\u6267\u884c\u4f53\u7684\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u3002\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\uff0c\u53ea\u9700\u8981\u8fd4\u56deFalse\uff0cwith\u8bed\u53e5\u4f1a\u68c0\u6d4b__exit__()\u8fd4\u56deFalse\u6765\u5904\u7406\u5f02\u5e38\u3002 enum from enum import IntEnum class Test(IntEnum): X = 2 Y = 1 print(2 == Test.X) pydantic\u6570\u636e\u9a8c\u8bc1 from pydantic import BaseModel, conint, ValidationError from typing import ( List, Union, Optional, Dict ) class Test(BaseModel): name: Optional[str] sex: Union[str, List[str]] d: Dict[str, int] id: conint(ge=1,le=10) try: test = Test(name='wlb', sex='male', d={'dict':1}, id=1) print(test.dict(), test.__annotations__) # {'name': 'wlb', 'sex': 'male', 'd': {'dict': 1}, 'id': 1} {'name': typing.Union[str, NoneType], 'sex': typing.Union[str, typing.List[str]], 'd': typing.Dict[str, int], 'id': <class '__main__.ConstrainedIntValue'>} except ValidationError: print(\"\u6570\u636e\u9519\u8bef\") islice from itertools import islice def test(): t = 0 while True: yield t t += 1 for i in islice(test(), 10, 21, 2): print(i) __iter__\u3001__next__ class Range7: # \u53ef\u8fed\u4ee3\u7c7b\u578b \u53ea\u9700\u8981\u5b9e\u73b0__iter__\u5373\u53ef def __init__(self,start,end) -> None: self.start = start self.end = end def __iter__(self): return Range7iterator(self) class Range7iterator: #\u8fd9\u662f\u8fed\u4ee3\u5668,\u4e00\u822c\u7684\u8fed\u4ee3\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21 def __init__(self,rangeobj) -> None: self.rangeobj = rangeobj self.cur = rangeobj.start def __iter__(self): return self def __next__(self): while True: if self.cur > self.rangeobj.end: raise StopIteration if self.is_7(self.cur): res = self.cur self.cur += 1 return res self.cur += 1 def is_7(self,num): if num == 0: return False return num%7==0 or \"7\" in str(num) for i in Range7(1,100): print(i,end=\" \") #\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0d\u4e00\u5b9a\u662f\u8fed\u4ee3\u5668\uff0c\u4f46\u8fed\u4ee3\u5668\u4e00\u5b9a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 # \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f7f\u7528 iter() \u4f1a\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u5219\u4f1a\u8fd4\u56de\u5b83\u81ea\u8eab # \u6bcf\u4e2a\u8fed\u4ee3\u5668\u7684\u88ab\u8fed\u4ee3\u8fc7\u7a0b\u662f\u4e00\u6b21\u6027\u7684\uff0c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5219\u4e0d\u4e00\u5b9a # \u53ef\u8fed\u4ee3\u5bf9\u8c61\u53ea\u9700\u8981\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u800c\u8fed\u4ee3\u5668\u8981\u989d\u5916\u5b9e\u73b0 __next__ \u65b9\u6cd5 \u6c42\u5b57\u5178\u7684\u6700\u5927\u503c prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } print(max(zip(prices.values(),prices.keys()))) print(max(prices.items(),key=lambda x:x[1])) print(max(prices,key=lambda k:prices[k])) \u6ce8\u610f\u5faa\u73af\u53d8\u91cf funcs = [] res = [] for x in range(7): def func(x=x): # \u53bb\u6389x=x\u5219\u51fa\u73b0[6,6,6,6,6,6] \u5728\u5faa\u73af\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6, \u5982\u679c\u8be5\u51fd\u6570\u5728\u5176\u4e3b\u4f53\u4e2d\u4f7f\u7528\u4e86\u5faa\u73af\u53d8\u91cf, \u5219\u95ed\u5305\u51fd\u6570\u5c06\u4e0e\u5faa\u73af\u53d8\u91cf\u7ed1\u5b9a, \u800c\u4e0d\u662f\u5b83\u7684\u503c. \u56e0\u6b64, \u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u4f7f\u7528\u6700\u540e\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684. return x funcs.append(func) res.append(func()) func_res = [f() for f in funcs] print(func_res) def create_mult(): res = [] for i in range(5): def func(x, i=i): # \u53bb\u6389i=i\u5219\u5168\u8f93\u51fa8\uff0c\u539f\u56e0\u548c\u4e0a\u9762\u4e00\u6837 return x * i res.append(func) return res for cr in create_mult(): print(cr(2)) \u7a7a\u5bf9\u8c61\u6a21\u5f0f \u4fee\u6539\u524d import decimal class CreateAccountError(Exception): \"\"\"Unable to create a account error\"\"\" class Account: \"\"\"\u4e00\u4e2a\u865a\u62df\u7684\u94f6\u884c\u8d26\u53f7\"\"\" def __init__(self, username, balance): self.username = username self.balance = balance @classmethod def from_string(cls, s): \"\"\"\u4ece\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u4e00\u4e2a\u8d26\u53f7\"\"\" try: username, balance = s.split() balance = decimal.Decimal(float(balance)) except ValueError: raise CreateAccountError('input must follow pattern \"{ACCOUNT_NAME} {BALANCE}\"') if balance < 0: raise CreateAccountError('balance can not be negative') return cls(username=username, balance=balance) def caculate_total_balance(accounts_data): \"\"\"\u8ba1\u7b97\u6240\u6709\u8d26\u53f7\u7684\u603b\u4f59\u989d \"\"\" result = 0 for account_string in accounts_data: try: user = Account.from_string(account_string) except CreateAccountError: pass else: result += user.balance return result accounts_data = [ 'piglei 96.5', 'cotton 21', 'invalid_data', 'roland $invalid_balance', 'alfred -3', ] print(caculate_total_balance(accounts_data)) \u7a7a\u5bf9\u8c61\u6a21\u5f0f\u7b80\u4ecb \u989d\u5916\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793aNone \u597d\u5904 \u5b83\u53ef\u4ee5\u52a0\u5f3a\u7cfb\u7edf\u7684\u7a33\u56fa\u6027\uff0c\u80fd\u6709\u6709\u6548\u5730\u9632\u6b62\u7a7a\u6307\u9488\u62a5\u9519\u5bf9\u6574\u4e2a\u7cfb\u7edf\u7684\u5f71\u54cd\uff0c\u4f7f\u7cfb\u7edf\u66f4\u52a0\u7a33\u5b9a\u3002 \u5b83\u80fd\u591f\u5b9e\u73b0\u5bf9\u7a7a\u5bf9\u8c61\u60c5\u51b5\u7684\u5b9a\u5236\u5316\u7684\u63a7\u5236\uff0c\u80fd\u591f\u638c\u63e1\u5904\u7406\u7a7a\u5bf9\u8c61\u7684\u4e3b\u52a8\u6743\u3002 \u5b83\u5e76\u4e0d\u4f9d\u9760Client\u6765\u4fdd\u8bc1\u6574\u4e2a\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002 \u5b83\u901a\u8fc7isNone\u5bf9==None\u7684\u66ff\u6362\uff0c\u663e\u5f97\u66f4\u52a0\u4f18\u96c5\uff0c\u66f4\u52a0\u6613\u61c2\u3002 import decimal class Account: \"\"\"\u4e00\u4e2a\u865a\u62df\u7684\u94f6\u884c\u8d26\u53f7\"\"\" def __init__(self, username, balance): self.username = username self.balance = balance @classmethod def from_string(cls, s): \"\"\"\u4ece\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u4e00\u4e2a\u8d26\u53f7\"\"\" try: username, balance = s.split() balance = decimal.Decimal(float(balance)) except ValueError: # raise CreateAccountError('input must follow pattern \"{ACCOUNT_NAME} {BALANCE}\"') return NullAccount() if balance < 0: return NullAccount() return cls(username=username, balance=balance) def caculate_total_balance(accounts_data): \"\"\"\u8ba1\u7b97\u6240\u6709\u8d26\u53f7\u7684\u603b\u4f59\u989d \"\"\" return sum(Account.from_string(s).balance for s in accounts_data) class NullAccount: # \u8981\u8fd4\u56de\u7684\u7a7a\u5bf9\u8c61 username = \"\" # \u5f53\u53d1\u751f\u9519\u8bef\u65f6username\u7684\u503c balance = 0 # \u5f53\u53d1\u751f\u9519\u8bef\u65f6balance\u7684\u503c def re_Null(): return NotImplementedError accounts_data = [ 'piglei 96.5', 'cotton 21', 'invalid_data', 'roland $invalid_balance', 'alfred -3', ] print(caculate_total_balance(accounts_data)) pathlib from pathlib import Path # \u628atxt\u6587\u4ef6\u91cd\u547d\u540d\u4e3acsv\u6587\u4ef6 def unify_ext_with_pathlib(path): for fpath in Path(path).glob(\"*.txt\"): fpath.rename(fpath.with_suffix(\".csv\")) print(Path(\".\") / \"test_pathlib.py\") # Path\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528/\u8fd0\u7b97\u7b26 print(Path(\"testvim.txt\").read_text()) # \u76f4\u63a5\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 \u5355\u5143\u6d4b\u8bd5 def say_hello(name=None): if name: return f\"hello {name}\" return \"hello world\" import unittest from typing import List class sayhellotest(unittest.TestCase): def setUp(self,nums:List[int] = 0): return super().setUp() def tearDown(self): return super().tearDown() def test_sayhello(self): rv = say_hello() self.assertEqual(rv,\"hello world\") def test_to_name(self): rv = say_hello(\"wlb\") self.assertEqual(rv,\"hello wlb\") if __name__ == '__main__': unittest.main() takewhile\u548cdropwhile from itertools import dropwhile,takewhile # \u4f60\u60f3\u904d\u5386\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u5f00\u59cb\u7684\u67d0\u4e9b\u5143\u7d20\u4f60\u5e76\u4e0d\u611f\u5174\u8da3\uff0c\u60f3\u8df3\u8fc7\u5b83\u4eec\uff0c\u7528dropwhile with open('testvim.txt','r') as fp: for i in dropwhile(lambda i:i.startswith(\"#\"),fp): # \u8df3\u8fc7\u524d\u9762#\u53f7\u5f00\u5934\u7684 print(i) with open(\"testvim.txt\",\"r\") as fp: for i in takewhile(lambda i:i.startswith(\"#\"),fp): # \u904d\u5386\u5e26#\u53f7\u5f00\u5934\u7684\uff0c\u9047\u5230\u4e0d\u662f#\u53f7\u5f00\u5934\u7684\u5c31\u9000\u51fa\u5faa\u73af\uff0c\u53ef\u4ee5\u5f53\u505abreak\u4f7f\u7528 # \u76f8\u5f53\u4e8e if not i.startwith(\"#\"): break print(i) \u88c5\u9970\u5668\u53ef\u4ee5\u88c5\u9970\u65b9\u6cd5 import random import wrapt # \u4e3a\u7b2c\u4e09\u65b9\u5e93 def provide_number(min_num, max_num): @wrapt.decorator def wrapper(wrapped, instance, args, kwargs): # \u53c2\u6570\u542b\u4e49\uff1a # # - wrapped\uff1a\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6216\u7c7b\u65b9\u6cd5 # - instance\uff1a # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a\u666e\u901a\u7c7b\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a\u7c7b\u5b9e\u4f8b # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a classmethod \u7c7b\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a\u7c7b # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a\u7c7b/\u51fd\u6570/\u9759\u6001\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a None # # - args\uff1a\u8c03\u7528\u65f6\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u6ce8\u610f\u6ca1\u6709 * \u7b26\u53f7\uff09 # - kwargs\uff1a\u8c03\u7528\u65f6\u7684\u5173\u952e\u5b57\u53c2\u6570\uff08\u6ce8\u610f\u6ca1\u6709 ** \u7b26\u53f7\uff09 # num = random.randint(min_num, max_num) # \u65e0\u9700\u5173\u6ce8 wrapped \u662f\u7c7b\u65b9\u6cd5\u6216\u666e\u901a\u51fd\u6570\uff0c\u76f4\u63a5\u5728\u5934\u90e8\u8ffd\u52a0\u53c2\u6570 args = (num,) + args return wrapped(*args, **kwargs) return wrapper @provide_number(1, 100) def print_random_number(num): print(num) class Foo: @provide_number(1, 100) def print_random_number(self, num): print(num) Foo().print_random_number() print_random_number() # \u4f7f\u7528 wrapt \u6a21\u5757\u7f16\u5199\u7684\u88c5\u9970\u5668\uff0c\u76f8\u6bd4\u539f\u6765\u62e5\u6709\u4e0b\u9762\u8fd9\u4e9b\u4f18\u52bf\uff1a # \u5d4c\u5957\u5c42\u7ea7\u5c11\uff1a\u4f7f\u7528 @wrapt.decorator \u53ef\u4ee5\u5c06\u4e24\u5c42\u5d4c\u5957\u51cf\u5c11\u4e3a\u4e00\u5c42 # \u66f4\u7b80\u5355\uff1a\u5904\u7406\u4f4d\u7f6e\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u5ffd\u7565\u7c7b\u5b9e\u4f8b\u7b49\u7279\u6b8a\u60c5\u51b5 # \u66f4\u7075\u6d3b\uff1a\u9488\u5bf9 instance \u503c\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\u540e\uff0c\u66f4\u5bb9\u6613\u8ba9\u88c5\u9970\u5668\u53d8\u5f97\u901a\u7528 __getattr__\u3001__setattr__ class Chain(object): def __init__(self, path=''): self._path = path def __getattr__(self, path): return Chain('%s/%s' % (self._path, path)) def __str__(self): return self._path def users(self,name): return Chain(f\"{self._path}/users/{name}\") __repr__ = __str__ chain = Chain(\"vllbc\") print(chain.x.x.x.x.x) # out: vllbc/x/x/x/x/x __getitem__ \u5143\u7c7b ''' \u5143\u7c7b\u5c31\u662f\u63a7\u5236\u7c7b\u7684\u521b\u5efa\u7684\u7c7b ''' class ModelMetaclass(type): def __new__(cls, name, bases, attrs): if name == 'Model': return type.__new__(cls, name, bases, attrs) print(f\"found model {name}\") maps = dict() for k, v in attrs.items(): if isinstance(v, Field): print(f\"Found mapping {k} ==> {v}\") maps[k] = v for k, v in maps.items(): attrs.pop(k) attrs['__mappings__'] = maps attrs['__table__'] = name return type.__new__(cls, name, bases, attrs) class Field(object): def __init__(self, name, column_type): self.name = name self.column_type = column_type def __str__(self): return '<%s:%s>' % (self.__class__.__name__, self.name) class StringField(Field): def __init__(self, name, column_type='TXT'): super().__init__(name, column_type) class IntegerField(Field): def __init__(self, name, column_type='INT'): super().__init__(name, column_type) class Model(dict, metaclass=ModelMetaclass): def __init__(self, **kw): super(Model, self).__init__(**kw) def __getattr__(self, key): try: return self[key] except KeyError: raise AttributeError(r\"'Model' object has no attribute '%s'\" % key) def __setattr__(self, key, value): self[key] = value def save(self): fields = [] params = [] args = [] for k, v in self.__mappings__.items(): fields.append(k) params.append('?') args.append(getattr(self, k, None)) sql = 'insert into %s (%s) values (%s)' % ( self.__table__, ','.join(fields), ','.join(params)) print('SQL: %s' % sql) print('ARGS: %s' % str(args)) class User(Model): # \u5b9a\u4e49\u7c7b\u7684\u5c5e\u6027\u5230\u5217\u7684\u6620\u5c04\uff1a id = IntegerField('id') name = StringField('username') email = StringField('email') password = StringField('password') # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff1a u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd') # \u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff1a u.save()","title":"\u6280\u5de7"},{"location":"python/skill/#_1","text":"# a = 1 # b = 2 # temp = b # b = a # a = temp # print(a,b) a = 1 b = 2 a,b = b,a print(a,b) 2 1","title":"\u4e24\u4e2a\u6570\u7684\u4ea4\u6362"},{"location":"python/skill/#_2","text":"a = 17 name = \"wlb\" # print('%s is %d years old' % (name,a)) # print('{} is {} years old'.format(name,a)) print(f'{name} is {a} years old') #\u660e\u663e\u8fd9\u4e2a\u65b9\u6cd5\u66f4\u7b80\u5355 wlb is 17 years old","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"python/skill/#yieldyield-from","text":"def fib(n): a = 0 b = 1 for _ in range(n): yield a a,b = b,a+b for i in fib(10): print(i) #\u6ce8\u91ca\u7684\u5185\u5bb9\u4e0eyield a\u6548\u679c\u76f8\u540c\uff0cyield\u76f8\u5f53\u4e8e\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668 yield\u4e00\u4e2a\u6570\u540e\u4f1a\u7acb\u9a6c\u4f20\u9012\u51fa\u53bb\uff0c\u800creturn \u8981\u7b49\u5217\u8868\u90fd\u751f\u6210\u5b8c\u6bd5\u540e\u624d\u4f1a\u4f20\u51fa\u53bb #\u4ed6\u7684\u4f18\u52bf\u5728\u4e8e\u4e00\u4e9b\u8017\u65f6\u7684\u64cd\u4f5c # \u901a\u8fc7yield\u6765\u8fdb\u884cdfs\uff0c\u7531\u4e8e\u6ca1\u6709\u5b9e\u73b0__next__\u56e0\u6b64\u662f\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 class Node: def __init__(self,value) -> None: self._value = value self._node = [] def __repr__(self) -> str: return f'Node({self._value})' def add_children(self,node:'Node') -> 'Node': self._node.append(node) def __iter__(self): return iter(self._node) def dfs(self): yield self for i in self: yield from i.dfs() root = Node(0) children1 = Node(1) children2 = Node(2) root.add_children(children1) root.add_children(children2) children1.add_children(Node(3)) children1.add_children(Node(4)) children11 = Node(5) children2.add_children(children11) children11.add_children(Node(6)) for c in root.dfs(): print(c) from typing import Iterable def test_format(datas: Iterable[str], max_len: int): for data in datas: if len(data) > max_len: yield data[:max_len] + '...' else: yield data print(list(test_format(['vllbc', 'test_for_this_function', 'good'],5))) # \u628a\u957f\u5ea6\u5927\u4e8e5\u7684\u90e8\u5206\u53d8\u6210\u7701\u7565\u53f7 #\u5b50\u751f\u6210\u5668 def average_gen(): total = 0 count = 0 average = 0 while True: new_num = yield average if new_num is None: break count += 1 total += new_num average = total/count return total,count,average # \u59d4\u6258\u751f\u6210\u5668 def proxy_gen(): while True: total,count,average = yield from average_gen() # yield from\u540e\u9762\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61,\u6b64\u6587\u540e\u9762\u7684\u5c06\u591a\u7ef4\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u4e2dflatten\u51fd\u6570\u5c31\u7528\u5230\u4e86yield from\uff0c\u539f\u7406\u5c31\u662f\u5982\u679c\u5217\u8868\u4e2d\u4e00\u4e2a\u5143\u7d20\u662f\u5217\u8868\u5c31yield from\u8fd9\u4e2a\u5217\u8868\uff0c\u5426\u5219\u5c31\u76f4\u63a5yield\u8fd9\u4e2a\u5143\u7d20\uff0c\u4e5f\u5229\u7528\u4e86\u9012\u5f52\u7684\u65b9\u6cd5\u3002\u5982\u679c\u5b50\u751f\u6210\u5668\u9000\u51fawhile\u5faa\u73af\u4e86\uff0c\u5c31\u6267\u884creturn\u4ee5\u83b7\u53d6\u8fd4\u56de\u503c\u3002 print(total,count,average) def main(): t = proxy_gen() next(t) print(t.send(10)) print(t.send(15)) print(t.send(20)) t.send(None) main()","title":"yield\u4e0eyield from"},{"location":"python/skill/#_3","text":"lists = [f\"http://www.baidu.com/page{n}\" for n in range(21)] lists#\u6b64\u65b9\u6cd5\u5728\u722c\u866b\u6784\u9020urls\u4e2d\u975e\u5e38\u5e38\u7528 # lists = [f\"http://www.baidu.com/page{n}\" for n in range(21) if n%2==0] page\u5076\u6570 # alp = \"abcdefghigklmnopqrstuvwxyz\" # ALP = [n.upper() for n in alp] \u5c06\u5c0f\u5199\u8f6c\u6362\u4e3a\u5927\u5199","title":"\u5217\u8868\u89e3\u6790\u5f0f"},{"location":"python/skill/#enumerate","text":"lists = ['apple','banana','cat','dog'] for index,name in enumerate(lists): print(index,name) # \u624b\u52a8\u5b9e\u73b0\u4e00\u4e0benumerate from typing import Iterable def enumerate_(Iterable:Iterable,start=0): yield from zip(range(start,start+len(Iterable)),Iterable) for i,item in enumerate_([1,2,3,4,5,6],9): print(i,item)","title":"enumerate"},{"location":"python/skill/#_4","text":"dic1 = {'qq':1683070754, 'phone':123456789 } dic2 = { 'height':180, 'handsome':True } dic3 = {**dic1,**dic2} #\u5408\u5e76\u4e24\u4e2a\u5b57\u5178 **\u53eb\u505a\u89e3\u5305 #\u6216\u8005\u7528dic1.update(dic2) \u5c06dic2\u5408\u5e76\u5230dic1 \u76f8\u540c\u952e\u5219dic2\u66ff\u4ee3dic1 dic3 {'handsome': True, 'height': 180, 'phone': 123456789, 'qq': 1683070754}","title":"\u5b57\u5178\u7684\u5408\u5e76"},{"location":"python/skill/#_5","text":"name = \"wang lingbo\" xing,ming = name.split(\" \") #split\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5206\u522b\u8d4b\u7ed9xing \u548cming print(xing,ming) #x,*y,z = [1,2,3,4,5] #x:1 z:5 y:[2,3,4] wang lingbo","title":"\u5e8f\u5217\u89e3\u5305"},{"location":"python/skill/#lambda","text":"lists = [1,2,3,4,5,6] maps = map(lambda x:x*x,lists) print(maps) print(list(maps)) <map object at 0x000001911C8E03C8> [1, 4, 9, 16, 25, 36]","title":"\u533f\u540d\u51fd\u6570lambda"},{"location":"python/skill/#_6","text":"def logging(level): def wapper(func): def inner_wapper(*args, **wbargs): print(f'{level} enter in {func.__name__}()') return func(*args, **wbargs) #\u4e0d\u5199return \u4e5f\u53ef\u4ee5 return inner_wapper return wapper @logging('inner') def say(a): print('hello! {}'.format(a)) say('wlb') inner enter in say() hello! wlb import time def print_time(func): def wapper(*args,**wbargs): print(f'{func.__name__}()\u8c03\u7528\u4e8e{time.asctime(time.localtime(time.time()))}') return func(*args,**wbargs) #\u4e0d\u5199return \u4e5f\u53ef\u4ee5 return wapper @print_time def my_name(name): print(f'look!{name}') my_name(\"wlb\") my_name()\u8c03\u7528\u4e8eWed Dec 9 21:21:00 2020 look!wlb","title":"\u88c5\u9970\u5668"},{"location":"python/skill/#mapreducefilter","text":"# map print(list(map(abs,[-1,-2,-3,-4,-5]))) #\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7528\u533f\u540d\u51fd\u6570 # reduce from functools import reduce #python3\u4e2d\u9700\u8981\u4ece\u5185\u7f6e\u5e93\u5bfc\u5165 print(reduce(lambda x,y:x+y,list(map(int,str(131351412))))) # filter a = [1,2,3,4,5,6,7,8,9] new_a = filter(lambda x:x%2!=0,a) #filter\u5c31\u662f\u7b5b\u9009 list(new_a) # \u8fd9\u4e09\u4e2a\u90fd\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u5e38\u7528\u7684\u51fd\u6570","title":"map\u3001reduce\u3001filter"},{"location":"python/skill/#join","text":"# lists = ['1','2','3','4','5'] # ''.join(lists) lists = [1,2,3,4,5] ''.join(list(map(str,lists))) #join\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6240\u4ee5\u8981map\u8f6c\u6362\u4e00\u4e0b '12345'","title":"join()"},{"location":"python/skill/#_7","text":"ab = [[1, 2, 3], [5, 8], [7, 8, 9]] print([i for item in ab for i in item]) #\u5229\u7528\u5217\u8868\u89e3\u6790\u5f0f print(sum(ab, [])) # \u5229\u7528sum\u51fd\u6570 from functools import reduce print(reduce(lambda x,y:x+y,ab)) # \u5229\u7528reduce from itertools import chain print(list(chain(*ab))) # \u5229\u7528chain def flatten(items,ignore=(str,bytes)): for x in items: if isinstance(x,Iterable) and not isinstance(x,ignore): yield from flatten(x) else: yield x print(list(flatten(ab))) # \u5229\u7528\u81ea\u5df1\u5b9a\u4e49\u7684\u51fd\u6570 [1, 2, 3, 5, 8, 7, 8, 9]","title":"\u5c06\u591a\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u7ef4"},{"location":"python/skill/#_8","text":"lists = [2,4,3,2,5,4] lists[::-1] # list(reversed(lists))","title":"\u5c06\u4e00\u4e2a\u5217\u8868\u5012\u5e8f"},{"location":"python/skill/#_9","text":"import random b = 8 t = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' print(''.join(random.sample(t,b))) # \u4e3b\u8981\u5c31\u662f\u7528sample\u8fd9\u4e2a\u65b9\u6cd5\u6765\u53d6\u591a\u4e2a\u968f\u673a\u503c 0KmtEZSU","title":"\u968f\u673a\u751f\u6210\u5bc6\u7801"},{"location":"python/skill/#_10","text":"assert(True is True) #\u6210\u529f print('yes') assert(True is False) #\u62a5\u9519 print('no') yes","title":"\u65ad\u8a00"},{"location":"python/skill/#_11","text":"list1 = [1,2,31,13] list2 = [5,2,12,32] # list1.append(list2) # print(list1) #\u9519\u8bef\u65b9\u6cd5 list1.extend(list2) print(list1) #\u6b63\u786e\u65b9\u6cd5 [1, 2, 31, 13, 5, 2, 12, 32] a = [1,2,3,4,5] b = ['a','b','c','d','e'] fin = dict() for k,i in zip(a,b): fin[k] = i print(fin) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} # \u6216\u8005 d = {} for i,d[i] in zip(a,b): pass print(d) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} \u4e3a\u4ec0\u4e48\uff1f\u5728WTFpython\u4e2d\u6709\u8bb2 # \u6216\u8005 fin = dict(zip(a,b)) print(fin) # {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}","title":"\u5408\u5e76\u5217\u8868"},{"location":"python/skill/#_12","text":"lists = ['dog','cat','you'] print(*lists) #\u60f3\u5bf9\u4e00\u4e2a\u5217\u8868\u8fdb\u884czip\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837 print(list(zip(*lists))) def test(*args): print(\"args:\",args) test(*lists) dog cat you [('d', 'c', 'y'), ('o', 'a', 'o'), ('g', 't', 'u')] args:('dog','cat','you')","title":"\u5bf9\u8fdb\u884c\u89e3\u5305"},{"location":"python/skill/#_13","text":"class Test: x = 1 y = 2 print(Test.x,Test.y) #==>print(Test().x,Test().y) class Test: def __init__(self,x,y): self.x = x self.y = y test = Test(1,2) print(test.x,test.y) 1 2 1 2 class Test: def __init__(self,maxlen): self.maxlen = maxlen self.lists = [] def put(self,*args): for i in args: if len(self.lists) <= self.maxlen: self.lists.append(i) else: break def get(self): return self.lists.pop() def empty(self): if len(self.lists) != 0: return False else: return True def __len__(self): return len(self.lists) def __del__(self): print(\"del this class\") def printfs(self): return self.lists test = Test(10) test.put(1,2,3,4,5,6) print(test.empty()) print(len(test)) print(test.printfs()) test.__del__() #\u76f4\u63a5\u8c03\u7528test\u8fd8\u5b58\u5728\uff0c__del__\u662f\u6790\u6784\u51fd\u6570\uff0c\u5783\u573e\u56de\u6536\u65f6\u5c31\u4f1a\u8c03\u7528a print(test) #del test #print(test) \u8fd9\u65f6\u5019\u5c31\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3adel\u5c06test\u8fd9\u4e2a\u5bf9\u8c61\u76f4\u63a5\u5220\u9664\u4e86 False 6 [1, 2, 3, 4, 5, 6] del this class <__main__.Test object at 0x0000021B7DF33EB0> del this class","title":"\u5bf9\u7c7b\u7684\u4e00\u4e9b\u64cd\u4f5c"},{"location":"python/skill/#_14","text":"all([True,True,False]) #False all([True,True,True]) #True any([True,True,False]) #True any([True,False,False])#True any([False,False]) #False import random for i in iter(lambda:random.randint(1,10),5): print(i) #\u76f8\u5f53\u4e8e while True: x = random.randint(1,10) print(x) if x == 5: break iter(object[, sentinel]) sentinel\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u82e5\u4e0d\u4f20\u5165\uff0c\u5219object\u5fc5\u987b\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f20\u5165\u5219\u5fc5\u987b\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61,\u5f53\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u8fd4\u56de\u503c\u4e3asentinel\u629b\u51fa\u5f02\u5e38\uff0c\u4f46for\u5faa\u73af\u4f1a\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\uff0c\u8fd9\u5e38\u5e38\u7528\u4e8eIO\u64cd\u4f5c \u200b #\u8fd9\u662fcookbook\u91cc\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50 import sys f = open('xxx/xxx.txt') for chunk in iter(lambda:f.read(10),''): n = sys.stdout.write(chunk) #\u6df1\u5165\u7406\u89e3\u4e00\u4e0b import random class Test: def __init__(self): self.lists = [1,23,2,4,1,421,412] def __call__(self): return random.choice(self.lists) for i in iter(Test(),1): print(i) #\u8fd9\u662f\u53ef\u4ee5\u6b63\u5e38\u8f93\u51fa\u7684\uff0c\u56e0\u4e3a\u5b9e\u4f8b\u5316Test\u540e\u662f\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8fd4\u56de\u5217\u8868\u7684\u968f\u673a\u503c\uff0c\u5f53\u8fd4\u56de1\u65f6\u5219\u5faa\u73af\u7ed3\u675f\uff0c\u5982\u679c\u628a__call__\u9b54\u6cd5\u65b9\u6cd5\u53bb\u4e86\u540e\uff0c\u5219\u4f1a\u62a5\u9519\uff0c\u5982\u679c\u60f3\u8981\u4e0d\u4f7f\u7528\u9b54\u6cd5\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u7528\u533f\u540d\u51fd\u6570 import random class Test: def __init__(self): self.lists = [1,23,2,4,1,421,412] # def __call__(self): # return random.choice(self.lists) for i in iter(lambda:random.choice(Test().lists),1): print(i) #\u603b\u4e4b\uff0c\u5439\u7206cookbook","title":"\u4e00\u4e9b\u5185\u7f6e\u51fd\u6570"},{"location":"python/skill/#functoolspartial","text":"#\u5148\u770b\u6f14\u793a from functools import partial def add(a,b): return a + b addOne = partial(add,1) addOne(2) #3 addOne(4) #5 #\u5927\u6982\u610f\u601d\u5c31\u662f\u5229\u7528partial\u5c06\u51fd\u6570\u7684\u4e00\u4e2a\u53c2\u6570\u56fa\u5b9a\u4f4f\u4e86 def partial(func,*wargs): def wapper(*kargs): args = list(wargs) print(f\"args:{args}\") print(f\"kargs:{kargs}\") args.extend(kargs) print(f\"last:{args}\") return func(*args) return wapper def add(a,b,c): return a + b + c addone = partial(add,1,2) #\u6b64\u65f6addone\u76f8\u5f53\u4e8ewapper print(addone(3)) #\u8c03\u7528wrapper 3\u4e3a\u4f20\u5165\u7684kargs #\u8f93\u51fa\uff1a args:[1, 2] kargs:(3,) last:[1, 2, 3] 6 #\u4e0a\u9762\u662fpartial\u51fd\u6570\u7684\u7b80\u5316\u7248\u672c #\u5f88\u660e\u663e\u7684\u95ed\u5305\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u7406\u89e3 #\u5f53\u7136\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a\u88c5\u9970\u5668\u64cd\u4f5c from functools import wraps from functools import wraps,partial def out_wapper(*wargs): def partialout(func): return partial(func,*wargs) # \u8fd9\u662f\u4f7f\u7528partial\u539f\u7406\u7684 # @wraps(func) # def wrapper(*kargs): # args = list(wargs) # print(f\"args:{args}\") # print(f\"kargs:{kargs}\") # args.extend(kargs) # print(f\"last:{args}\") # return func(*args) # return wrapper return partialout @out_wapper(1,2) def add(a,b,c): return a + b + c print(add(3)) #6 #\u660e\u663e\u88c5\u9970\u5668\u8981\u9ebb\u70e6\u4e00\u70b9\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6bd5\u7adf\u662f\u5c01\u88c5\u597d\u7684\u51fd\u6570\uff0c\u4ee5\u540e\u76f4\u63a5\u7528\u5c31\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u4e86\u89e3\u8fd9\u4e9b\u6709\u52a9\u4e8e\u63d0\u9ad8\u601d\u7ef4\u6c34\u5e73","title":"functools.partial"},{"location":"python/skill/#classmethodstaticmethod","text":"class A(object): bar = 1 def func1(self): print ('foo') @classmethod def func2(cls): print ('func2') print (cls.bar) cls().func1() # \u8c03\u7528 foo \u65b9\u6cd5 A.func2() # \u4e0d\u9700\u8981\u5b9e\u4f8b\u5316 func2 1 foo class A(object): # \u5c5e\u6027\u9ed8\u8ba4\u4e3a\u7c7b\u5c5e\u6027\uff08\u53ef\u4ee5\u7ed9\u76f4\u63a5\u88ab\u7c7b\u672c\u8eab\u8c03\u7528\uff09 num = \"\u7c7b\u5c5e\u6027\" # \u5b9e\u4f8b\u5316\u65b9\u6cd5\uff08\u5fc5\u987b\u5b9e\u4f8b\u5316\u7c7b\u4e4b\u540e\u624d\u80fd\u88ab\u8c03\u7528\uff09 def func1(self): # self : \u8868\u793a\u5b9e\u4f8b\u5316\u7c7b\u540e\u7684\u5730\u5740id print(\"func1\") print(self) # \u7c7b\u65b9\u6cd5\uff08\u4e0d\u9700\u8981\u5b9e\u4f8b\u5316\u7c7b\u5c31\u53ef\u4ee5\u88ab\u7c7b\u672c\u8eab\u8c03\u7528\uff09 @classmethod def func2(cls): # cls : \u8868\u793a\u6ca1\u7528\u88ab\u5b9e\u4f8b\u5316\u7684\u7c7b\u672c\u8eab print(\"func2\") print(cls) print(cls.num) cls().func1() # \u4e0d\u4f20\u9012\u4f20\u9012\u9ed8\u8ba4self\u53c2\u6570\u7684\u65b9\u6cd5\uff08\u8be5\u65b9\u6cd5\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5\u88ab\u7c7b\u8c03\u7528\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4e0d\u6807\u51c6\uff09 def func3(): print(\"func3\") print(A.num) # \u5c5e\u6027\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u672c\u8eab\u8c03\u7528\u7684 # A.func1() \u8fd9\u6837\u8c03\u7528\u662f\u4f1a\u62a5\u9519\uff1a\u56e0\u4e3afunc1()\u8c03\u7528\u65f6\u9700\u8981\u9ed8\u8ba4\u4f20\u9012\u5b9e\u4f8b\u5316\u7c7b\u540e\u7684\u5730\u5740id\u53c2\u6570\uff0c\u5982\u679c\u4e0d\u5b9e\u4f8b\u5316\u7c7b\u662f\u65e0\u6cd5\u8c03\u7528\u7684 A.func2() A.func3() class A(object): def foo(self, x): print(\"executing foo(%s,%s)\" % (self, x)) print('self:', self) @staticmethod def static_foo(x): print(\"executing static_foo(%s)\" % x) \u95ee\u9898\uff1a@staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u51fd\u6570\u4e0e\u666e\u901a\u7684\u7c7b\u5916\u51fd\u6570\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff1f @staticmethod\u662f\u628a\u51fd\u6570\u5d4c\u5165\u5230\u7c7b\u4e2d\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u51fd\u6570\u5c31\u5c5e\u4e8e\u7c7b\uff0c\u540c\u65f6\u8868\u660e\u51fd\u6570\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u7c7b\u3002\u901a\u8fc7\u5b50\u7c7b\u7684\u7ee7\u627f\u8986\u76d6\uff0c\u80fd\u66f4\u597d\u7684\u7ec4\u7ec7\u4ee3\u7801\u3002 from pydantic import BaseModel from typing import Sequence class Test(BaseModel): text: Sequence[str] @classmethod def create(cls,text: Sequence[str]) -> \"Test\": # classmethod\u5e38\u7528\u6784\u9020\u51fd\u6570 return cls(text=text) def to_tuple(self) -> \"Test\": return Test(text=tuple(self.text)) @classmethod def join(cls, *Tests): return cls.create(sum([i.text for i in Tests],[])) test = Test.create(list(\"Hello world\")) t2 = Test.create(list(\"NIHAO\")) print(Test.join(test, t2)) # text=['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', 'N', 'I', 'H', 'A', 'O']","title":"@classmethod\u548c@staticmethod"},{"location":"python/skill/#_15","text":"#\u5148\u770b\u8fd9\u6837\u7684\u4ee3\u7801 \u7c7b\u5b9e\u73b0\u88c5\u9970\u5668\u8981\u6c42\u7c7b\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u7684 import time import functools class DelayFunc: def __init__(self, duration, func): self.duration = duration self.func = func def __call__(self, *args, **kwargs): print(f'Wait for {self.duration} seconds...') time.sleep(self.duration) return self.func(*args, **kwargs) def eager_call(self, *args, **kwargs): print('Call without delay') return self.func(*args, **kwargs) def delay(duration): \"\"\"\u88c5\u9970\u5668\uff1a\u63a8\u8fdf\u67d0\u4e2a\u51fd\u6570\u7684\u6267\u884c\u3002\u540c\u65f6\u63d0\u4f9b .eager_call \u65b9\u6cd5\u7acb\u5373\u6267\u884c \"\"\" # \u6b64\u5904\u4e3a\u4e86\u907f\u514d\u5b9a\u4e49\u989d\u5916\u51fd\u6570\uff0c\u76f4\u63a5\u4f7f\u7528 functools.partial \u5e2e\u52a9\u6784\u9020 # DelayFunc \u5b9e\u4f8b return functools.partial(DelayFunc, duration) @delay(2) def add(a,b): print(a,b) add(1,2) #\u5ef6\u8fdf\u4e24\u79d2\u8f93\u51fa3 \u76f8\u5f53\u4e8edelay(2)(add)(1,2) add.eager_call(1,2) #\u4e0d\u5ef6\u8fdf\u8f93\u51fa3 \u76f8\u5f53\u4e8edelay(2)(add).eager_call(1,2) #\u989d\uff0c\u5f53\u7136\uff0c\u60f3\u66f4\u6df1\u5165\u7406\u89e3\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u5199 def delay(duration): def partial(func): return DelayFunc(duration,func) return partial # \u4e0a\u9762\u7684\u5c31\u76f8\u5f53\u4e8e partial(DelayFunc,duration),\u7f3a\u7684func\u53c2\u6570\u5c31\u662f\u8981\u4fee\u9970\u7684\u51fd\u6570 @delay(2) def add(a,b): return a + b print(add(1,2)) \u4e0e\u7eaf\u51fd\u6570\u76f8\u6bd4\uff0c\u6211\u89c9\u5f97\u4f7f\u7528\u7c7b\u5b9e\u73b0\u7684\u88c5\u9970\u5668\u5728 \u7279\u5b9a\u573a\u666f \u4e0b\u6709\u51e0\u4e2a\u4f18\u52bf\uff1a \u5b9e\u73b0\u6709\u72b6\u6001\u7684\u88c5\u9970\u5668\u65f6\uff0c\u64cd\u4f5c\u7c7b\u5c5e\u6027\u6bd4\u64cd\u4f5c\u95ed\u5305\u5185\u53d8\u91cf\u66f4\u7b26\u5408\u76f4\u89c9\u3001\u4e0d\u6613\u51fa\u9519 \u5b9e\u73b0\u4e3a\u51fd\u6570\u6269\u5145\u63a5\u53e3\u7684\u88c5\u9970\u5668\u65f6\uff0c\u4f7f\u7528\u7c7b\u5305\u88c5\u51fd\u6570\uff0c\u6bd4\u76f4\u63a5\u4e3a\u51fd\u6570\u5bf9\u8c61\u8ffd\u52a0\u5c5e\u6027\u66f4\u6613\u4e8e\u7ef4\u62a4 \u66f4\u5bb9\u6613\u5b9e\u73b0\u4e00\u4e2a\u540c\u65f6\u517c\u5bb9\u88c5\u9970\u5668\u4e0e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae\u7684\u5bf9\u8c61","title":"\u7528\u7c7b\u5b9e\u73b0\u88c5\u9970\u5668"},{"location":"python/skill/#basemodel","text":"from pydantic import BaseModel,AnyUrl class Test(BaseModel): # \u7ee7\u627f\u540e\u53ef\u4ee5\u7528\u7c7b\u5c5e\u6027\u521b\u5efa\u5b9e\u4f8b url: AnyUrl data: str def __str__(self): return self.url + self.data kwargs = { 'url': 'https://www.baidu.com', 'data': '/search' } print(Test(**kwargs))","title":"BaseModel"},{"location":"python/skill/#python","text":"from pydantic import BaseModel from typing import Any class cout(): def __init__(self, cls: \"Test\", text: str) -> None: self.cls = cls self.text = text def __str__(self): return f\"{self.cls} {self.text}\" #\u7a0b\u5e8f\u5230cout\u65f6 Test\u7c7b\u5e76\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u6700\u540eTest\u5728\u53d8\u91cf\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u52a0\u4e0a\u5f15\u53f7 class Test(BaseModel): def __str__(self) -> str: return \"I am Test Class\" print(cout(cls=Test(), text=\"hello world!\"))","title":"python\u7c7b\u578b\u6ce8\u91ca"},{"location":"python/skill/#namedtuple","text":"from collections import namedtuple Test = namedtuple(\"Test\", ['name', 'age', 'sex']) def test_for_test(name: str, year: int, sex: str) -> \"Test\": return Test( name=name.title(), age=2021 - year, sex=sex ) name,age,sex = test_for_test('wlb', 2002, 'male') print(name, age, sex)","title":"namedtuple"},{"location":"python/skill/#property","text":"from pydantic import BaseModel class Test(): def __init__(self, cls, n): self.cls = cls self.n = n @property def to_string_cls(self): return self.cls @property def to_strings(self): return self.n class Test_For(BaseModel): num: int def __str__(self): return str(self.num) __repr__ = __str__ test = Test(Test_For, 22) print(test.to_string_cls(num=1)) # 1 print(test.to_strings) # 22","title":"@property"},{"location":"python/skill/#_16","text":"from typing import Iterable from pydantic import BaseModel,conint,ValidationError class NumberInput(BaseModel): num: conint(ge=0, le=100) def input_a_number(): while True: n = input(\"\u8f93\u5165\u4e00\u4e2a\u6570\") try: n = NumberInput(num=n) except ValidationError as e: print(e) continue n = n.num break return n print(input_a_number()) #\u8981\u6c42\u8f93\u5165\u4e00\u4e2a0-100\u7684\u6570 \u8fd9\u6837\u662f\u4e0d\u662f\u5f88\u4f18\u96c5","title":"\u5728\u8fb9\u754c\u5904\u601d\u8003"},{"location":"python/skill/#super","text":"\u4eca\u5929\u5b66\u4e60cookbook8-8 \u5b50\u7c7b\u4e2d\u6269\u5c55property \u5148\u8d34\u4e00\u4e0b\u4ee3\u7801 class Person: def __init__(self, name): self.name = name # \u6709\u610f\u601d\u7684\u662f \u8fd9\u91cc\u7684self.name\u662f@property\u4fee\u9970\u7684 \u8fd9\u884c\u4ee3\u7801\u8c03\u7528name.setter # Getter function @property def name(self): return self._name # Setter function @name.setter def name(self, value): if not isinstance(value, str): raise TypeError('Expected a string') self._name = value # Deleter function @name.deleter def name(self): raise AttributeError(\"Can't delete attribute\") # \u5b50\u7c7b class SubPerson(Person): @property def name(self): print('Getting name') return super().name @name.setter def name(self, value): print('Setting name to', value) super(SubPerson, SubPerson).name.__set__(self, value) @name.deleter def name(self): print('Deleting name') super(SubPerson, SubPerson).name.__delete__(self) \u770b\u5230super(SubPerson, SubPerson)\u611f\u5230\u5f88\u7591\u60d1\uff0c\u4e8e\u662f\u641c\u7d22\u8d44\u6599\u5927\u81f4\u641e\u660e\u767d\u4e86 \u901a\u4fd7\u8bf4\u9ed8\u8ba4\u7684super(SubPerson,self) (\u76f4\u63a5\u5199super()\u4e5f\u53ef) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u4e3a\u4e86\u59d4\u6258\u7ed9\u4e4b\u524d\u5b9a\u4e49\u7684setter\u65b9\u6cd5\uff0c\u9700\u8981\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u4e4b\u524d\u5b9a\u4e49\u7684name\u5c5e\u6027\u7684 __set__() \u65b9\u6cd5\u3002 \u4e0d\u8fc7\uff0c\u83b7\u53d6\u8fd9\u4e2a\u65b9\u6cd5\u7684\u552f\u4e00\u9014\u5f84\u662f\u4f7f\u7528\u7c7b\u53d8\u91cf\u800c\u4e0d\u662f\u5b9e\u4f8b\u53d8\u91cf\u6765\u8bbf\u95ee\u5b83\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4f7f\u7528 super(SubPerson, SubPerson) \u7684\u539f\u56e0\u3002 \u4ece\u4e66\u4e2d\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u770b\u51fa super(cls,cls)\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b \u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0csuper()\u7684\u53c2\u6570\u7684\u4f5c\u7528\u5c31\u662f\u7528\u4e8e\u5b9a\u4f4d\u4f4d\u7f6e \u7b2c\u4e00\u4e2acls\u5fc5\u987b\u662f\u7b2c\u4e8ccls\u7684\u7236\u7c7b\u6216\u8005\u4e8c\u8005\u76f8\u540c\uff0c\u53ef\u4ee5\u901a\u8fc7 cls.__mro__ \u67e5\u770b\u7ee7\u627f\u987a\u5e8f \u6bd4\u5982\u5728D\u91cc\u9762 super(A,D).__init__(self) \u800c __mro__ \u4e3a (<class '__main__.D'>, <class '__main__.A'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.Base'>, <class 'object'>) \u90a3\u4e48\u5c31\u8c03\u7528\u4eceA\u4ee5\u540e\u7684\u7c7b\u7684 __init__() \u4e0d\u8fc7\u91cd\u70b9\u4e0d\u5728\u8fd9\u91cc\uff0c\u91cd\u70b9\u662fsuper(cls,cls)\u548csuper(cls,object)\u7684\u533a\u522b","title":"super()\u8fdb\u9636"},{"location":"python/skill/#dataclass","text":"from dataclasses import dataclass import random @dataclass(order=True) # \u7b49\u4e8e\u5b9e\u73b0\u4e86\u5404\u79cd\u6bd4\u8f83\u65b9\u6cd5\u4f8b\u5982=\u3001>\u3001<,\u6392\u5e8f\u51fd\u6570\u90fd\u4f9d\u8d56\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61 class A: n: int nums = [A(random.randint(1,10)) for _ in range(10)] nums = sorted(nums) print(nums, end='') x = '''hello''' print(x) dataclass\u53ef\u4ee5\u81ea\u52a8\u6dfb\u52a0__rapr__\u65b9\u6cd5\uff0c\u4e0d\u5fc5\u81ea\u5df1\u5b9e\u73b0 @dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False) init \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __init__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48\u8be5\u7c7b\u5c06\u4e0d\u4f1a\u6709 __init__ \u65b9\u6cd5\u3002 repr \uff1a __repr__ \u65b9\u6cd5\u9ed8\u8ba4\u751f\u6210\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48\u8be5\u7c7b\u5c06\u4e0d\u4f1a\u6709 __repr__ \u65b9\u6cd5\u3002 eq \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __eq__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u90a3\u4e48 __eq__ \u65b9\u6cd5\u5c06\u4e0d\u4f1a\u88ab dataclass \u6dfb\u52a0\uff0c\u4f46\u9ed8\u8ba4\u4e3a object.__eq__ \u3002 order \uff1a\u9ed8\u8ba4\u5c06\u751f\u6210 __gt__ \u3001 __ge__ \u3001 __lt__ \u3001 __le__ \u65b9\u6cd5\u3002\u5982\u679c\u4f20\u5165 False \uff0c\u5219\u7701\u7565\u5b83\u4eec\u3002 unsafe_hash \uff1a\u9ed8\u8ba4\u751f\u6210__hash__\u65b9\u6cd5\uff0c\u7528\u4e8e\u6784\u5efa\u53efhashable\u7684\u7c7b from dataclasses import dataclass @dataclass(unsafe_hash=True) class VisitRecordDC: first_name: str last_name: str phone_number: str # \u8df3\u8fc7\u201c\u8bbf\u95ee\u65f6\u95f4\u201d\u5b57\u6bb5\uff0c\u4e0d\u4f5c\u4e3a\u4efb\u4f55\u5bf9\u6bd4\u6761\u4ef6 date_visited: str = field(hash=False, compare=False) def find_potential_customers_v4(): return set(VisitRecordDC(**r) for r in users_visited_phuket) - \\ #\u6c42\u5dee\u96c6 set(VisitRecordDC(**r) for r in users_visited_nz)","title":"dataclass"},{"location":"python/skill/#format","text":"class Student: def __init__(self, name, age): self.name = name self.age = age def __format__(self, format_spec): if format_spec == 'long': return f'{self.name} is {self.age} years old.' elif format_spec == 'simple': return f'{self.name}({self.age})' raise ValueError('invalid format spec') vllbc = Student('vllbc', '18') print(f'{vllbc:simple}') print(f'{vllbc:long}')","title":"\u81ea\u5b9a\u4e49format"},{"location":"python/skill/#_17","text":"import collections from abc import ABC, abstractmethod from typing import List customer = collections.namedtuple('customer', ['name', 'points']) class Goods(): def __init__(self, name: str, quantity: float, price: float) -> None: self.name = name self.quantity = quantity self.price = price def total(self) -> float: return self.quantity * self.price class Order(): def __init__(self, customer: customer, cart: List[Goods], prom=None) -> None: self.customer = customer self.cart = cart self.prom = prom def total(self): if not hasattr(self, '__total'): self.__total = sum(i.total() for i in self.cart) return self.__total def due(self): if self.prom is None: discount = 0 else: discount = self.prom.discount(self) return self.total() - discount def __repr__(self) -> str: return f'<Order total: {self.total():.2f} due: {self.due():.2f}>' class Prom(ABC): # \u62bd\u8c61\u7c7b @abstractmethod def discount(self,order) -> float: '''discount''' class discount1(Prom): def discount(self,order) -> float: return order.total() * 0.05 if order.customer.points >= 10000 else 0 john = customer(name='vllbc', points=100000) carts = [Goods(name='apple', quantity=5, price=10), Goods( name='banana', quantity=8, price=5), Goods(name='peach', quantity=4, price=8)] order = Order(customer=john, cart=carts,prom=discount1())","title":"\u62bd\u8c61\u7c7b\u5b9e\u8df5"},{"location":"python/skill/#accumulate","text":"import itertools test_list = [i for i in range(1, 11)] for i in itertools.accumulate(test_list): print(i, end=\",\") # 1,3,6,10,15,21,28,36,45,55, print() for i in itertools.accumulate(test_list, lambda x, y: x * y): print(i, end=',') # 1,2,6,24,120,720,5040,40320,362880,3628800,","title":"accumulate"},{"location":"python/skill/#_18","text":"from functools import wraps import asyncio def decorator(func): @wraps(func) async def hello(*args, **kwargs): await asyncio.sleep(2) return await func(*args,**kwargs) return hello @decorator async def test(): print(\"hello\") asyncio.run(test())","title":"\u5f02\u6b65\u88c5\u9970\u5668"},{"location":"python/skill/#bisect","text":"import bisect import time # BREAKPOINTS \u5fc5\u987b\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\uff0c\u4e0d\u7136\u65e0\u6cd5\u8fdb\u884c\u4e8c\u5206\u67e5\u627e BREAKPOINTS = (1, 60, 3600, 3600 * 24) TMPLS = ( # unit, template (1, \"less than 1 second ago\"), (1, \"{units} seconds ago\"), (60, \"{units} minutes ago\"), (3600, \"{units} hours ago\"), (3600 * 24, \"{units} days ago\"), ) def from_now(ts): \"\"\"\u63a5\u6536\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4\u6233\uff0c\u8fd4\u56de\u8ddd\u79bb\u5f53\u524d\u65f6\u95f4\u7684\u76f8\u5bf9\u65f6\u95f4\u6587\u5b57\u63cf\u8ff0 \"\"\" seconds_delta = int(time.time() - ts) unit, tmpl = TMPLS[bisect.bisect(BREAKPOINTS, seconds_delta)] # bisect\u7c7b\u4f3c\u4e8eindex\u65b9\u6cd5\uff0c\u8981\u662f\u4e0d\u5b58\u5728\u4f1a\u9009\u62e9\u6570\u503c\u6700\u63a5\u8fd1\u7684\u7d22\u5f15 return tmpl.format(units=seconds_delta // unit)","title":"bisect"},{"location":"python/skill/#contextlib","text":"from contextlib import contextmanager,ContextDecorator # contextmanager\u53ef\u4ee5\u628a\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u53bb\u5b9e\u73b0\u4e00\u4e2a\u5b9a\u4e49\u4e86__enter__\u548c__exit__\u65b9\u6cd5\u7684\u7c7b @contextmanager def open_file(filename, methods=\"r\"): print(f\"\u6253\u5f00\u4e86\u6587\u4ef6{filename}\") res_file = open(filename, mode=methods) # __enter__\u65b9\u6cd5 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b try: yield res_file # \u76f8\u5f53\u4e8e\u5728__enter__\u65b9\u6cd5\u91cc\u9762\u8fd4\u56deself yield\u540e\u9762\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4e0d\u7528as\u4e86 except Exception as e: print(\"\u6709\u9519\u8bef\u53d1\u751f\", e) # __exit__\u65b9\u6cd5\u91cc\u7684\u9519\u8bef\u5904\u7406 finally: res_file.close() # __exit__ with open_file(\"testvim.txt\") as fp: print(fp)","title":"contextlib"},{"location":"python/skill/#_19","text":"from functools import partial def digits_(file,block_size=1024*8): # \u5206\u5757\u8bfb\u53d6 _read = partial(file.read,block_size) # \u4f7f\u7528partial,\u4e5f\u53ef\u4ee5\u4f7f\u7528lambda:file.read(block_size) for line in iter(_read,\"\"): # \u5f53\u8bfb\u53d6\u5b8c\u6bd5\u65f6\u9000\u51fa for s in line: if s.isdigit(): yield s # \u4f7f\u7528yield def count_digits(fname): \"\"\"\u8ba1\u7b97\u6587\u4ef6\u91cc\u5305\u542b\u591a\u5c11\u4e2a\u6570\u5b57\u5b57\u7b26\"\"\" count = 0 with open(fname) as file: for _ in digits_(file=file): count+=1 return count","title":"\u8bfb\u53d6\u5927\u6587\u4ef6"},{"location":"python/skill/#__exit____enter__","text":"# def __enter__(self): # \u8be5\u65b9\u6cd5\u5c06\u5728\u8fdb\u5165\u4e0a\u4e0b\u6587\u65f6\u8c03\u7528 # return self # def __exit__(self, exc_type, exc_val, exc_tb): # \u8be5\u65b9\u6cd5\u5c06\u5728\u9000\u51fa\u4e0a\u4e0b\u6587\u65f6\u8c03\u7528 # exc_type, exc_val, exc_tb \u5206\u522b\u8868\u793a\u8be5\u4e0a\u4e0b\u6587\u5185\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u578b\u3001\u5f02\u5e38\u503c\u3001\u9519\u8bef\u6808 # __enter__()\uff1a\u4e3b\u8981\u6267\u884c\u4e00\u4e9b\u73af\u5883\u51c6\u5907\u5de5\u4f5c\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u8d44\u6e90\u5bf9\u8c61\u3002\u5982\u679c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668open(\"test.txt\")\u7684__enter__()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\u3002 # __exit__()\uff1a\u5b8c\u6574\u5f62\u5f0f\u4e3a__exit__(type, value, traceback),\u8fd9\u4e09\u4e2a\u53c2\u6570\u548c\u8c03\u7528sys.exec_info()\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e00\u6837\u7684\uff0c\u5206\u522b\u4e3a\u5f02\u5e38\u7c7b\u578b\u3001\u5f02\u5e38\u4fe1\u606f\u548c\u5806\u6808\u3002\u5982\u679c*\u6267\u884c\u4f53\u8bed\u53e5*\u6ca1\u6709\u5f15\u53d1\u5f02\u5e38\uff0c\u5219\u8fd9\u4e09\u4e2a\u53c2\u6570\u5747\u88ab\u8bbe\u4e3aNone\u3002\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u4e0a\u4e0b\u6587\u7684\u5f02\u5e38\u4fe1\u606f\u3002__exit__()\u65b9\u6cd5\u8fd4\u56deTrue\u6216False,\u5206\u522b\u6307\u793a\u88ab\u5f15\u53d1\u7684\u5f02\u5e38\u6709\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u5982\u679c\u8fd4\u56deFalse\uff0c\u5f15\u53d1\u7684\u5f02\u5e38\u5c06\u4f1a\u88ab\u4f20\u9012\u51fa\u4e0a\u4e0b\u6587\u3002\u5982\u679c__exit__()\u51fd\u6570\u5185\u90e8\u5f15\u53d1\u4e86\u5f02\u5e38\uff0c\u5219\u4f1a\u8986\u76d6\u6389\u6267\u884c\u4f53\u7684\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u3002\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\uff0c\u53ea\u9700\u8981\u8fd4\u56deFalse\uff0cwith\u8bed\u53e5\u4f1a\u68c0\u6d4b__exit__()\u8fd4\u56deFalse\u6765\u5904\u7406\u5f02\u5e38\u3002","title":"__exit__\u3001__enter__"},{"location":"python/skill/#enum","text":"from enum import IntEnum class Test(IntEnum): X = 2 Y = 1 print(2 == Test.X)","title":"enum"},{"location":"python/skill/#pydantic","text":"from pydantic import BaseModel, conint, ValidationError from typing import ( List, Union, Optional, Dict ) class Test(BaseModel): name: Optional[str] sex: Union[str, List[str]] d: Dict[str, int] id: conint(ge=1,le=10) try: test = Test(name='wlb', sex='male', d={'dict':1}, id=1) print(test.dict(), test.__annotations__) # {'name': 'wlb', 'sex': 'male', 'd': {'dict': 1}, 'id': 1} {'name': typing.Union[str, NoneType], 'sex': typing.Union[str, typing.List[str]], 'd': typing.Dict[str, int], 'id': <class '__main__.ConstrainedIntValue'>} except ValidationError: print(\"\u6570\u636e\u9519\u8bef\")","title":"pydantic\u6570\u636e\u9a8c\u8bc1"},{"location":"python/skill/#islice","text":"from itertools import islice def test(): t = 0 while True: yield t t += 1 for i in islice(test(), 10, 21, 2): print(i)","title":"islice"},{"location":"python/skill/#__iter____next__","text":"class Range7: # \u53ef\u8fed\u4ee3\u7c7b\u578b \u53ea\u9700\u8981\u5b9e\u73b0__iter__\u5373\u53ef def __init__(self,start,end) -> None: self.start = start self.end = end def __iter__(self): return Range7iterator(self) class Range7iterator: #\u8fd9\u662f\u8fed\u4ee3\u5668,\u4e00\u822c\u7684\u8fed\u4ee3\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21 def __init__(self,rangeobj) -> None: self.rangeobj = rangeobj self.cur = rangeobj.start def __iter__(self): return self def __next__(self): while True: if self.cur > self.rangeobj.end: raise StopIteration if self.is_7(self.cur): res = self.cur self.cur += 1 return res self.cur += 1 def is_7(self,num): if num == 0: return False return num%7==0 or \"7\" in str(num) for i in Range7(1,100): print(i,end=\" \") #\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0d\u4e00\u5b9a\u662f\u8fed\u4ee3\u5668\uff0c\u4f46\u8fed\u4ee3\u5668\u4e00\u5b9a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 # \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f7f\u7528 iter() \u4f1a\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u5219\u4f1a\u8fd4\u56de\u5b83\u81ea\u8eab # \u6bcf\u4e2a\u8fed\u4ee3\u5668\u7684\u88ab\u8fed\u4ee3\u8fc7\u7a0b\u662f\u4e00\u6b21\u6027\u7684\uff0c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5219\u4e0d\u4e00\u5b9a # \u53ef\u8fed\u4ee3\u5bf9\u8c61\u53ea\u9700\u8981\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u800c\u8fed\u4ee3\u5668\u8981\u989d\u5916\u5b9e\u73b0 __next__ \u65b9\u6cd5","title":"__iter__\u3001__next__"},{"location":"python/skill/#_20","text":"prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } print(max(zip(prices.values(),prices.keys()))) print(max(prices.items(),key=lambda x:x[1])) print(max(prices,key=lambda k:prices[k]))","title":"\u6c42\u5b57\u5178\u7684\u6700\u5927\u503c"},{"location":"python/skill/#_21","text":"funcs = [] res = [] for x in range(7): def func(x=x): # \u53bb\u6389x=x\u5219\u51fa\u73b0[6,6,6,6,6,6] \u5728\u5faa\u73af\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6, \u5982\u679c\u8be5\u51fd\u6570\u5728\u5176\u4e3b\u4f53\u4e2d\u4f7f\u7528\u4e86\u5faa\u73af\u53d8\u91cf, \u5219\u95ed\u5305\u51fd\u6570\u5c06\u4e0e\u5faa\u73af\u53d8\u91cf\u7ed1\u5b9a, \u800c\u4e0d\u662f\u5b83\u7684\u503c. \u56e0\u6b64, \u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u4f7f\u7528\u6700\u540e\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684. return x funcs.append(func) res.append(func()) func_res = [f() for f in funcs] print(func_res) def create_mult(): res = [] for i in range(5): def func(x, i=i): # \u53bb\u6389i=i\u5219\u5168\u8f93\u51fa8\uff0c\u539f\u56e0\u548c\u4e0a\u9762\u4e00\u6837 return x * i res.append(func) return res for cr in create_mult(): print(cr(2))","title":"\u6ce8\u610f\u5faa\u73af\u53d8\u91cf"},{"location":"python/skill/#_22","text":"\u4fee\u6539\u524d import decimal class CreateAccountError(Exception): \"\"\"Unable to create a account error\"\"\" class Account: \"\"\"\u4e00\u4e2a\u865a\u62df\u7684\u94f6\u884c\u8d26\u53f7\"\"\" def __init__(self, username, balance): self.username = username self.balance = balance @classmethod def from_string(cls, s): \"\"\"\u4ece\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u4e00\u4e2a\u8d26\u53f7\"\"\" try: username, balance = s.split() balance = decimal.Decimal(float(balance)) except ValueError: raise CreateAccountError('input must follow pattern \"{ACCOUNT_NAME} {BALANCE}\"') if balance < 0: raise CreateAccountError('balance can not be negative') return cls(username=username, balance=balance) def caculate_total_balance(accounts_data): \"\"\"\u8ba1\u7b97\u6240\u6709\u8d26\u53f7\u7684\u603b\u4f59\u989d \"\"\" result = 0 for account_string in accounts_data: try: user = Account.from_string(account_string) except CreateAccountError: pass else: result += user.balance return result accounts_data = [ 'piglei 96.5', 'cotton 21', 'invalid_data', 'roland $invalid_balance', 'alfred -3', ] print(caculate_total_balance(accounts_data))","title":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f"},{"location":"python/skill/#_23","text":"\u989d\u5916\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793aNone","title":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f\u7b80\u4ecb"},{"location":"python/skill/#_24","text":"\u5b83\u53ef\u4ee5\u52a0\u5f3a\u7cfb\u7edf\u7684\u7a33\u56fa\u6027\uff0c\u80fd\u6709\u6709\u6548\u5730\u9632\u6b62\u7a7a\u6307\u9488\u62a5\u9519\u5bf9\u6574\u4e2a\u7cfb\u7edf\u7684\u5f71\u54cd\uff0c\u4f7f\u7cfb\u7edf\u66f4\u52a0\u7a33\u5b9a\u3002 \u5b83\u80fd\u591f\u5b9e\u73b0\u5bf9\u7a7a\u5bf9\u8c61\u60c5\u51b5\u7684\u5b9a\u5236\u5316\u7684\u63a7\u5236\uff0c\u80fd\u591f\u638c\u63e1\u5904\u7406\u7a7a\u5bf9\u8c61\u7684\u4e3b\u52a8\u6743\u3002 \u5b83\u5e76\u4e0d\u4f9d\u9760Client\u6765\u4fdd\u8bc1\u6574\u4e2a\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002 \u5b83\u901a\u8fc7isNone\u5bf9==None\u7684\u66ff\u6362\uff0c\u663e\u5f97\u66f4\u52a0\u4f18\u96c5\uff0c\u66f4\u52a0\u6613\u61c2\u3002 import decimal class Account: \"\"\"\u4e00\u4e2a\u865a\u62df\u7684\u94f6\u884c\u8d26\u53f7\"\"\" def __init__(self, username, balance): self.username = username self.balance = balance @classmethod def from_string(cls, s): \"\"\"\u4ece\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u4e00\u4e2a\u8d26\u53f7\"\"\" try: username, balance = s.split() balance = decimal.Decimal(float(balance)) except ValueError: # raise CreateAccountError('input must follow pattern \"{ACCOUNT_NAME} {BALANCE}\"') return NullAccount() if balance < 0: return NullAccount() return cls(username=username, balance=balance) def caculate_total_balance(accounts_data): \"\"\"\u8ba1\u7b97\u6240\u6709\u8d26\u53f7\u7684\u603b\u4f59\u989d \"\"\" return sum(Account.from_string(s).balance for s in accounts_data) class NullAccount: # \u8981\u8fd4\u56de\u7684\u7a7a\u5bf9\u8c61 username = \"\" # \u5f53\u53d1\u751f\u9519\u8bef\u65f6username\u7684\u503c balance = 0 # \u5f53\u53d1\u751f\u9519\u8bef\u65f6balance\u7684\u503c def re_Null(): return NotImplementedError accounts_data = [ 'piglei 96.5', 'cotton 21', 'invalid_data', 'roland $invalid_balance', 'alfred -3', ] print(caculate_total_balance(accounts_data))","title":"\u597d\u5904"},{"location":"python/skill/#pathlib","text":"from pathlib import Path # \u628atxt\u6587\u4ef6\u91cd\u547d\u540d\u4e3acsv\u6587\u4ef6 def unify_ext_with_pathlib(path): for fpath in Path(path).glob(\"*.txt\"): fpath.rename(fpath.with_suffix(\".csv\")) print(Path(\".\") / \"test_pathlib.py\") # Path\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528/\u8fd0\u7b97\u7b26 print(Path(\"testvim.txt\").read_text()) # \u76f4\u63a5\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9","title":"pathlib"},{"location":"python/skill/#_25","text":"def say_hello(name=None): if name: return f\"hello {name}\" return \"hello world\" import unittest from typing import List class sayhellotest(unittest.TestCase): def setUp(self,nums:List[int] = 0): return super().setUp() def tearDown(self): return super().tearDown() def test_sayhello(self): rv = say_hello() self.assertEqual(rv,\"hello world\") def test_to_name(self): rv = say_hello(\"wlb\") self.assertEqual(rv,\"hello wlb\") if __name__ == '__main__': unittest.main()","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"python/skill/#takewhiledropwhile","text":"from itertools import dropwhile,takewhile # \u4f60\u60f3\u904d\u5386\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u5f00\u59cb\u7684\u67d0\u4e9b\u5143\u7d20\u4f60\u5e76\u4e0d\u611f\u5174\u8da3\uff0c\u60f3\u8df3\u8fc7\u5b83\u4eec\uff0c\u7528dropwhile with open('testvim.txt','r') as fp: for i in dropwhile(lambda i:i.startswith(\"#\"),fp): # \u8df3\u8fc7\u524d\u9762#\u53f7\u5f00\u5934\u7684 print(i) with open(\"testvim.txt\",\"r\") as fp: for i in takewhile(lambda i:i.startswith(\"#\"),fp): # \u904d\u5386\u5e26#\u53f7\u5f00\u5934\u7684\uff0c\u9047\u5230\u4e0d\u662f#\u53f7\u5f00\u5934\u7684\u5c31\u9000\u51fa\u5faa\u73af\uff0c\u53ef\u4ee5\u5f53\u505abreak\u4f7f\u7528 # \u76f8\u5f53\u4e8e if not i.startwith(\"#\"): break print(i)","title":"takewhile\u548cdropwhile"},{"location":"python/skill/#_26","text":"import random import wrapt # \u4e3a\u7b2c\u4e09\u65b9\u5e93 def provide_number(min_num, max_num): @wrapt.decorator def wrapper(wrapped, instance, args, kwargs): # \u53c2\u6570\u542b\u4e49\uff1a # # - wrapped\uff1a\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6216\u7c7b\u65b9\u6cd5 # - instance\uff1a # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a\u666e\u901a\u7c7b\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a\u7c7b\u5b9e\u4f8b # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a classmethod \u7c7b\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a\u7c7b # - \u5982\u679c\u88ab\u88c5\u9970\u8005\u4e3a\u7c7b/\u51fd\u6570/\u9759\u6001\u65b9\u6cd5\uff0c\u8be5\u503c\u4e3a None # # - args\uff1a\u8c03\u7528\u65f6\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u6ce8\u610f\u6ca1\u6709 * \u7b26\u53f7\uff09 # - kwargs\uff1a\u8c03\u7528\u65f6\u7684\u5173\u952e\u5b57\u53c2\u6570\uff08\u6ce8\u610f\u6ca1\u6709 ** \u7b26\u53f7\uff09 # num = random.randint(min_num, max_num) # \u65e0\u9700\u5173\u6ce8 wrapped \u662f\u7c7b\u65b9\u6cd5\u6216\u666e\u901a\u51fd\u6570\uff0c\u76f4\u63a5\u5728\u5934\u90e8\u8ffd\u52a0\u53c2\u6570 args = (num,) + args return wrapped(*args, **kwargs) return wrapper @provide_number(1, 100) def print_random_number(num): print(num) class Foo: @provide_number(1, 100) def print_random_number(self, num): print(num) Foo().print_random_number() print_random_number() # \u4f7f\u7528 wrapt \u6a21\u5757\u7f16\u5199\u7684\u88c5\u9970\u5668\uff0c\u76f8\u6bd4\u539f\u6765\u62e5\u6709\u4e0b\u9762\u8fd9\u4e9b\u4f18\u52bf\uff1a # \u5d4c\u5957\u5c42\u7ea7\u5c11\uff1a\u4f7f\u7528 @wrapt.decorator \u53ef\u4ee5\u5c06\u4e24\u5c42\u5d4c\u5957\u51cf\u5c11\u4e3a\u4e00\u5c42 # \u66f4\u7b80\u5355\uff1a\u5904\u7406\u4f4d\u7f6e\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u5ffd\u7565\u7c7b\u5b9e\u4f8b\u7b49\u7279\u6b8a\u60c5\u51b5 # \u66f4\u7075\u6d3b\uff1a\u9488\u5bf9 instance \u503c\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\u540e\uff0c\u66f4\u5bb9\u6613\u8ba9\u88c5\u9970\u5668\u53d8\u5f97\u901a\u7528","title":"\u88c5\u9970\u5668\u53ef\u4ee5\u88c5\u9970\u65b9\u6cd5"},{"location":"python/skill/#__getattr____setattr__","text":"class Chain(object): def __init__(self, path=''): self._path = path def __getattr__(self, path): return Chain('%s/%s' % (self._path, path)) def __str__(self): return self._path def users(self,name): return Chain(f\"{self._path}/users/{name}\") __repr__ = __str__ chain = Chain(\"vllbc\") print(chain.x.x.x.x.x) # out: vllbc/x/x/x/x/x","title":"__getattr__\u3001__setattr__"},{"location":"python/skill/#__getitem__","text":"","title":"__getitem__"},{"location":"python/skill/#_27","text":"''' \u5143\u7c7b\u5c31\u662f\u63a7\u5236\u7c7b\u7684\u521b\u5efa\u7684\u7c7b ''' class ModelMetaclass(type): def __new__(cls, name, bases, attrs): if name == 'Model': return type.__new__(cls, name, bases, attrs) print(f\"found model {name}\") maps = dict() for k, v in attrs.items(): if isinstance(v, Field): print(f\"Found mapping {k} ==> {v}\") maps[k] = v for k, v in maps.items(): attrs.pop(k) attrs['__mappings__'] = maps attrs['__table__'] = name return type.__new__(cls, name, bases, attrs) class Field(object): def __init__(self, name, column_type): self.name = name self.column_type = column_type def __str__(self): return '<%s:%s>' % (self.__class__.__name__, self.name) class StringField(Field): def __init__(self, name, column_type='TXT'): super().__init__(name, column_type) class IntegerField(Field): def __init__(self, name, column_type='INT'): super().__init__(name, column_type) class Model(dict, metaclass=ModelMetaclass): def __init__(self, **kw): super(Model, self).__init__(**kw) def __getattr__(self, key): try: return self[key] except KeyError: raise AttributeError(r\"'Model' object has no attribute '%s'\" % key) def __setattr__(self, key, value): self[key] = value def save(self): fields = [] params = [] args = [] for k, v in self.__mappings__.items(): fields.append(k) params.append('?') args.append(getattr(self, k, None)) sql = 'insert into %s (%s) values (%s)' % ( self.__table__, ','.join(fields), ','.join(params)) print('SQL: %s' % sql) print('ARGS: %s' % str(args)) class User(Model): # \u5b9a\u4e49\u7c7b\u7684\u5c5e\u6027\u5230\u5217\u7684\u6620\u5c04\uff1a id = IntegerField('id') name = StringField('username') email = StringField('email') password = StringField('password') # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff1a u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd') # \u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff1a u.save()","title":"\u5143\u7c7b"},{"location":"python/thread/","text":"import threading import time \u7b80\u5355\u7684\u521b\u5efa def run(n): print(\"task\", n) time.sleep(1) print('2s') time.sleep(1) print('1s') time.sleep(1) print('0s') time.sleep(1) if __name__ == '__main__': t1 = threading.Thread(target=run, args=(\"t1\",)) t2 = threading.Thread(target=run, args=(\"t2\",)) t1.start() t2.start() \u901a\u8fc7\u7c7b\u521b\u5efa class MyThread(threading.Thread): def __init__(self, n): super(MyThread, self).__init__() # \u91cd\u6784run\u51fd\u6570\u5fc5\u987b\u8981\u5199 self.n = n def run(self): print(\"task\", self.n) time.sleep(1) print('2s') time.sleep(1) print('1s') time.sleep(1) print('0s') time.sleep(1) if __name__ == \"__main__\": t1 = MyThread(\"t1\") t2 = MyThread(\"t2\") t1.start() t2.start() \u5bf9\u6bd4\u6ca1\u6709join()\u548cjoin()\u7684\u533a\u522b def run(n): print(\"task\", n) time.sleep(1) #\u6b64\u65f6\u5b50\u7ebf\u7a0b\u505c1s print('3') time.sleep(1) print('2') time.sleep(1) print('1') if __name__ == '__main__': t = threading.Thread(target=run, args=(\"t1\",)) t.setDaemon(True) #\u628a\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u5fc5\u987b\u5728start()\u4e4b\u524d\u8bbe\u7f6e t.start() print(\"end\") def run(n): print(\"task\", n) time.sleep(1) #\u6b64\u65f6\u5b50\u7ebf\u7a0b\u505c1s print('3') time.sleep(1) print('2') time.sleep(1) print('1') if __name__ == '__main__': t = threading.Thread(target=run, args=(\"t1\",)) t.setDaemon(True) #\u628a\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u5fc5\u987b\u5728start()\u4e4b\u524d\u8bbe\u7f6e t.start() t.join() # \u8bbe\u7f6e\u4e3b\u7ebf\u7a0b\u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f print(\"end\") \u9501\u7684\u5e94\u7528 def run(n, semaphore): semaphore.acquire() #\u52a0\u9501 time.sleep(1) print(\"run the thread:%s\\n\" % n) semaphore.release() #\u91ca\u653e if __name__ == '__main__': num = 0 semaphore = threading.BoundedSemaphore(5) # \u6700\u591a\u5141\u8bb85\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c for i in range(22): t = threading.Thread(target=run, args=(\"t-%s\" % i, semaphore)) t.start() while threading.active_count() != 1: pass # print threading.active_count() else: print('-----all threads done-----') \u4e8b\u4ef6\u7c7b event = threading.Event() def lighter(): count = 0 event.set() #\u521d\u59cb\u503c\u4e3a\u7eff\u706f while True: if 5 < count <=10 : event.clear() # \u7ea2\u706f\uff0c\u6e05\u9664\u6807\u5fd7\u4f4d print(\"\\33[41;1mred light is on...\\033[0m\") elif count > 10: event.set() # \u7eff\u706f\uff0c\u8bbe\u7f6e\u6807\u5fd7\u4f4d count = 0 else: print(\"\\33[42;1mgreen light is on...\\033[0m\") time.sleep(1) count += 1 def car(name): while True: if event.is_set(): #\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86\u6807\u5fd7\u4f4d\uff08\u7eff\u706f\uff09 print(\"[%s] running...\"%name) time.sleep(1) else: print(\"[%s] sees red light,waiting...\"%name) event.wait()#\u5982\u679c\u53d8\u4e3a\u7eff\u706f print(\"[%s] green light is on,start going...\"%name) light = threading.Thread(target=lighter,) light.start() car = threading.Thread(target=car,args=(\"MINI\",)) car.start() queue\u961f\u5217 import threading import queue,time q=queue.Queue(maxsize=10) def Producer(name): count=1 while True: q.put(\"\u9aa8\u5934 %s\"%count) print(\"{}\u751f\u4ea7\u4e86\u9aa8\u5934\".format(name),count) count+=1 time.sleep(1) def Consumer(name): while True: print(\"[%s] \u53d6\u5230 [%s] \u5e76\u4e14\u5403\u4e86\u5b83\u3002\u3002\u3002\"%(name,q.get())) time.sleep(1) p=threading.Thread(target=Producer,args=('wlb',)) c=threading.Thread(target=Consumer,args=(\"dog\",)) c1=threading.Thread(target=Consumer,args=(\"cat\",)) p.start() c.start() c1.start() \u4e92\u65a5\u9501 \u7531\u4e8e\u7ebf\u7a0b\u4e4b\u95f4\u662f\u8fdb\u884c\u968f\u673a\u8c03\u5ea6\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u53ea\u6267\u884cn\u6761\u6267\u884c\u4e4b\u540e\uff0c\u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u4fee\u6539\u540c\u4e00\u6761\u6570\u636e\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u810f\u6570\u636e\uff0c\u6240\u4ee5\uff0c\u51fa\u73b0\u4e86\u7ebf\u7a0b\u9501\uff0c\u5373\u540c\u4e00\u65f6\u523b\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c\u3002\u7ebf\u7a0b\u9501\u7528\u4e8e\u9501\u5b9a\u8d44\u6e90\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u9501, \u50cf\u4e0b\u9762\u7684\u4ee3\u7801, \u5f53\u4f60\u9700\u8981\u72ec\u5360\u67d0\u4e00\u8d44\u6e90\u65f6\uff0c\u4efb\u4f55\u4e00\u4e2a\u9501\u90fd\u53ef\u4ee5\u9501\u8fd9\u4e2a\u8d44\u6e90\uff0c\u5c31\u597d\u6bd4\u4f60\u7528\u4e0d\u540c\u7684\u9501\u90fd\u53ef\u4ee5\u628a\u76f8\u540c\u7684\u4e00\u4e2a\u95e8\u9501\u4f4f\u662f\u4e00\u4e2a\u9053\u7406\u3002 \u7531\u4e8e\u7ebf\u7a0b\u4e4b\u95f4\u662f\u8fdb\u884c\u968f\u673a\u8c03\u5ea6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u5f88\u597d\u5730\u4fdd\u62a4\u8be5\u5bf9\u8c61\uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u7ed3\u679c\u7684\u4e0d\u53ef\u9884\u671f\uff0c\u6211\u4eec\u4e5f\u79f0\u6b64\u4e3a\u201c\u7ebf\u7a0b\u4e0d\u5b89\u5168\u201d\u3002 \u4e3a\u4e86\u65b9\u5f0f\u4e0a\u9762\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u5c31\u51fa\u73b0\u4e86\u4e92\u65a5\u9501(Lock) from threading import Thread,Lock import os,time def work(): global n lock.acquire() temp=n time.sleep(0.1) n=temp-1 lock.release() if __name__ == '__main__': lock=Lock() n=100 l=[] for i in range(100): p=Thread(target=work) l.append(p) p.start() for p in l: p.join() \u4fe1\u53f7\u91cf \u4e92\u65a5\u9501\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u6570\u636e\uff0c\u800cSemaphore\u662f\u540c\u65f6\u5141\u8bb8\u4e00\u5b9a\u6570\u91cf\u7684\u7ebf\u7a0b\u66f4\u6539\u6570\u636e \uff0c\u6bd4\u5982\u5395\u6240\u67093\u4e2a\u5751\uff0c\u90a3\u6700\u591a\u53ea\u5141\u8bb83\u4e2a\u4eba\u4e0a\u5395\u6240\uff0c\u540e\u9762\u7684\u4eba\u53ea\u80fd\u7b49\u91cc\u9762\u6709\u4eba\u51fa\u6765\u4e86\u624d\u80fd\u518d\u8fdb\u53bb\u3002 import threading import time def run(n, semaphore): semaphore.acquire() #\u52a0\u9501 time.sleep(1) print(\"run the thread:%s\\n\" % n) semaphore.release() #\u91ca\u653e if __name__ == '__main__': num = 0 semaphore = threading.BoundedSemaphore(5) # \u6700\u591a\u5141\u8bb85\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c for i in range(22): t = threading.Thread(target=run, args=(\"t-%s\" % i, semaphore)) t.start() while threading.active_count() != 1: pass # print threading.active_count() else: print('-----all threads done-----') GIL\uff08Global Interpreter Lock\uff09\u5168\u5c40\u89e3\u91ca\u5668\u9501 \u5728\u975epython\u73af\u5883\u4e2d\uff0c\u5355\u6838\u60c5\u51b5\u4e0b\uff0c\u540c\u65f6\u53ea\u80fd\u6709\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u3002\u591a\u6838\u65f6\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u3002\u4f46\u662f\u5728python\u4e2d\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u6838\uff0c\u540c\u65f6\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u3002\u7a76\u5176\u539f\u56e0\uff0c\u8fd9\u5c31\u662f\u7531\u4e8eGIL\u7684\u5b58\u5728\u5bfc\u81f4\u7684\u3002 GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock(\u5168\u5c40\u89e3\u91ca\u5668\u9501)\uff0c\u6765\u6e90\u662fpython\u8bbe\u8ba1\u4e4b\u521d\u7684\u8003\u8651\uff0c\u4e3a\u4e86\u6570\u636e\u5b89\u5168\u6240\u505a\u7684\u51b3\u5b9a\u3002\u67d0\u4e2a\u7ebf\u7a0b\u60f3\u8981\u6267\u884c\uff0c\u5fc5\u987b\u5148\u62ff\u5230GIL\uff0c\u6211\u4eec\u53ef\u4ee5\u628aGIL\u770b\u4f5c\u662f\u201c\u901a\u884c\u8bc1\u201d\uff0c\u5e76\u4e14\u5728\u4e00\u4e2apython\u8fdb\u7a0b\u4e2d\uff0cGIL\u53ea\u6709\u4e00\u4e2a\u3002\u62ff\u4e0d\u5230\u901a\u884c\u8bc1\u7684\u7ebf\u7a0b\uff0c\u5c31\u4e0d\u5141\u8bb8\u8fdb\u5165CPU\u6267\u884c\u3002GIL\u53ea\u5728cpython\u4e2d\u624d\u6709\uff0c\u56e0\u4e3acpython\u8c03\u7528\u7684\u662fc\u8bed\u8a00\u7684\u539f\u751f\u7ebf\u7a0b\uff0c\u6240\u4ee5\u4ed6\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5ccpu\uff0c\u53ea\u80fd\u5229\u7528GIL\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u6570\u636e\u3002\u800c\u5728pypy\u548cjpython\u4e2d\u662f\u6ca1\u6709GIL\u7684\u3002 Python\u591a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u8fc7\u7a0b\uff1a python\u5728\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u8c03\u7528\u7684\u662fc\u8bed\u8a00\u7684\u539f\u751f\u7ebf\u7a0b\u3002 \u62ff\u5230\u516c\u5171\u6570\u636e \u7533\u8bf7gil python\u89e3\u91ca\u5668\u8c03\u7528os\u539f\u751f\u7ebf\u7a0b os\u64cd\u4f5ccpu\u6267\u884c\u8fd0\u7b97 \u5f53\u8be5\u7ebf\u7a0b\u6267\u884c\u65f6\u95f4\u5230\u540e\uff0c\u65e0\u8bba\u8fd0\u7b97\u662f\u5426\u5df2\u7ecf\u6267\u884c\u5b8c\uff0cgil\u90fd\u88ab\u8981\u6c42\u91ca\u653e \u8fdb\u800c\u7531\u5176\u4ed6\u8fdb\u7a0b\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b \u7b49\u5176\u4ed6\u8fdb\u7a0b\u6267\u884c\u5b8c\u540e\uff0c\u53c8\u4f1a\u5207\u6362\u5230\u4e4b\u524d\u7684\u7ebf\u7a0b\uff08\u4ece\u4ed6\u8bb0\u5f55\u7684\u4e0a\u4e0b\u6587\u7ee7\u7eed\u6267\u884c\uff09\uff0c\u6574\u4e2a\u8fc7\u7a0b\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u81ea\u5df1\u7684\u8fd0\u7b97\uff0c\u5f53\u6267\u884c\u65f6\u95f4\u5230\u5c31\u8fdb\u884c\u5207\u6362\uff08context switch\uff09\u3002","title":"\u591a\u7ebf\u7a0b"},{"location":"python/thread/#_1","text":"def run(n): print(\"task\", n) time.sleep(1) print('2s') time.sleep(1) print('1s') time.sleep(1) print('0s') time.sleep(1) if __name__ == '__main__': t1 = threading.Thread(target=run, args=(\"t1\",)) t2 = threading.Thread(target=run, args=(\"t2\",)) t1.start() t2.start()","title":"\u7b80\u5355\u7684\u521b\u5efa"},{"location":"python/thread/#_2","text":"class MyThread(threading.Thread): def __init__(self, n): super(MyThread, self).__init__() # \u91cd\u6784run\u51fd\u6570\u5fc5\u987b\u8981\u5199 self.n = n def run(self): print(\"task\", self.n) time.sleep(1) print('2s') time.sleep(1) print('1s') time.sleep(1) print('0s') time.sleep(1) if __name__ == \"__main__\": t1 = MyThread(\"t1\") t2 = MyThread(\"t2\") t1.start() t2.start()","title":"\u901a\u8fc7\u7c7b\u521b\u5efa"},{"location":"python/thread/#joinjoin","text":"def run(n): print(\"task\", n) time.sleep(1) #\u6b64\u65f6\u5b50\u7ebf\u7a0b\u505c1s print('3') time.sleep(1) print('2') time.sleep(1) print('1') if __name__ == '__main__': t = threading.Thread(target=run, args=(\"t1\",)) t.setDaemon(True) #\u628a\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u5fc5\u987b\u5728start()\u4e4b\u524d\u8bbe\u7f6e t.start() print(\"end\") def run(n): print(\"task\", n) time.sleep(1) #\u6b64\u65f6\u5b50\u7ebf\u7a0b\u505c1s print('3') time.sleep(1) print('2') time.sleep(1) print('1') if __name__ == '__main__': t = threading.Thread(target=run, args=(\"t1\",)) t.setDaemon(True) #\u628a\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u5fc5\u987b\u5728start()\u4e4b\u524d\u8bbe\u7f6e t.start() t.join() # \u8bbe\u7f6e\u4e3b\u7ebf\u7a0b\u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f print(\"end\")","title":"\u5bf9\u6bd4\u6ca1\u6709join()\u548cjoin()\u7684\u533a\u522b"},{"location":"python/thread/#_3","text":"def run(n, semaphore): semaphore.acquire() #\u52a0\u9501 time.sleep(1) print(\"run the thread:%s\\n\" % n) semaphore.release() #\u91ca\u653e if __name__ == '__main__': num = 0 semaphore = threading.BoundedSemaphore(5) # \u6700\u591a\u5141\u8bb85\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c for i in range(22): t = threading.Thread(target=run, args=(\"t-%s\" % i, semaphore)) t.start() while threading.active_count() != 1: pass # print threading.active_count() else: print('-----all threads done-----')","title":"\u9501\u7684\u5e94\u7528"},{"location":"python/thread/#_4","text":"event = threading.Event() def lighter(): count = 0 event.set() #\u521d\u59cb\u503c\u4e3a\u7eff\u706f while True: if 5 < count <=10 : event.clear() # \u7ea2\u706f\uff0c\u6e05\u9664\u6807\u5fd7\u4f4d print(\"\\33[41;1mred light is on...\\033[0m\") elif count > 10: event.set() # \u7eff\u706f\uff0c\u8bbe\u7f6e\u6807\u5fd7\u4f4d count = 0 else: print(\"\\33[42;1mgreen light is on...\\033[0m\") time.sleep(1) count += 1 def car(name): while True: if event.is_set(): #\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86\u6807\u5fd7\u4f4d\uff08\u7eff\u706f\uff09 print(\"[%s] running...\"%name) time.sleep(1) else: print(\"[%s] sees red light,waiting...\"%name) event.wait()#\u5982\u679c\u53d8\u4e3a\u7eff\u706f print(\"[%s] green light is on,start going...\"%name) light = threading.Thread(target=lighter,) light.start() car = threading.Thread(target=car,args=(\"MINI\",)) car.start()","title":"\u4e8b\u4ef6\u7c7b"},{"location":"python/thread/#queue","text":"import threading import queue,time q=queue.Queue(maxsize=10) def Producer(name): count=1 while True: q.put(\"\u9aa8\u5934 %s\"%count) print(\"{}\u751f\u4ea7\u4e86\u9aa8\u5934\".format(name),count) count+=1 time.sleep(1) def Consumer(name): while True: print(\"[%s] \u53d6\u5230 [%s] \u5e76\u4e14\u5403\u4e86\u5b83\u3002\u3002\u3002\"%(name,q.get())) time.sleep(1) p=threading.Thread(target=Producer,args=('wlb',)) c=threading.Thread(target=Consumer,args=(\"dog\",)) c1=threading.Thread(target=Consumer,args=(\"cat\",)) p.start() c.start() c1.start()","title":"queue\u961f\u5217"},{"location":"python/thread/#_5","text":"\u7531\u4e8e\u7ebf\u7a0b\u4e4b\u95f4\u662f\u8fdb\u884c\u968f\u673a\u8c03\u5ea6\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u53ea\u6267\u884cn\u6761\u6267\u884c\u4e4b\u540e\uff0c\u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u4fee\u6539\u540c\u4e00\u6761\u6570\u636e\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u810f\u6570\u636e\uff0c\u6240\u4ee5\uff0c\u51fa\u73b0\u4e86\u7ebf\u7a0b\u9501\uff0c\u5373\u540c\u4e00\u65f6\u523b\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c\u3002\u7ebf\u7a0b\u9501\u7528\u4e8e\u9501\u5b9a\u8d44\u6e90\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u9501, \u50cf\u4e0b\u9762\u7684\u4ee3\u7801, \u5f53\u4f60\u9700\u8981\u72ec\u5360\u67d0\u4e00\u8d44\u6e90\u65f6\uff0c\u4efb\u4f55\u4e00\u4e2a\u9501\u90fd\u53ef\u4ee5\u9501\u8fd9\u4e2a\u8d44\u6e90\uff0c\u5c31\u597d\u6bd4\u4f60\u7528\u4e0d\u540c\u7684\u9501\u90fd\u53ef\u4ee5\u628a\u76f8\u540c\u7684\u4e00\u4e2a\u95e8\u9501\u4f4f\u662f\u4e00\u4e2a\u9053\u7406\u3002 \u7531\u4e8e\u7ebf\u7a0b\u4e4b\u95f4\u662f\u8fdb\u884c\u968f\u673a\u8c03\u5ea6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u5f88\u597d\u5730\u4fdd\u62a4\u8be5\u5bf9\u8c61\uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u7ed3\u679c\u7684\u4e0d\u53ef\u9884\u671f\uff0c\u6211\u4eec\u4e5f\u79f0\u6b64\u4e3a\u201c\u7ebf\u7a0b\u4e0d\u5b89\u5168\u201d\u3002 \u4e3a\u4e86\u65b9\u5f0f\u4e0a\u9762\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u5c31\u51fa\u73b0\u4e86\u4e92\u65a5\u9501(Lock) from threading import Thread,Lock import os,time def work(): global n lock.acquire() temp=n time.sleep(0.1) n=temp-1 lock.release() if __name__ == '__main__': lock=Lock() n=100 l=[] for i in range(100): p=Thread(target=work) l.append(p) p.start() for p in l: p.join()","title":"\u4e92\u65a5\u9501"},{"location":"python/thread/#_6","text":"\u4e92\u65a5\u9501\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u6570\u636e\uff0c\u800cSemaphore\u662f\u540c\u65f6\u5141\u8bb8\u4e00\u5b9a\u6570\u91cf\u7684\u7ebf\u7a0b\u66f4\u6539\u6570\u636e \uff0c\u6bd4\u5982\u5395\u6240\u67093\u4e2a\u5751\uff0c\u90a3\u6700\u591a\u53ea\u5141\u8bb83\u4e2a\u4eba\u4e0a\u5395\u6240\uff0c\u540e\u9762\u7684\u4eba\u53ea\u80fd\u7b49\u91cc\u9762\u6709\u4eba\u51fa\u6765\u4e86\u624d\u80fd\u518d\u8fdb\u53bb\u3002 import threading import time def run(n, semaphore): semaphore.acquire() #\u52a0\u9501 time.sleep(1) print(\"run the thread:%s\\n\" % n) semaphore.release() #\u91ca\u653e if __name__ == '__main__': num = 0 semaphore = threading.BoundedSemaphore(5) # \u6700\u591a\u5141\u8bb85\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c for i in range(22): t = threading.Thread(target=run, args=(\"t-%s\" % i, semaphore)) t.start() while threading.active_count() != 1: pass # print threading.active_count() else: print('-----all threads done-----')","title":"\u4fe1\u53f7\u91cf"},{"location":"python/thread/#gilglobal-interpreter-lock","text":"\u5728\u975epython\u73af\u5883\u4e2d\uff0c\u5355\u6838\u60c5\u51b5\u4e0b\uff0c\u540c\u65f6\u53ea\u80fd\u6709\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u3002\u591a\u6838\u65f6\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u3002\u4f46\u662f\u5728python\u4e2d\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u6838\uff0c\u540c\u65f6\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u3002\u7a76\u5176\u539f\u56e0\uff0c\u8fd9\u5c31\u662f\u7531\u4e8eGIL\u7684\u5b58\u5728\u5bfc\u81f4\u7684\u3002 GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock(\u5168\u5c40\u89e3\u91ca\u5668\u9501)\uff0c\u6765\u6e90\u662fpython\u8bbe\u8ba1\u4e4b\u521d\u7684\u8003\u8651\uff0c\u4e3a\u4e86\u6570\u636e\u5b89\u5168\u6240\u505a\u7684\u51b3\u5b9a\u3002\u67d0\u4e2a\u7ebf\u7a0b\u60f3\u8981\u6267\u884c\uff0c\u5fc5\u987b\u5148\u62ff\u5230GIL\uff0c\u6211\u4eec\u53ef\u4ee5\u628aGIL\u770b\u4f5c\u662f\u201c\u901a\u884c\u8bc1\u201d\uff0c\u5e76\u4e14\u5728\u4e00\u4e2apython\u8fdb\u7a0b\u4e2d\uff0cGIL\u53ea\u6709\u4e00\u4e2a\u3002\u62ff\u4e0d\u5230\u901a\u884c\u8bc1\u7684\u7ebf\u7a0b\uff0c\u5c31\u4e0d\u5141\u8bb8\u8fdb\u5165CPU\u6267\u884c\u3002GIL\u53ea\u5728cpython\u4e2d\u624d\u6709\uff0c\u56e0\u4e3acpython\u8c03\u7528\u7684\u662fc\u8bed\u8a00\u7684\u539f\u751f\u7ebf\u7a0b\uff0c\u6240\u4ee5\u4ed6\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5ccpu\uff0c\u53ea\u80fd\u5229\u7528GIL\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u6570\u636e\u3002\u800c\u5728pypy\u548cjpython\u4e2d\u662f\u6ca1\u6709GIL\u7684\u3002 Python\u591a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u8fc7\u7a0b\uff1a python\u5728\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u8c03\u7528\u7684\u662fc\u8bed\u8a00\u7684\u539f\u751f\u7ebf\u7a0b\u3002 \u62ff\u5230\u516c\u5171\u6570\u636e \u7533\u8bf7gil python\u89e3\u91ca\u5668\u8c03\u7528os\u539f\u751f\u7ebf\u7a0b os\u64cd\u4f5ccpu\u6267\u884c\u8fd0\u7b97 \u5f53\u8be5\u7ebf\u7a0b\u6267\u884c\u65f6\u95f4\u5230\u540e\uff0c\u65e0\u8bba\u8fd0\u7b97\u662f\u5426\u5df2\u7ecf\u6267\u884c\u5b8c\uff0cgil\u90fd\u88ab\u8981\u6c42\u91ca\u653e \u8fdb\u800c\u7531\u5176\u4ed6\u8fdb\u7a0b\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b \u7b49\u5176\u4ed6\u8fdb\u7a0b\u6267\u884c\u5b8c\u540e\uff0c\u53c8\u4f1a\u5207\u6362\u5230\u4e4b\u524d\u7684\u7ebf\u7a0b\uff08\u4ece\u4ed6\u8bb0\u5f55\u7684\u4e0a\u4e0b\u6587\u7ee7\u7eed\u6267\u884c\uff09\uff0c\u6574\u4e2a\u8fc7\u7a0b\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u81ea\u5df1\u7684\u8fd0\u7b97\uff0c\u5f53\u6267\u884c\u65f6\u95f4\u5230\u5c31\u8fdb\u884c\u5207\u6362\uff08context switch\uff09\u3002","title":"GIL\uff08Global Interpreter Lock\uff09\u5168\u5c40\u89e3\u91ca\u5668\u9501"},{"location":"pytorch/","text":"\u6559\u7ec3\uff0c\u6211\u60f3\u5b66\u4e60 pytorch \u6211\u9009\u62e9 pytorch \u4f5c\u4e3a\u6211\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177\u3002 \u4e3b\u8981\u662f\u6700\u8fd1\u5f88\u706b\u54c8\u54c8\u54c8\u3002 \u4e4b\u524d\u5b66\u4e60\u4e86 pandas \uff0c\u5b66\u4e60 pytorch \u5e94\u8be5\u4f1a\u7b80\u5355\u4e00\u70b9\u70b9\u5427\u3002 \u76ee\u524d\u5c31\u662f\u4e00\u4e2a\u7eaf\u5c0f\u767d\uff0c\u5565\u672f\u8bed\u90fd\u4e0d\u61c2\u6b38\u3002 \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7AI\u5b66\u4e60\u8def\u7ebf\u8ba9\u81ea\u5df1\u66f4\u5389\u5bb3\u70b9\u5427\u3002 \u4e00\u8d77\u52a0\u6cb9\uff01","title":"\u4ecb\u7ecd"},{"location":"pytorch/#pytorch","text":"\u6211\u9009\u62e9 pytorch \u4f5c\u4e3a\u6211\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177\u3002 \u4e3b\u8981\u662f\u6700\u8fd1\u5f88\u706b\u54c8\u54c8\u54c8\u3002 \u4e4b\u524d\u5b66\u4e60\u4e86 pandas \uff0c\u5b66\u4e60 pytorch \u5e94\u8be5\u4f1a\u7b80\u5355\u4e00\u70b9\u70b9\u5427\u3002 \u76ee\u524d\u5c31\u662f\u4e00\u4e2a\u7eaf\u5c0f\u767d\uff0c\u5565\u672f\u8bed\u90fd\u4e0d\u61c2\u6b38\u3002 \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7AI\u5b66\u4e60\u8def\u7ebf\u8ba9\u81ea\u5df1\u66f4\u5389\u5bb3\u70b9\u5427\u3002 \u4e00\u8d77\u52a0\u6cb9\uff01","title":"\u6559\u7ec3\uff0c\u6211\u60f3\u5b66\u4e60pytorch"},{"location":"pytorch/regression/","text":"\u7b80\u5355\u7684\u56de\u5f52 import torch import torch.nn import torch.nn.functional as F from torch.autograd import Variable import plotly.graph_objects as go import matplotlib.pyplot as plt \u751f\u6210\u6570\u636e x = torch.unsqueeze(torch.linspace(-1,1,100),dim=1) y = x.pow(2)+torch.rand(x.size())*0.2 x = Variable(x) y = Variable(y) # plt.scatter(x.numpy(), y.numpy()) # plt.show() # scatter = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers') # fig = go.Figure(scatter) # fig.show() \u6784\u5efa\u795e\u7ecf\u7f51\u7edc class Net(torch.nn.Module): #\u7ee7\u627f def __init__(self,n_feature,n_hidden,n_output): super(Net,self).__init__() self.hidden = torch.nn.Linear(n_feature,n_hidden) #\u4ece\u7279\u5f81\u5230\u9690\u85cf\u5c42 self.predict = torch.nn.Linear(n_hidden,n_output) #\u4ece\u9690\u85cf\u5c42\u5230\u8f93\u51fa def forward(self,x): x = F.relu(self.hidden(x)) #\u6fc0\u6d3b\u51fd\u6570 x = self.predict(x) #\u9884\u6d4b\u503c return x \u635f\u5931\u51fd\u6570 optimzer = torch.optim.SGD(net.parameters(),lr=0.5) #\u8bbe\u7f6e\u5b66\u4e60\u7387\u4e3a0.5, loss_func = torch.nn.MSELoss()#\u8bbe\u7f6e\u635f\u5931\u51fd\u6570 \u5f00\u59cb\u8bad\u7ec3 # plt.ion() for t in range(1,201): #\u8bad\u7ec3200\u6b21 prediction = net(x) #\u5f97\u5230\u9884\u6d4b\u503c loss = loss_func(prediction,y) #\u901a\u8fc7\u635f\u5931\u51fd\u6570\u5f97\u5230\u635f\u5931 optimzer.zero_grad() #\u68af\u5ea6\u8bbe\u7f6e\u4e3a0 loss.backward() #\u53cd\u5411\u4f20\u64ad optimzer.step() if t%10==0: scat1 = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers',name='nature') scat2 = go.Scatter(x=x.squeeze(1).data.numpy(),y=prediction.squeeze(1).data.numpy(),name='prediction') fig = go.Figure([scat1,scat2]) fig.update_layout( title='loss = %.4f' % loss.item() #\u56fe\u8868\u7684\u6807\u9898\u4e3a\u6bcf\u6b21\u7684\u635f\u5931 ) fig.show() # plt.cla() # plt.scatter(x.data.numpy(), y.data.numpy()) # plt.plot(x.data.numpy(),prediction.data.numpy(),'r-',lw=5) # plt.text(0.5, 0, 'Loss=%.4f' % loss.item(), fontdict={'size': 20, 'color': 'red'}) # plt.pause(0.1) # plt.ioff() # plt.show()","title":"regression"},{"location":"pytorch/regression/#_1","text":"import torch import torch.nn import torch.nn.functional as F from torch.autograd import Variable import plotly.graph_objects as go import matplotlib.pyplot as plt","title":"\u7b80\u5355\u7684\u56de\u5f52"},{"location":"pytorch/regression/#_2","text":"x = torch.unsqueeze(torch.linspace(-1,1,100),dim=1) y = x.pow(2)+torch.rand(x.size())*0.2 x = Variable(x) y = Variable(y) # plt.scatter(x.numpy(), y.numpy()) # plt.show() # scatter = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers') # fig = go.Figure(scatter) # fig.show()","title":"\u751f\u6210\u6570\u636e"},{"location":"pytorch/regression/#_3","text":"class Net(torch.nn.Module): #\u7ee7\u627f def __init__(self,n_feature,n_hidden,n_output): super(Net,self).__init__() self.hidden = torch.nn.Linear(n_feature,n_hidden) #\u4ece\u7279\u5f81\u5230\u9690\u85cf\u5c42 self.predict = torch.nn.Linear(n_hidden,n_output) #\u4ece\u9690\u85cf\u5c42\u5230\u8f93\u51fa def forward(self,x): x = F.relu(self.hidden(x)) #\u6fc0\u6d3b\u51fd\u6570 x = self.predict(x) #\u9884\u6d4b\u503c return x","title":"\u6784\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"pytorch/regression/#_4","text":"optimzer = torch.optim.SGD(net.parameters(),lr=0.5) #\u8bbe\u7f6e\u5b66\u4e60\u7387\u4e3a0.5, loss_func = torch.nn.MSELoss()#\u8bbe\u7f6e\u635f\u5931\u51fd\u6570","title":"\u635f\u5931\u51fd\u6570"},{"location":"pytorch/regression/#_5","text":"# plt.ion() for t in range(1,201): #\u8bad\u7ec3200\u6b21 prediction = net(x) #\u5f97\u5230\u9884\u6d4b\u503c loss = loss_func(prediction,y) #\u901a\u8fc7\u635f\u5931\u51fd\u6570\u5f97\u5230\u635f\u5931 optimzer.zero_grad() #\u68af\u5ea6\u8bbe\u7f6e\u4e3a0 loss.backward() #\u53cd\u5411\u4f20\u64ad optimzer.step() if t%10==0: scat1 = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers',name='nature') scat2 = go.Scatter(x=x.squeeze(1).data.numpy(),y=prediction.squeeze(1).data.numpy(),name='prediction') fig = go.Figure([scat1,scat2]) fig.update_layout( title='loss = %.4f' % loss.item() #\u56fe\u8868\u7684\u6807\u9898\u4e3a\u6bcf\u6b21\u7684\u635f\u5931 ) fig.show() # plt.cla() # plt.scatter(x.data.numpy(), y.data.numpy()) # plt.plot(x.data.numpy(),prediction.data.numpy(),'r-',lw=5) # plt.text(0.5, 0, 'Loss=%.4f' % loss.item(), fontdict={'size': 20, 'color': 'red'}) # plt.pause(0.1) # plt.ioff() # plt.show()","title":"\u5f00\u59cb\u8bad\u7ec3"},{"location":"pytorch/regression2/","text":"\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b import torch import numpy as np import pandas as pd import plotly.graph_objects as go import torch.nn import torch.nn.functional as F from torch.autograd import Variable x = torch.unsqueeze(torch.linspace(-10,10,100),dim=1) y = x*2+10+torch.rand(x.size()) # scatter = go.Scatter(x = torch.squeeze(x),y = torch.squeeze(y),mode = 'markers') # fig = go.Figure(scatter) # fig.show() class Net(torch.nn.Module): def __init__(self): super(Net,self).__init__() self.hidden = torch.nn.Linear(1,10) self.linser = torch.nn.Linear(10,1) def forward(self,x): x = F.relu(self.hidden(x)) out = self.linser(x) return out x = Variable(x) y = Variable(y) net = Net() net Net( (hidden): Linear(in_features=1, out_features=10, bias=True) (linser): Linear(in_features=10, out_features=1, bias=True) ) net.parameters() <generator object Module.parameters at 0x000001DCE4384570> loss_fun = torch.nn.MSELoss() optim = torch.optim.SGD(net.parameters(),lr=1e-2) print(loss_fun,optim) MSELoss() SGD ( Parameter Group 0 dampening: 0 lr: 0.01 momentum: 0 nesterov: False weight_decay: 0 ) for i in range(1000): predict = net(x) loss = loss_fun(predict,y) optim.zero_grad() loss.backward() optim.step() if i%50 == 0: print(f\"\u635f\u5931\u7387\u4e3a{loss.item():.4f}\") # scatter1 = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers') # scatter2 = go.Scatter(x=x.squeeze(1).data.numpy(),y=predict.squeeze(1).data.numpy(),mode='lines') # fig = go.Figure([scatter1,scatter2]) # fig.update_layout(title=f'\u635f\u5931\u7387\u4e3a{loss.item()}') # fig.show() \u635f\u5931\u7387\u4e3a237.3235 \u635f\u5931\u7387\u4e3a18.0279 \u635f\u5931\u7387\u4e3a12.1344 \u635f\u5931\u7387\u4e3a8.4456 \u635f\u5931\u7387\u4e3a6.4861 \u635f\u5931\u7387\u4e3a5.1898 \u635f\u5931\u7387\u4e3a4.2126 \u635f\u5931\u7387\u4e3a3.4631 \u635f\u5931\u7387\u4e3a2.8457 \u635f\u5931\u7387\u4e3a2.3588 \u635f\u5931\u7387\u4e3a1.8926 \u635f\u5931\u7387\u4e3a1.5829 \u635f\u5931\u7387\u4e3a1.3023 \u635f\u5931\u7387\u4e3a1.0384 \u635f\u5931\u7387\u4e3a0.9485 \u635f\u5931\u7387\u4e3a0.8678 \u635f\u5931\u7387\u4e3a0.7937 \u635f\u5931\u7387\u4e3a0.6795 \u635f\u5931\u7387\u4e3a0.5726 \u635f\u5931\u7387\u4e3a0.5546 arrays = torch.Tensor([5]).unsqueeze(1) net(arrays) tensor([[21.3448]], grad_fn=<AddmmBackward>)","title":"\u7ebf\u6027\u56de\u5f52\u6a21\u578b"},{"location":"pytorch/regression2/#_1","text":"import torch import numpy as np import pandas as pd import plotly.graph_objects as go import torch.nn import torch.nn.functional as F from torch.autograd import Variable x = torch.unsqueeze(torch.linspace(-10,10,100),dim=1) y = x*2+10+torch.rand(x.size()) # scatter = go.Scatter(x = torch.squeeze(x),y = torch.squeeze(y),mode = 'markers') # fig = go.Figure(scatter) # fig.show() class Net(torch.nn.Module): def __init__(self): super(Net,self).__init__() self.hidden = torch.nn.Linear(1,10) self.linser = torch.nn.Linear(10,1) def forward(self,x): x = F.relu(self.hidden(x)) out = self.linser(x) return out x = Variable(x) y = Variable(y) net = Net() net Net( (hidden): Linear(in_features=1, out_features=10, bias=True) (linser): Linear(in_features=10, out_features=1, bias=True) ) net.parameters() <generator object Module.parameters at 0x000001DCE4384570> loss_fun = torch.nn.MSELoss() optim = torch.optim.SGD(net.parameters(),lr=1e-2) print(loss_fun,optim) MSELoss() SGD ( Parameter Group 0 dampening: 0 lr: 0.01 momentum: 0 nesterov: False weight_decay: 0 ) for i in range(1000): predict = net(x) loss = loss_fun(predict,y) optim.zero_grad() loss.backward() optim.step() if i%50 == 0: print(f\"\u635f\u5931\u7387\u4e3a{loss.item():.4f}\") # scatter1 = go.Scatter(x=x.squeeze(1).data.numpy(),y=y.squeeze(1).data.numpy(),mode='markers') # scatter2 = go.Scatter(x=x.squeeze(1).data.numpy(),y=predict.squeeze(1).data.numpy(),mode='lines') # fig = go.Figure([scatter1,scatter2]) # fig.update_layout(title=f'\u635f\u5931\u7387\u4e3a{loss.item()}') # fig.show() \u635f\u5931\u7387\u4e3a237.3235 \u635f\u5931\u7387\u4e3a18.0279 \u635f\u5931\u7387\u4e3a12.1344 \u635f\u5931\u7387\u4e3a8.4456 \u635f\u5931\u7387\u4e3a6.4861 \u635f\u5931\u7387\u4e3a5.1898 \u635f\u5931\u7387\u4e3a4.2126 \u635f\u5931\u7387\u4e3a3.4631 \u635f\u5931\u7387\u4e3a2.8457 \u635f\u5931\u7387\u4e3a2.3588 \u635f\u5931\u7387\u4e3a1.8926 \u635f\u5931\u7387\u4e3a1.5829 \u635f\u5931\u7387\u4e3a1.3023 \u635f\u5931\u7387\u4e3a1.0384 \u635f\u5931\u7387\u4e3a0.9485 \u635f\u5931\u7387\u4e3a0.8678 \u635f\u5931\u7387\u4e3a0.7937 \u635f\u5931\u7387\u4e3a0.6795 \u635f\u5931\u7387\u4e3a0.5726 \u635f\u5931\u7387\u4e3a0.5546 arrays = torch.Tensor([5]).unsqueeze(1) net(arrays) tensor([[21.3448]], grad_fn=<AddmmBackward>)","title":"\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b"},{"location":"pytorch/start/","text":"\u5f00\u59cb\uff01 \u7528 import torch \u5bfc\u5165 pytorch \u5e93 \u4e0d\u8981\u6253\u6210 import pytorch \u54e6~ \u4e0b\u9762\u662f\u6211\u7684\u5b66\u4e60\u8bb0\u5f55\uff1a import torch#\u5bfc\u5165\u6a21\u5757 x = torch.rand(5,3)#\u751f\u6210\u968f\u673a\u5f20\u91cf x tensor([[0.8241, 0.9623, 0.8265], [0.8875, 0.6775, 0.0678], [0.8438, 0.5565, 0.0824], [0.7778, 0.7368, 0.5326], [0.6096, 0.5767, 0.5788]]) x = x.new_ones(5,3,dtype=torch.double)#\u751f\u6210\u503c\u4e3a1\u7684\u5f20\u91cf\uff0c\u5e76\u5b9a\u4e49\u6570\u636e\u7c7b\u578b x tensor([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]], dtype=torch.float64) x = torch.randn_like(x,dtype=torch.float)#\u6539\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u6539\u53d8\u6570 x tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]) x.size()#\u83b7\u53d6\u5c3a\u5bf8 torch.Size([5, 3]) y = torch.rand(5,3) torch.add(x,y)#\u4e5f\u53ef\u4ee5\u5199\u6210x+y tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) result = torch.empty(5,3)#\u7a7a\u5f20\u91cf torch.add(x,y,out = result)#\u628a\u8fd0\u7b97\u7ed3\u679c\u50a8\u5b58\u5728result\u91cc tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) x,x[:,1]#\u7c7b\u4f3c\u4e8enumpy\u7684\u5207\u7247\u64cd\u4f5c,\u53d6\u7b2c\u4e8c\u5217 (tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]), tensor([ 0.1029, 1.4284, -0.3634, -1.0210, -0.2605])) x = torch.rand(4,4) y = x.view(16)#\u7c7b\u4f3c\u4e8enumpy\u7684resize()\u4f46\u7528\u6cd5\u4e0d\u592a\u76f8\u540c z = x.view(-1,8) x.size(),y.size(),z.size() (torch.Size([4, 4]), torch.Size([16]), torch.Size([2, 8])) x = torch.rand(1) print(x) print(x.item())#\u53d6\u503c tensor([0.5160]) 0.5160175561904907 import numpy as np a = torch.ones(5) a tensor([1., 1., 1., 1., 1.]) b=a.numpy()#\u5c06\u5f20\u91cf\u8f6c\u6362\u4e3anumpy\u7684array b array([1., 1., 1., 1., 1.], dtype=float32) a.add_(1) #a\u81ea\u52a01\uff0cb\u4e5f\u8ddf\u7740\u6539\u53d8 a,b (tensor([2., 2., 2., 2., 2.]), array([2., 2., 2., 2., 2.], dtype=float32)) a = np.ones(5) b=torch.from_numpy(a)#\u5c06array\u8f6c\u6362\u4e3a\u5f20\u91cf np.add(a,1,out=a) a,b (array([2., 2., 2., 2., 2.]), tensor([2., 2., 2., 2., 2.], dtype=torch.float64)) x = torch.ones(2,2,requires_grad=True)#requires_grad\u53c2\u6570\u7528\u4e8e\u8bf4\u660e\u5f53\u524d\u91cf\u662f\u5426\u9700\u8981\u5728\u8ba1\u7b97\u4e2d\u4fdd\u7559\u5bf9\u5e94\u7684\u68af\u5ea6\u4fe1\u606f\u4ee5\u7ebf\u6027\u56de\u5f52\u4e3a\u4f8b\uff0c\u4e3a\u4e86\u5f97\u5230\u6700\u5408\u9002\u7684\u53c2\u6570\u503c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5173\u7684\u635f\u5931\u51fd\u6570\uff0c\u6839\u636e\u68af\u5ea6\u56de\u4f20\u7684\u601d\u8def\u8fdb\u884c\u8bad\u7ec3\u3002 x tensor([[1., 1.], [1., 1.]], requires_grad=True) y = x+2 y tensor([[3., 3.], [3., 3.]], grad_fn=<AddBackward0>) y.grad_fn#\u7528\u4e8e\u6307\u5bfc\u53cd\u5411\u4f20\u64ad\uff0c\u6211\u73b0\u5728\u4e5f\u4e0d\u592a\u61c2 <AddBackward0 at 0x25b91b2c710> z = y*y*3 out = torch.mean(z) z,out (tensor([[27., 27.], [27., 27.]], grad_fn=<MulBackward0>), tensor(27., grad_fn=<MeanBackward0>)) a = torch.randn(2,2) print(a) print(a.requires_grad) a.requires_grad_(True)#\u4fee\u6539requires_grad\u7684\u503c print(a.requires_grad) b=(a*a).sum() print(b.grad_fn) tensor([[-0.6831, 1.5310], [-0.5836, 0.4117]]) False True <SumBackward0 object at 0x0000025B91B39828> \u548c numpy \u7684\u4e92\u76f8\u8f6c\u6362: import numpy as np import torch a = torch.Tensor([]) b=a.numpy()#a\u4e3a\u5f20\u91cf a = np.arange.randn() b = torch.from_numpy(a)#a\u4e3aarray","title":"start"},{"location":"pytorch/start/#_1","text":"\u7528 import torch \u5bfc\u5165 pytorch \u5e93 \u4e0d\u8981\u6253\u6210 import pytorch \u54e6~ \u4e0b\u9762\u662f\u6211\u7684\u5b66\u4e60\u8bb0\u5f55\uff1a import torch#\u5bfc\u5165\u6a21\u5757 x = torch.rand(5,3)#\u751f\u6210\u968f\u673a\u5f20\u91cf x tensor([[0.8241, 0.9623, 0.8265], [0.8875, 0.6775, 0.0678], [0.8438, 0.5565, 0.0824], [0.7778, 0.7368, 0.5326], [0.6096, 0.5767, 0.5788]]) x = x.new_ones(5,3,dtype=torch.double)#\u751f\u6210\u503c\u4e3a1\u7684\u5f20\u91cf\uff0c\u5e76\u5b9a\u4e49\u6570\u636e\u7c7b\u578b x tensor([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]], dtype=torch.float64) x = torch.randn_like(x,dtype=torch.float)#\u6539\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u6539\u53d8\u6570 x tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]) x.size()#\u83b7\u53d6\u5c3a\u5bf8 torch.Size([5, 3]) y = torch.rand(5,3) torch.add(x,y)#\u4e5f\u53ef\u4ee5\u5199\u6210x+y tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) result = torch.empty(5,3)#\u7a7a\u5f20\u91cf torch.add(x,y,out = result)#\u628a\u8fd0\u7b97\u7ed3\u679c\u50a8\u5b58\u5728result\u91cc tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) x,x[:,1]#\u7c7b\u4f3c\u4e8enumpy\u7684\u5207\u7247\u64cd\u4f5c,\u53d6\u7b2c\u4e8c\u5217 (tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]), tensor([ 0.1029, 1.4284, -0.3634, -1.0210, -0.2605])) x = torch.rand(4,4) y = x.view(16)#\u7c7b\u4f3c\u4e8enumpy\u7684resize()\u4f46\u7528\u6cd5\u4e0d\u592a\u76f8\u540c z = x.view(-1,8) x.size(),y.size(),z.size() (torch.Size([4, 4]), torch.Size([16]), torch.Size([2, 8])) x = torch.rand(1) print(x) print(x.item())#\u53d6\u503c tensor([0.5160]) 0.5160175561904907 import numpy as np a = torch.ones(5) a tensor([1., 1., 1., 1., 1.]) b=a.numpy()#\u5c06\u5f20\u91cf\u8f6c\u6362\u4e3anumpy\u7684array b array([1., 1., 1., 1., 1.], dtype=float32) a.add_(1) #a\u81ea\u52a01\uff0cb\u4e5f\u8ddf\u7740\u6539\u53d8 a,b (tensor([2., 2., 2., 2., 2.]), array([2., 2., 2., 2., 2.], dtype=float32)) a = np.ones(5) b=torch.from_numpy(a)#\u5c06array\u8f6c\u6362\u4e3a\u5f20\u91cf np.add(a,1,out=a) a,b (array([2., 2., 2., 2., 2.]), tensor([2., 2., 2., 2., 2.], dtype=torch.float64)) x = torch.ones(2,2,requires_grad=True)#requires_grad\u53c2\u6570\u7528\u4e8e\u8bf4\u660e\u5f53\u524d\u91cf\u662f\u5426\u9700\u8981\u5728\u8ba1\u7b97\u4e2d\u4fdd\u7559\u5bf9\u5e94\u7684\u68af\u5ea6\u4fe1\u606f\u4ee5\u7ebf\u6027\u56de\u5f52\u4e3a\u4f8b\uff0c\u4e3a\u4e86\u5f97\u5230\u6700\u5408\u9002\u7684\u53c2\u6570\u503c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5173\u7684\u635f\u5931\u51fd\u6570\uff0c\u6839\u636e\u68af\u5ea6\u56de\u4f20\u7684\u601d\u8def\u8fdb\u884c\u8bad\u7ec3\u3002 x tensor([[1., 1.], [1., 1.]], requires_grad=True) y = x+2 y tensor([[3., 3.], [3., 3.]], grad_fn=<AddBackward0>) y.grad_fn#\u7528\u4e8e\u6307\u5bfc\u53cd\u5411\u4f20\u64ad\uff0c\u6211\u73b0\u5728\u4e5f\u4e0d\u592a\u61c2 <AddBackward0 at 0x25b91b2c710> z = y*y*3 out = torch.mean(z) z,out (tensor([[27., 27.], [27., 27.]], grad_fn=<MulBackward0>), tensor(27., grad_fn=<MeanBackward0>)) a = torch.randn(2,2) print(a) print(a.requires_grad) a.requires_grad_(True)#\u4fee\u6539requires_grad\u7684\u503c print(a.requires_grad) b=(a*a).sum() print(b.grad_fn) tensor([[-0.6831, 1.5310], [-0.5836, 0.4117]]) False True <SumBackward0 object at 0x0000025B91B39828> \u548c numpy \u7684\u4e92\u76f8\u8f6c\u6362: import numpy as np import torch a = torch.Tensor([]) b=a.numpy()#a\u4e3a\u5f20\u91cf a = np.arange.randn() b = torch.from_numpy(a)#a\u4e3aarray","title":"\u5f00\u59cb\uff01"},{"location":"pytorch/think/","text":"\u4e00\u4e9b\u601d\u8003 \u770b\u4e86\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u7684\u6559\u7a0b\uff0c\u53d1\u73b0\u6570\u5b66\u5728\u8fd9\u4e00\u5757\u975e\u5e38\u91cd\u8981\uff0c\u60f3\u5b66\u597d\u5fc5\u987b\u5148\u628a\u6570\u5b66\u5b66\u597d\uff0c\u6240\u4ee5\u5148\u4e0d\u7740\u6025\u5b66\u4e60\u66f4\u52a0\u6df1\u5965\u7684\u5185\u5bb9\uff0c\u5148\u628a\u4ee5\u76ee\u524d\u7684\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u5b9e\u73b0\u7684\u4e1c\u897f\u53bb\u5b9e\u73b0\u4e00\u4e0b\u5427\u3002 \u4e86\u89e3\u4e86\u4e00\u4e9b\u77e5\u8bc6\uff0c\u6bd4\u5982\u68af\u5ea6\u4e0b\u964d\uff0c\u68af\u5ea6\u4e0b\u964d\u5c5e\u4e8e\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u9886\u57df\u91cc\u3002\u68af\u5ea6\u4e0b\u964d\u91cc\u9762\u7684\u68af\u5ea6\u5c31\u662f\u6240\u5b66\u7684\u6c42\u5bfc\u6c42\u5fae\u5206\u3002 \u6709\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u7528\u4e8e\u6bd4\u8f83\u8ba1\u7b97\u51fa\u6765\u7684\u503c\uff08\u9884\u6d4b\u503c\uff09\u4e0e\u6570\u636e\u96c6(\u5b9e\u9645\u503c)\u4e2d\u7684\u503c\u6709\u591a\u5927\u5dee\u522b\u3002 \u7c7b\u4f3c\u4e8e\u9ad8\u4e2d\u7ebf\u6027\u56de\u5f52\u5b66\u7684\u90a3\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u80af\u5b9a\u66f4\u52a0\u590d\u6742\u3002 \u5e38\u7528\u5e73\u65b9\u5dee \u6700\u7ec8\u7b80\u5316\u6210\u6700\u540e\u7684\u90a3\u6837 \u5728\u6700\u7b80\u5355\u7684\u4e8c\u6b21\u51fd\u6570\u4e2d\uff0c\u5c31\u662f\u6c42\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u6781\u503c\u3002 \u5728\u4efb\u610f\u4e00\u70b9\u505a\u5207\u7ebf\uff0c\u5982\u679c\u5bfc\u6570\u503c\u4e0d\u4e3a0\uff0c\u5219\u6cbf\u7740\u8fc7\u8fd9\u70b9\u7684\u5207\u7ebf\u4e0b\u964d\uff0c\u7136\u540e\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6700\u540e\u4e0b\u964d\u5230\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u6211\u7406\u89e3\u7684\u8fd9\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u7684\u6982\u5ff5\u3002 \u5f53\u7136\u8fd9\u662f\u6700\u7b80\u5355\u7684\uff0c\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684W\u53ef\u4e0d\u6b62\u4e00\u4e2a \u800c\u4e14\u4e5f\u4e0d\u6b62\u4e00\u4e2a\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u6709\u5168\u5c40\u6700\u4f18\u7684\u70b9\uff0c\u4e5f\u6709\u5c40\u90e8\u6700\u4f18\u7684\u70b9\u3002 W\u7684\u521d\u59cb\u70b9\u4e0d\u540c\uff0c\u5bf9\u5e94\u7684\u6700\u4f18\u89e3\u4e5f\u4e0d\u4e00\u6837\u3002 \u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u53eb\u505a\u6fc0\u6d3b\u51fd\u6570\u3002 \u5b83\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u65b9\u7a0b\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u4e00\u822c\u7ebf\u6027\u65b9\u7a0b\u53ef\u4ee5\u7528 y=Wx \u6765\u8868\u793a \u6fc0\u6d3b\u51fd\u6570\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5\uff0c\u628a\u5b83\u63b0\u5f2f \u5e38\u7528\u7684\u6709 \u7ebf\u6027\u6574\u6d41\u51fd\u6570``Sigmoid\u51fd\u6570``\u53cc\u66f2\u6b63\u5207\u51fd\u6570 \u7b49 \u4ed6\u4eec\u4f7f\u8f93\u51fa\u7ed3\u679cy\u53d8\u5f2f\u4e86 \u8fd8\u6709 \u8bef\u5dee\u53cd\u5411\u4f20\u64ad \uff0c\u6211\u7406\u89e3\u5c31\u662f\u5c06\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u56de\u53bb\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\uff0c\u76f4\u5230\u8bef\u5dee\u6700\u5c0f\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u8fbe\u5230\u8bad\u7ec3\u7684\u76ee\u7684\u3002","title":"\u4e00\u4e9b\u601d\u8003"},{"location":"pytorch/think/#_1","text":"\u770b\u4e86\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u7684\u6559\u7a0b\uff0c\u53d1\u73b0\u6570\u5b66\u5728\u8fd9\u4e00\u5757\u975e\u5e38\u91cd\u8981\uff0c\u60f3\u5b66\u597d\u5fc5\u987b\u5148\u628a\u6570\u5b66\u5b66\u597d\uff0c\u6240\u4ee5\u5148\u4e0d\u7740\u6025\u5b66\u4e60\u66f4\u52a0\u6df1\u5965\u7684\u5185\u5bb9\uff0c\u5148\u628a\u4ee5\u76ee\u524d\u7684\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u5b9e\u73b0\u7684\u4e1c\u897f\u53bb\u5b9e\u73b0\u4e00\u4e0b\u5427\u3002 \u4e86\u89e3\u4e86\u4e00\u4e9b\u77e5\u8bc6\uff0c\u6bd4\u5982\u68af\u5ea6\u4e0b\u964d\uff0c\u68af\u5ea6\u4e0b\u964d\u5c5e\u4e8e\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u9886\u57df\u91cc\u3002\u68af\u5ea6\u4e0b\u964d\u91cc\u9762\u7684\u68af\u5ea6\u5c31\u662f\u6240\u5b66\u7684\u6c42\u5bfc\u6c42\u5fae\u5206\u3002 \u6709\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u7528\u4e8e\u6bd4\u8f83\u8ba1\u7b97\u51fa\u6765\u7684\u503c\uff08\u9884\u6d4b\u503c\uff09\u4e0e\u6570\u636e\u96c6(\u5b9e\u9645\u503c)\u4e2d\u7684\u503c\u6709\u591a\u5927\u5dee\u522b\u3002 \u7c7b\u4f3c\u4e8e\u9ad8\u4e2d\u7ebf\u6027\u56de\u5f52\u5b66\u7684\u90a3\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u80af\u5b9a\u66f4\u52a0\u590d\u6742\u3002 \u5e38\u7528\u5e73\u65b9\u5dee \u6700\u7ec8\u7b80\u5316\u6210\u6700\u540e\u7684\u90a3\u6837 \u5728\u6700\u7b80\u5355\u7684\u4e8c\u6b21\u51fd\u6570\u4e2d\uff0c\u5c31\u662f\u6c42\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u6781\u503c\u3002 \u5728\u4efb\u610f\u4e00\u70b9\u505a\u5207\u7ebf\uff0c\u5982\u679c\u5bfc\u6570\u503c\u4e0d\u4e3a0\uff0c\u5219\u6cbf\u7740\u8fc7\u8fd9\u70b9\u7684\u5207\u7ebf\u4e0b\u964d\uff0c\u7136\u540e\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6700\u540e\u4e0b\u964d\u5230\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u6211\u7406\u89e3\u7684\u8fd9\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u7684\u6982\u5ff5\u3002 \u5f53\u7136\u8fd9\u662f\u6700\u7b80\u5355\u7684\uff0c\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684W\u53ef\u4e0d\u6b62\u4e00\u4e2a \u800c\u4e14\u4e5f\u4e0d\u6b62\u4e00\u4e2a\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u6709\u5168\u5c40\u6700\u4f18\u7684\u70b9\uff0c\u4e5f\u6709\u5c40\u90e8\u6700\u4f18\u7684\u70b9\u3002 W\u7684\u521d\u59cb\u70b9\u4e0d\u540c\uff0c\u5bf9\u5e94\u7684\u6700\u4f18\u89e3\u4e5f\u4e0d\u4e00\u6837\u3002 \u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u53eb\u505a\u6fc0\u6d3b\u51fd\u6570\u3002 \u5b83\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u65b9\u7a0b\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u4e00\u822c\u7ebf\u6027\u65b9\u7a0b\u53ef\u4ee5\u7528 y=Wx \u6765\u8868\u793a \u6fc0\u6d3b\u51fd\u6570\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5\uff0c\u628a\u5b83\u63b0\u5f2f \u5e38\u7528\u7684\u6709 \u7ebf\u6027\u6574\u6d41\u51fd\u6570``Sigmoid\u51fd\u6570``\u53cc\u66f2\u6b63\u5207\u51fd\u6570 \u7b49 \u4ed6\u4eec\u4f7f\u8f93\u51fa\u7ed3\u679cy\u53d8\u5f2f\u4e86 \u8fd8\u6709 \u8bef\u5dee\u53cd\u5411\u4f20\u64ad \uff0c\u6211\u7406\u89e3\u5c31\u662f\u5c06\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u56de\u53bb\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\uff0c\u76f4\u5230\u8bef\u5dee\u6700\u5c0f\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u8fbe\u5230\u8bad\u7ec3\u7684\u76ee\u7684\u3002","title":"\u4e00\u4e9b\u601d\u8003"},{"location":"sf/","text":"\u8fd9\u91cc\u5c5e\u4e8e\u7b97\u6cd5 \u6211\u9ad8\u4e2d\u6ca1\u6709\u53c2\u52a0\u7b97\u6cd5\u6bd4\u8d5b\uff0c\u521a\u521a\u8fdb\u5165\u5927\u5b66\u624d\u5f00\u59cb\u5165\u95e8\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u7684\u7b97\u6cd5\u5f88\u83dc\uff0c\u8fd8\u5728\u52aa\u529b\u7684\u5b66\u4e60\u4e2d\uff0c\u5e0c\u671b\u4ee5\u540e\u53ef\u4ee5\u4f1a\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u6210\u957f\uff0c\u53ef\u4ee5\u53bb\u53c2\u52a0\u6bd4\u8d5b \u4ee5\u540e\u6253\u7b97\u90fd\u7528python\u5237\u7b97\u6cd5\u9898\u4e86\uff0c\u6240\u4ee5\u8981\u5237\u84dd\u6865\u676f\u548cleetcode\u7684\u9898\u4e86\u3002 \u5982\u679c\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u5927\u4f6c\u7ed9\u6211\u63d0\u51fa\uff0c\u56e0\u4e3a\u6211\u7684\u7b97\u6cd5\u6c34\u5e73\u5b9e\u5728\u662f\u592a\u4f4e\u4e86\u3002 \u8054\u7cfb\u65b9\u5f0f\uff1a qq\uff1a1683070754 \u90ae\u7bb1\uff1a1683070754@qq.com \u8c22\u8c22\u5404\u4f4d\u7684\u6307\u5bfc\uff01\uff01","title":"\u4ecb\u7ecd"},{"location":"sf/#_1","text":"\u6211\u9ad8\u4e2d\u6ca1\u6709\u53c2\u52a0\u7b97\u6cd5\u6bd4\u8d5b\uff0c\u521a\u521a\u8fdb\u5165\u5927\u5b66\u624d\u5f00\u59cb\u5165\u95e8\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u7684\u7b97\u6cd5\u5f88\u83dc\uff0c\u8fd8\u5728\u52aa\u529b\u7684\u5b66\u4e60\u4e2d\uff0c\u5e0c\u671b\u4ee5\u540e\u53ef\u4ee5\u4f1a\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u6210\u957f\uff0c\u53ef\u4ee5\u53bb\u53c2\u52a0\u6bd4\u8d5b \u4ee5\u540e\u6253\u7b97\u90fd\u7528python\u5237\u7b97\u6cd5\u9898\u4e86\uff0c\u6240\u4ee5\u8981\u5237\u84dd\u6865\u676f\u548cleetcode\u7684\u9898\u4e86\u3002 \u5982\u679c\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u5927\u4f6c\u7ed9\u6211\u63d0\u51fa\uff0c\u56e0\u4e3a\u6211\u7684\u7b97\u6cd5\u6c34\u5e73\u5b9e\u5728\u662f\u592a\u4f4e\u4e86\u3002","title":"\u8fd9\u91cc\u5c5e\u4e8e\u7b97\u6cd5"},{"location":"sf/#_2","text":"","title":"\u8054\u7cfb\u65b9\u5f0f\uff1a"},{"location":"sf/#qq1683070754","text":"","title":"qq\uff1a1683070754"},{"location":"sf/#1683070754qqcom","text":"\u8c22\u8c22\u5404\u4f4d\u7684\u6307\u5bfc\uff01\uff01","title":"\u90ae\u7bb1\uff1a1683070754@qq.com"},{"location":"sf/1/","text":"\u524d\u51e0\u5929\u5728\u6d1b\u8c37\u521a\u5237\u7684\u4e00\u4e2a\u9898\u76ee ~~\u5f53\u65f6\u5728\u4e00\u4e9b\u5730\u65b9\u8e29\u4e86\u5751\uff0c\u5199\u51fa\u6765\u5438\u53d6\u6559\u8bad~~ \u6d1b\u8c37\u94fe\u63a5 \uff1ahttps://www.luogu.com.cn/problem/P1055 \u5f53\u65f6\u83b7\u53d6\u8f93\u5165\u7684\u65f6\u5019\u662f\u7528%d\u6765\u83b7\u53d6\u7684\uff0c\u540e\u6765\u53d1\u73b0\u6570\u636e\u5341\u5206\u5f02\u5e38\uff0c\u901a\u8fc7\u6d4b\u8bd5\u53d1\u73b0 -\u53f7\u88ab\u8bc6\u522b\u6210\u4e86\u7b26\u53f7\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u8f93\u5165\u5f02\u5e38 \u7ecf\u8fc7\u5f88\u4e45\u7684\u601d\u8003 \u7136\u540e\u6211\u604d\u7136\u5927\u609f\uff0c\u7528%c\u83b7\u53d6\u5c31\u597d\u4e86\u554a\uff01 \u5148\u8d34\u4e0a\u4ee3\u7801 #include <iostream> #include <stdlib.h> #include <cstdio> using namespace std; int main(){ char temp; char num[9]; scanf(\"%c-%c%c%c-%c%c%c%c%c-%c\",&num[0],&num[1],&num[2],&num[3],&num[4],&num[5],&num[6],&num[7],&num[8],&temp); int sum = 0; int X = 'X'; for(int n =1;n<=9;n++){ sum=sum+((num[n-1]-48)*n); } if(sum%11 == 10){ if(temp=='X'){ printf(\"Right\"); } else { printf(\"%c-%c%c%c-%c%c%c%c%c-%c\",num[0],num[1],num[2],num[3],num[4],num[5],num[6],num[7],num[8],'X'); } } else if(sum%11 == (int)temp-48){ printf(\"Right\"); } else if(sum%11 != (int)temp-48) { printf(\"%c-%c%c%c-%c%c%c%c%c-%c\",num[0],num[1],num[2],num[3],num[4],num[5],num[6],num[7],num[8],(char)((sum%11)+48)); } system(\"pause\"); return 0; } \u867d\u7136\u6211\u5199\u7684\u5f88\u81c3\u80bf\uff0c\u4f46\u81f3\u5c11AC\u4e86 \u540e\u6765\u4e5f\u6ca1\u60f3\u7740\u4f18\u5316\u4ee3\u7801\u3002 \u603b\u4e4b\u6211\u5c31\u662f\u901a\u8fc7\u5b57\u7b26\u83b7\u53d6\u8f93\u5165\u7136\u540e\u8f6c\u6362\u6210\u6574\u6570\u578b\u5728\u8fdb\u884c\u5224\u65ad \u603b\u4f53\u7684\u96be\u70b9\u5c31\u5728\u8fd9\uff0c\u666e\u53ca\u9898\u7684\u96be\u5ea6\uff0c\u540e\u9762\u5c31\u5f88\u7b80\u5355\u4e86\uff01 \u6211\u83b7\u5f97\u7684\u6536\u83b7\u5982\u4e0b\uff1a \u83b7\u53d6\u8f93\u5165\u65f6\u8981\u7075\u6d3b\u5224\u65ad\u662f\u5b57\u7b26\u8fd8\u662f\u6574\u6570 \u7075\u6d3b\u4f7f\u7528\u6570\u7ec4 \u8981\u53ca\u65f6\u4f18\u5316\u4ee3\u7801 \u5411\u5927\u4f6c\u5b66\u4e60\uff01","title":"isbn\u53f7\u7801"},{"location":"sf/10/","text":"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) https://leetcode-cn.com/problems/string-to-integer-atoi/ #\u91cd\u70b9\u662f\u6b63\u5219\u8868\u8fbe\u5f0f class Solution: def myAtoi(s: str): import re ss = re.findall(\"^[\\+\\-]?\\d+\",s.strip()) res = int(*ss) if res > (2**31-1): res = (2**31-1) if res < -2**31: res = -2**31 return res WA\u4e86\u56db\u6b21\u624d\u6574\u51fa\u6765\uff0c\u592a\u83dc\u4e86\uff0c\u4ee5\u4e3a\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u8ba4\u771f\u8bfb\u9898\uff0c\u8981\u5438\u53d6\u6559\u8bad\u3002","title":"\u5b57\u7b26\u4e32\u8f6c\u6574\u6570"},{"location":"sf/10/#atoi","text":"https://leetcode-cn.com/problems/string-to-integer-atoi/ #\u91cd\u70b9\u662f\u6b63\u5219\u8868\u8fbe\u5f0f class Solution: def myAtoi(s: str): import re ss = re.findall(\"^[\\+\\-]?\\d+\",s.strip()) res = int(*ss) if res > (2**31-1): res = (2**31-1) if res < -2**31: res = -2**31 return res WA\u4e86\u56db\u6b21\u624d\u6574\u51fa\u6765\uff0c\u592a\u83dc\u4e86\uff0c\u4ee5\u4e3a\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u8ba4\u771f\u8bfb\u9898\uff0c\u8981\u5438\u53d6\u6559\u8bad\u3002","title":"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)"},{"location":"sf/11/","text":"\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af \u6bcf\u65e5\u4e00\u9898\u5237\u5230\u7684\u3002 \u52a8\u6001\u89c4\u5212\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u91cd\u70b9\u5c31\u662f\u627e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u56e0\u4e3a\u6211\u4e0d\u592a\u719f\u7ec3\uff0c\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u9898\u76ee\u505a\u7684\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5WA\u4e86\u597d\u51e0\u6b21\u3002 class Solution: def minCostClimbingStairs(cost): res = [] #res[i]\u5c31\u662f\u5230\u7b2ci\u9636\u68af\u65f6\u6700\u5c0f\u7684\u82b1\u8d39 res.append(cost[0]) #\u5230\u7b2c\u4e00\u9636\u68af\u6700\u5c0f\u5c31\u662f0+cost[0] res.append(cost[1]) #\u7b2c\u4e8c\u9636\u68af\u6700\u5c0f\u5c31\u662f0+cost[1] #\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:res[i] = min(res[i-1],res[i-2])+cost[i] for i in range(2,len(cost)): res.append(min(res[i-1],res[i-2])+cost[i]) # return min(res[-1],res[-2]) \u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5148\u8e0f\u4e0a\u7b2ci-2\u7ea7\u53f0\u9636\uff08\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-2] \uff09\uff0c\u518d\u76f4\u63a5\u8fc8\u4e24\u6b65\u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\uff08\u82b1\u8d39 cost[i] \uff09\uff0c\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-2] + cost[i] \uff1b \u5148\u8e0f\u4e0a\u7b2ci-1\u7ea7\u53f0\u9636\uff08\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-1] \uff09\uff0c\u518d\u8fc8\u4e00\u6b65\u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\uff08\u82b1\u8d39 cost[i] \uff09\uff0c\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-1] + cost[i] \uff1b \u4e0a\u8ff0\u4e3a\u5f15\u7528\u7684\u9898\u89e3\u7684\u8bf4\u660e\uff0c\u66f4\u52a0\u6df1\u4e86\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u7406\u89e3","title":"\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af"},{"location":"sf/11/#_1","text":"\u6bcf\u65e5\u4e00\u9898\u5237\u5230\u7684\u3002 \u52a8\u6001\u89c4\u5212\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u91cd\u70b9\u5c31\u662f\u627e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u56e0\u4e3a\u6211\u4e0d\u592a\u719f\u7ec3\uff0c\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u9898\u76ee\u505a\u7684\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5WA\u4e86\u597d\u51e0\u6b21\u3002 class Solution: def minCostClimbingStairs(cost): res = [] #res[i]\u5c31\u662f\u5230\u7b2ci\u9636\u68af\u65f6\u6700\u5c0f\u7684\u82b1\u8d39 res.append(cost[0]) #\u5230\u7b2c\u4e00\u9636\u68af\u6700\u5c0f\u5c31\u662f0+cost[0] res.append(cost[1]) #\u7b2c\u4e8c\u9636\u68af\u6700\u5c0f\u5c31\u662f0+cost[1] #\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:res[i] = min(res[i-1],res[i-2])+cost[i] for i in range(2,len(cost)): res.append(min(res[i-1],res[i-2])+cost[i]) # return min(res[-1],res[-2]) \u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5148\u8e0f\u4e0a\u7b2ci-2\u7ea7\u53f0\u9636\uff08\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-2] \uff09\uff0c\u518d\u76f4\u63a5\u8fc8\u4e24\u6b65\u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\uff08\u82b1\u8d39 cost[i] \uff09\uff0c\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-2] + cost[i] \uff1b \u5148\u8e0f\u4e0a\u7b2ci-1\u7ea7\u53f0\u9636\uff08\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-1] \uff09\uff0c\u518d\u8fc8\u4e00\u6b65\u8e0f\u4e0a\u7b2ci\u7ea7\u53f0\u9636\uff08\u82b1\u8d39 cost[i] \uff09\uff0c\u6700\u5c0f\u603b\u82b1\u8d39 dp[i-1] + cost[i] \uff1b \u4e0a\u8ff0\u4e3a\u5f15\u7528\u7684\u9898\u89e3\u7684\u8bf4\u660e\uff0c\u66f4\u52a0\u6df1\u4e86\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u7406\u89e3","title":"\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af"},{"location":"sf/12/","text":"\u6700\u5927\u5b50\u5e8f\u548c https://leetcode-cn.com/problems/maximum-subarray/ \u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\uff0c\u7ed3\u679ctle\u4e86\u6700\u540e class Solution: def maxSubArray(nums): res = -float('inf') for i in range(len(nums)): for j in range(i,len(nums)): res = max(res,sum(nums[i:j+1])) return res \u8fd9\u8bf4\u660e\u5728leetcode\u5c3d\u91cf\u4e0d\u8981\u5d4c\u5957\u5faa\u73af\uff0c\u5927\u6982\u7387Tle class Solution: def maxSubArray(nums): for i in range(1,len(nums)): maxs = max(nums[i-1]+nums[i],nums[i]) nums[i] = maxs return max(nums) \u6700\u540e\u5de7\u5999\u5730\u5229\u7528\u4e86\u66ff\u6362\u7684\u601d\u60f3\uff0c\u5c06\u6bcf\u6b21\u76f8\u52a0\u7684\u503c\u548c\u5f53\u524d\u6bd4\u8f83\uff0c\u5e76\u5c06\u5f53\u524d\u66ff\u6362\u4e3a\u8f83\u5927\u7684\u90a3\u4e2a\u503c\uff0c\u6700\u540e\u6c42\u6574\u4e2a\u5217\u8868\u7684\u6700\u5927\u503c\u3002","title":"\u6700\u5927\u5b50\u5e8f\u548c"},{"location":"sf/12/#_1","text":"https://leetcode-cn.com/problems/maximum-subarray/ \u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\uff0c\u7ed3\u679ctle\u4e86\u6700\u540e class Solution: def maxSubArray(nums): res = -float('inf') for i in range(len(nums)): for j in range(i,len(nums)): res = max(res,sum(nums[i:j+1])) return res \u8fd9\u8bf4\u660e\u5728leetcode\u5c3d\u91cf\u4e0d\u8981\u5d4c\u5957\u5faa\u73af\uff0c\u5927\u6982\u7387Tle class Solution: def maxSubArray(nums): for i in range(1,len(nums)): maxs = max(nums[i-1]+nums[i],nums[i]) nums[i] = maxs return max(nums) \u6700\u540e\u5de7\u5999\u5730\u5229\u7528\u4e86\u66ff\u6362\u7684\u601d\u60f3\uff0c\u5c06\u6bcf\u6b21\u76f8\u52a0\u7684\u503c\u548c\u5f53\u524d\u6bd4\u8f83\uff0c\u5e76\u5c06\u5f53\u524d\u66ff\u6362\u4e3a\u8f83\u5927\u7684\u90a3\u4e2a\u503c\uff0c\u6700\u540e\u6c42\u6574\u4e2a\u5217\u8868\u7684\u6700\u5927\u503c\u3002","title":"\u6700\u5927\u5b50\u5e8f\u548c"},{"location":"sf/13/","text":"\u6253\u5bb6\u52ab\u820d \u6253\u5bb6\u52ab\u820dI \u9898\u76ee\uff1a https://leetcode-cn.com/problems/house-robber/ \u601d\u8def: \u4e00\u4e2a\u7b80\u5355\u9898\uff0c\u4e0d\u8fc7\u8e29\u4e86\u7279\u4f8b\u7684\u5751\u3002\u3002\u53ef\u4ee5\u66b4\u529b\u89e3\u51b3 \u4e5f\u53ef\u4ee5\u52a8\u6001\u89c4\u5212 \u4ee3\u7801: \u66b4\u529b\u89e3\u51b3 class Solution: def rob(nums): if nums == []: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0],nums[1]) maxs = [] #max[i]\u4ee3\u8868\u5230i+1\u5bb6\u7684\u6700\u5927\u4ef7\u94b1 maxs.append(nums[0]) maxs.append(nums[1]) for i in range(2,len(nums)): maxs.append(max(maxs[:i-1])+nums[i]) #\u4ece\u5934\u5230\u8fd9\u5bb6\u524d\u9762\u7684\u7b2c\u4e8c\u5bb6\u6700\u5927\u7684\u4ef7\u94b1\u52a0\u4e0a\u8fd9\u4e00\u5bb6\u7684\u4ef7\u94b1 return max(maxs) \u52a8\u6001\u89c4\u5212 class Solution: def rob(self, nums: List[int]) -> int: dp = [0 for i in range(len(nums)+2)] # dp\u4e3a\u4ece\u7b2ci\u4e2a\u623f\u5b50\u5f00\u59cb\u62a2 \u62a2\u5230\u7684\u94b1 for i in range(len(nums)-1,-1,-1): dp[i] = max(dp[i+1],dp[i+2]+nums[i]) return dp[0] \u6253\u5bb6\u52ab\u820dII \u9898\u76ee\uff1a https://leetcode-cn.com/problems/house-robber-ii/ \u601d\u8def\uff1a \u8ddf\u4e0a\u9762\u7684\u9898\u76ee\u975e\u5e38\u7c7b\u4f3c\uff0c\u53ea\u662f\u52a0\u4e86\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5c31\u662f\u7b2c\u4e00\u5bb6\u548c\u6700\u540e\u4e00\u5bb6\u4e0d\u80fd\u540c\u65f6\u6253\u52ab\u3002 \u8fd9\u91cc\u5148\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8868\u793a\u4ecestart \u5230end \u8303\u56f4\u91cc\u9762\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u5728\u4e3b\u51fd\u6570\u91cc\u9762\u8fdb\u884c\u9009\u62e9 \u5982\u679c\u6253\u52ab\u7b2c\u4e00\u5bb6\uff0c\u5c31\u4e0d\u80fd\u6253\u52ab\u6700\u540e\u4e00\u5bb6\u4ee5\u53ca\u4e0d\u6253\u52ab\u7b2c\u4e00\u5bb6\u53bb\u6253\u52ab\u6700\u540e\u4e00\u5bb6\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u6700\u5927\u503c \u4ee3\u7801\uff1a class Solution: def rob(self, nums: List[int]) -> int: if len(nums) == 1: return nums[0] return max(self.dp(0,len(nums)-2,nums),self.dp(1,len(nums)-1,nums)) def dp(self,start,end,nums): dp = [0 for _ in range(len(nums)+2)] for i in range(end,start-1,-1): dp[i] = max(dp[i+1],dp[i+2]+nums[i]) return dp[start]","title":"\u6253\u5bb6\u52ab\u820d"},{"location":"sf/13/#_1","text":"","title":"\u6253\u5bb6\u52ab\u820d"},{"location":"sf/13/#i","text":"","title":"\u6253\u5bb6\u52ab\u820dI"},{"location":"sf/13/#_2","text":"https://leetcode-cn.com/problems/house-robber/","title":"\u9898\u76ee\uff1a"},{"location":"sf/13/#_3","text":"\u4e00\u4e2a\u7b80\u5355\u9898\uff0c\u4e0d\u8fc7\u8e29\u4e86\u7279\u4f8b\u7684\u5751\u3002\u3002\u53ef\u4ee5\u66b4\u529b\u89e3\u51b3 \u4e5f\u53ef\u4ee5\u52a8\u6001\u89c4\u5212","title":"\u601d\u8def:"},{"location":"sf/13/#_4","text":"\u66b4\u529b\u89e3\u51b3 class Solution: def rob(nums): if nums == []: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0],nums[1]) maxs = [] #max[i]\u4ee3\u8868\u5230i+1\u5bb6\u7684\u6700\u5927\u4ef7\u94b1 maxs.append(nums[0]) maxs.append(nums[1]) for i in range(2,len(nums)): maxs.append(max(maxs[:i-1])+nums[i]) #\u4ece\u5934\u5230\u8fd9\u5bb6\u524d\u9762\u7684\u7b2c\u4e8c\u5bb6\u6700\u5927\u7684\u4ef7\u94b1\u52a0\u4e0a\u8fd9\u4e00\u5bb6\u7684\u4ef7\u94b1 return max(maxs) \u52a8\u6001\u89c4\u5212 class Solution: def rob(self, nums: List[int]) -> int: dp = [0 for i in range(len(nums)+2)] # dp\u4e3a\u4ece\u7b2ci\u4e2a\u623f\u5b50\u5f00\u59cb\u62a2 \u62a2\u5230\u7684\u94b1 for i in range(len(nums)-1,-1,-1): dp[i] = max(dp[i+1],dp[i+2]+nums[i]) return dp[0]","title":"\u4ee3\u7801:"},{"location":"sf/13/#ii","text":"","title":"\u6253\u5bb6\u52ab\u820dII"},{"location":"sf/13/#_5","text":"https://leetcode-cn.com/problems/house-robber-ii/","title":"\u9898\u76ee\uff1a"},{"location":"sf/13/#_6","text":"\u8ddf\u4e0a\u9762\u7684\u9898\u76ee\u975e\u5e38\u7c7b\u4f3c\uff0c\u53ea\u662f\u52a0\u4e86\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5c31\u662f\u7b2c\u4e00\u5bb6\u548c\u6700\u540e\u4e00\u5bb6\u4e0d\u80fd\u540c\u65f6\u6253\u52ab\u3002 \u8fd9\u91cc\u5148\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8868\u793a\u4ecestart \u5230end \u8303\u56f4\u91cc\u9762\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u5728\u4e3b\u51fd\u6570\u91cc\u9762\u8fdb\u884c\u9009\u62e9 \u5982\u679c\u6253\u52ab\u7b2c\u4e00\u5bb6\uff0c\u5c31\u4e0d\u80fd\u6253\u52ab\u6700\u540e\u4e00\u5bb6\u4ee5\u53ca\u4e0d\u6253\u52ab\u7b2c\u4e00\u5bb6\u53bb\u6253\u52ab\u6700\u540e\u4e00\u5bb6\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u6700\u5927\u503c","title":"\u601d\u8def\uff1a"},{"location":"sf/13/#_7","text":"class Solution: def rob(self, nums: List[int]) -> int: if len(nums) == 1: return nums[0] return max(self.dp(0,len(nums)-2,nums),self.dp(1,len(nums)-1,nums)) def dp(self,start,end,nums): dp = [0 for _ in range(len(nums)+2)] for i in range(end,start-1,-1): dp[i] = max(dp[i+1],dp[i+2]+nums[i]) return dp[start]","title":"\u4ee3\u7801\uff1a"},{"location":"sf/14/","text":"\u5916\u89c2\u6570\u5217 https://leetcode-cn.com/problems/count-and-say/ \u8fd9\u9898\u6709\u610f\u601d \u53ef\u4ee5\u6253\u8868\uff0c\u4e0d\u8fc7\u6253\u8868\u7684\u8fc7\u7a0b\u4e5f\u76f8\u5f53\u4e8e\u505a\u51fa\u6765\u4e86 class Solution: def countAndSay(self,n: int) -> str: if n == 1: return '1' s = self.countAndSay(n - 1) n,res = 0,'' for ii,ss in enumerate(s): if ss != s[n]: res += str(ii-n) + s[n] n = ii res += str(len(s) - n) + s[-1] return res print(Solution().countAndSay(3)) \u601d\u8def\uff1a \u200b \u9012\u5f52\uff0c\u5c06\u4e0a\u4e00\u5c42\u8ba1\u7b97\u51fa\u6765\u7684\u4e1c\u897f\u4f5c\u4e3a\u8fed\u4ee3\u5bf9\u8c61\u3002","title":"\u5916\u89c2\u6570\u5217"},{"location":"sf/14/#_1","text":"https://leetcode-cn.com/problems/count-and-say/ \u8fd9\u9898\u6709\u610f\u601d \u53ef\u4ee5\u6253\u8868\uff0c\u4e0d\u8fc7\u6253\u8868\u7684\u8fc7\u7a0b\u4e5f\u76f8\u5f53\u4e8e\u505a\u51fa\u6765\u4e86 class Solution: def countAndSay(self,n: int) -> str: if n == 1: return '1' s = self.countAndSay(n - 1) n,res = 0,'' for ii,ss in enumerate(s): if ss != s[n]: res += str(ii-n) + s[n] n = ii res += str(len(s) - n) + s[-1] return res print(Solution().countAndSay(3)) \u601d\u8def\uff1a \u200b \u9012\u5f52\uff0c\u5c06\u4e0a\u4e00\u5c42\u8ba1\u7b97\u51fa\u6765\u7684\u4e1c\u897f\u4f5c\u4e3a\u8fed\u4ee3\u5bf9\u8c61\u3002","title":"\u5916\u89c2\u6570\u5217"},{"location":"sf/15/","text":"\u8ba1\u6570\u8d28\u6570 https://leetcode-cn.com/problems/count-primes/ \u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\uff0c\u9690\u7ea6\u611f\u89c9\u4f1a\u8d85\u65f6\uff0c\u679c\u7136\u4e0d\u51fa\u6211\u6240\u6599 class Solution: def countPrimes(self, n: int) -> int: counts = 0 for i in range(n): if self.isprime(i): counts += 1 return counts def isprime(self,n): from itertools import count if n <=1: return False for i in count(2): if i* i > n: return True if n % i == 0: return False \u6211\u8fd8\u7279\u610f\u7528\u4e86itertools\u5e93\uff0c\u6ca1\u60f3\u5230\u8fd8\u662f\u8d85\u65f6\u4e86 \u5f53\u65f6\u8fd8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u7d20\u6570\u7b5b\u8fd9\u79cd\u4e1c\u897f\u3002 \u770b\u61c2\u4e86\u539f\u7406\u540e\u5c31\u8fc7\u4e86 class Solution: def countPrimes(self, n: int) -> int: res = [1] * n count = 0 for i in range(2,n): if res[i]: count += 1 for j in range(i*i,n,i): res[j] = 0 return count \u57c3\u6c0f\u7b5b\u7684\u539f\u7406\uff1a\u4ece 2 \u5f00\u59cb\uff0c\u5c06\u6bcf\u4e2a\u8d28\u6570\u7684\u500d\u6570\u90fd\u6807\u8bb0\u4e3a\u5408\u6570\u3002\u540c\u6837\u7684\uff0c\u6807\u8bb0\u5230 \u6839\u53f7n\u505c\u6b62\u3002 \u5047\u8bbe\u4e00\u4e2a\u6570 i \u4e3a\u8d28\u6570\u65f6\uff0c\u90a3\u4e48\u6b64\u65f6\u5927\u4e8e i \u4e14\u662f i \u7684\u500d\u6570\u7684\u6570\u4e00\u5b9a\u4e0d\u662f\u8d28\u6570\uff0c\u4f8b\u5982 2i\uff0c3i...\u3002\u90a3\u4e48\u6211\u4eec\u5c06\u8fd9\u4e9b\u4e0d\u662f\u8d28\u6570\u7684\u6570\u8fdb\u884c\u6807\u8bb0\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6807\u8bb0\u5e94\u8be5\u4ece i * i \u5f00\u59cb\uff0c\u800c\u4e0d\u662f 2 * i \u5f00\u59cb\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u6570 i \u6765\u8bf4\uff0c\u679a\u4e3e\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6b64\u65f6\u524d\u9762\u6570\u5b57\u7684\u500d\u6570\u90fd\u5df2\u7ecf\u8fdb\u884c\u4e86\u6807\u8bb0\u3002\u5bf9\u4e8e i \u800c\u8a00\uff0c2\u2217i \u4e5f\u80af\u5b9a\u4f1a\u88ab\u5728\u679a\u4e3e\u6570\u5b57 2 \u65f6\u8fdb\u884c\u6807\u8bb0\uff0c[2, i) \u533a\u95f4\u7684\u6570\u540c\u7406\u3002","title":"\u8ba1\u6570\u8d28\u6570"},{"location":"sf/15/#_1","text":"https://leetcode-cn.com/problems/count-primes/ \u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\uff0c\u9690\u7ea6\u611f\u89c9\u4f1a\u8d85\u65f6\uff0c\u679c\u7136\u4e0d\u51fa\u6211\u6240\u6599 class Solution: def countPrimes(self, n: int) -> int: counts = 0 for i in range(n): if self.isprime(i): counts += 1 return counts def isprime(self,n): from itertools import count if n <=1: return False for i in count(2): if i* i > n: return True if n % i == 0: return False \u6211\u8fd8\u7279\u610f\u7528\u4e86itertools\u5e93\uff0c\u6ca1\u60f3\u5230\u8fd8\u662f\u8d85\u65f6\u4e86 \u5f53\u65f6\u8fd8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u7d20\u6570\u7b5b\u8fd9\u79cd\u4e1c\u897f\u3002 \u770b\u61c2\u4e86\u539f\u7406\u540e\u5c31\u8fc7\u4e86 class Solution: def countPrimes(self, n: int) -> int: res = [1] * n count = 0 for i in range(2,n): if res[i]: count += 1 for j in range(i*i,n,i): res[j] = 0 return count \u57c3\u6c0f\u7b5b\u7684\u539f\u7406\uff1a\u4ece 2 \u5f00\u59cb\uff0c\u5c06\u6bcf\u4e2a\u8d28\u6570\u7684\u500d\u6570\u90fd\u6807\u8bb0\u4e3a\u5408\u6570\u3002\u540c\u6837\u7684\uff0c\u6807\u8bb0\u5230 \u6839\u53f7n\u505c\u6b62\u3002 \u5047\u8bbe\u4e00\u4e2a\u6570 i \u4e3a\u8d28\u6570\u65f6\uff0c\u90a3\u4e48\u6b64\u65f6\u5927\u4e8e i \u4e14\u662f i \u7684\u500d\u6570\u7684\u6570\u4e00\u5b9a\u4e0d\u662f\u8d28\u6570\uff0c\u4f8b\u5982 2i\uff0c3i...\u3002\u90a3\u4e48\u6211\u4eec\u5c06\u8fd9\u4e9b\u4e0d\u662f\u8d28\u6570\u7684\u6570\u8fdb\u884c\u6807\u8bb0\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6807\u8bb0\u5e94\u8be5\u4ece i * i \u5f00\u59cb\uff0c\u800c\u4e0d\u662f 2 * i \u5f00\u59cb\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u6570 i \u6765\u8bf4\uff0c\u679a\u4e3e\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6b64\u65f6\u524d\u9762\u6570\u5b57\u7684\u500d\u6570\u90fd\u5df2\u7ecf\u8fdb\u884c\u4e86\u6807\u8bb0\u3002\u5bf9\u4e8e i \u800c\u8a00\uff0c2\u2217i \u4e5f\u80af\u5b9a\u4f1a\u88ab\u5728\u679a\u4e3e\u6570\u5b57 2 \u65f6\u8fdb\u884c\u6807\u8bb0\uff0c[2, i) \u533a\u95f4\u7684\u6570\u540c\u7406\u3002","title":"\u8ba1\u6570\u8d28\u6570"},{"location":"sf/16/","text":"\u5206\u53d1\u997c\u5e72 https://leetcode-cn.com/problems/assign-cookies/ class Solution: def findContentChildren(g, s) -> int: g = sorted(g) s = sorted(s) n = 0 for i in range(len(s)): if g[n] <= s[i]: n += 1 if n == len(g): return n return n \u8d2a\u5fc3\u7b97\u6cd5\u7684\u9898\u76ee\uff0c\u8003\u8651\u5c40\u90e8\u6700\u4f18","title":"\u5206\u53d1\u997c\u5e72"},{"location":"sf/16/#_1","text":"https://leetcode-cn.com/problems/assign-cookies/ class Solution: def findContentChildren(g, s) -> int: g = sorted(g) s = sorted(s) n = 0 for i in range(len(s)): if g[n] <= s[i]: n += 1 if n == len(g): return n return n \u8d2a\u5fc3\u7b97\u6cd5\u7684\u9898\u76ee\uff0c\u8003\u8651\u5c40\u90e8\u6700\u4f18","title":"\u5206\u53d1\u997c\u5e72"},{"location":"sf/17/","text":"\u6309\u5e8f\u6253\u5370 https://leetcode-cn.com/problems/print-in-order/ \u4eca\u5929\u6765\u70b9\u4e0d\u4e00\u6837\u7684\uff0c\u6765\u4e2a\u591a\u7ebf\u7a0b\u7684\u9898\u76ee \u9898\u76ee\u5f88\u7b80\u5355\u554a\uff0c\u4e3b\u8981\u601d\u8def\u5c31\u662f\u7528Queue\u7684\u7279\u6027 \u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0cget()\u662f\u963b\u585e\u7684 class Foo: def __init__(self): from queue import Queue self.q1 = Queue() self.q2 = Queue() def first(self, printFirst: 'Callable[[], None]') -> None: # printFirst() outputs \"first\". Do not change or remove this line. printFirst() self.q1.put(0) def second(self, printSecond: 'Callable[[], None]') -> None: self.q1.get() # printSecond() outputs \"second\". Do not change or remove this line. printSecond() self.q2.put(0) def third(self, printThird: 'Callable[[], None]') -> None: self.q2.get() # printThird() outputs \"third\". Do not change or remove this line. printThird()","title":"\u6309\u5e8f\u6253\u5370"},{"location":"sf/17/#_1","text":"https://leetcode-cn.com/problems/print-in-order/ \u4eca\u5929\u6765\u70b9\u4e0d\u4e00\u6837\u7684\uff0c\u6765\u4e2a\u591a\u7ebf\u7a0b\u7684\u9898\u76ee \u9898\u76ee\u5f88\u7b80\u5355\u554a\uff0c\u4e3b\u8981\u601d\u8def\u5c31\u662f\u7528Queue\u7684\u7279\u6027 \u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0cget()\u662f\u963b\u585e\u7684 class Foo: def __init__(self): from queue import Queue self.q1 = Queue() self.q2 = Queue() def first(self, printFirst: 'Callable[[], None]') -> None: # printFirst() outputs \"first\". Do not change or remove this line. printFirst() self.q1.put(0) def second(self, printSecond: 'Callable[[], None]') -> None: self.q1.get() # printSecond() outputs \"second\". Do not change or remove this line. printSecond() self.q2.put(0) def third(self, printThird: 'Callable[[], None]') -> None: self.q2.get() # printThird() outputs \"third\". Do not change or remove this line. printThird()","title":"\u6309\u5e8f\u6253\u5370"},{"location":"sf/18/","text":"\u53d8\u66f4\u6027\u522b https://leetcode-cn.com/problems/swap-salary/ \u518d\u6765\u70b9\u4e0d\u4e00\u6837\u7684\uff0csql\u8bed\u53e5\u5237\u9898 \u8fd8\u662f\u5148\u4ece\u7b80\u5355\u7684\u5f00\u59cb # Write your MySQL query statement be UPDATE salary SET sex = CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END;","title":"\u4ea4\u6362\u6027\u522b"},{"location":"sf/18/#_1","text":"https://leetcode-cn.com/problems/swap-salary/ \u518d\u6765\u70b9\u4e0d\u4e00\u6837\u7684\uff0csql\u8bed\u53e5\u5237\u9898 \u8fd8\u662f\u5148\u4ece\u7b80\u5355\u7684\u5f00\u59cb # Write your MySQL query statement be UPDATE salary SET sex = CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END;","title":"\u53d8\u66f4\u6027\u522b"},{"location":"sf/19/","text":"\u6253\u5370\u96f6\u548c\u5947\u5076\u6570 \u591a\u7ebf\u7a0b\u95ee\u9898\uff0c\u5229\u7528\u7ebf\u7a0b\u9501\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3 https://leetcode-cn.com/problems/print-zero-even-odd/ class ZeroEvenOdd: def __init__(self, n): from threading import Lock self.n = n self.zerolock = Lock() self.oddlock = Lock() self.evenlock = Lock() self.oddlock.acquire() self.evenlock.acquire() # printNumber(x) outputs \"x\", where x is an integer. def zero(self, printNumber: 'Callable[[int], None]') -> None: for i in range(1,self.n+1): self.zerolock.acquire() printNumber(0) if i % 2 == 0: self.evenlock.release() else: self.oddlock.release() def even(self, printNumber: 'Callable[[int], None]') -> None: #\u5076 for i in range(1,self.n+1): if i % 2 == 0: self.evenlock.acquire() printNumber(i) self.zerolock.release() def odd(self, printNumber: 'Callable[[int], None]') -> None: #\u5947 for i in range(1,self.n + 1): if i % 2 != 0: self.oddlock.acquire() printNumber(i) self.zerolock.release()","title":"\u6253\u5370\u96f6\u548c\u5947\u5076\u6570"},{"location":"sf/19/#_1","text":"\u591a\u7ebf\u7a0b\u95ee\u9898\uff0c\u5229\u7528\u7ebf\u7a0b\u9501\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3 https://leetcode-cn.com/problems/print-zero-even-odd/ class ZeroEvenOdd: def __init__(self, n): from threading import Lock self.n = n self.zerolock = Lock() self.oddlock = Lock() self.evenlock = Lock() self.oddlock.acquire() self.evenlock.acquire() # printNumber(x) outputs \"x\", where x is an integer. def zero(self, printNumber: 'Callable[[int], None]') -> None: for i in range(1,self.n+1): self.zerolock.acquire() printNumber(0) if i % 2 == 0: self.evenlock.release() else: self.oddlock.release() def even(self, printNumber: 'Callable[[int], None]') -> None: #\u5076 for i in range(1,self.n+1): if i % 2 == 0: self.evenlock.acquire() printNumber(i) self.zerolock.release() def odd(self, printNumber: 'Callable[[int], None]') -> None: #\u5947 for i in range(1,self.n + 1): if i % 2 != 0: self.oddlock.acquire() printNumber(i) self.zerolock.release()","title":"\u6253\u5370\u96f6\u548c\u5947\u5076\u6570"},{"location":"sf/2/","text":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898 \u4eca\u5929\u5728\u6d1b\u8c37\u5237\u9898\uff0c\u4ece\u9898\u5355\u91cc\u9762\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5237\uff0c\u7136\u540e\u53d1\u73b0\u4e86\u8fd9\u9053\u9898 \u9636\u4e58\u4e4b\u548c \u9898\u76ee\u7684\u8981\u6c42\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c061-n\u7684\u6240\u6709\u6570\u7684\u9636\u4e58\u76f8\u52a0\u8d77\u6765\u3002 \u56e0\u4e3a\u4e4b\u524d\u505a\u8fc7\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u60f3\u5f53\u7136\u7684\u53bb\u4e0a\u624b\u4e86\u3002 \u5f00\u59cb\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a #include <iostream> #include <cstdio> using namespace std; int re_jie(int n){ if(n==1){ return 1; } else if(n==0){ return 0; } else{ return n*re_jie(n-1); } } int main(){ int i; long long sum; cin>>i; for(int n=1;n<=i;n++){ sum+=re_jie(n); } cout<<sum; return 0; } \u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u6837A\u8fc7\u53bb\u4e86 \u7ed3\u679c\u540e\u4e24\u4e2aWA\u4e86\uff0c\u7136\u540e\u6211\u518d\u4ed4\u7ec6\u4e00\u770b\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u53ca\u9898\uff0c\u6240\u4ee5\u80af\u5b9a\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\u7684\u3002 \u4e8e\u662f\u6211\u6709\u770b\u4e86\u770b\u9898\uff0c\u53d1\u73b0\u4e86\u4e0b\u9762\u7684\u63d0\u793a\u3002 \u539f\u6765\u8fd9\u4e2a\u9898\u8f93\u5165\u5927\u4e8e20\u4ee5\u540e\u6570\u636e\u8303\u56f4\u5c31\u8d85\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e2a\u9ad8\u7cbe\u5ea6\u95ee\u9898\u4e86\u3002 \u4e00\u770b\u9898\u76ee\u7684\u9650\u5236\uff0cn<=50 \u6570\u636e\u91cf\u4e0d\u662f\u5f88\u5927\u554a\u3002 \u4e8e\u662f\u60f3\u8d77\u4e86\u7f51\u4e0a\u5e38\u8bf4\u7684\u6253\u8868\u4e86\u3002 \u867d\u7136\u6211\u77e5\u9053\u4ec0\u4e48\u662f\u6253\u8868\uff0c\u4f46\u4e5f\u4e00\u76f4\u6ca1\u6709\u7528\u5230\u8fc7\u3002 \u53c8\u60f3\u8d77\u6765python\u91cc\u81ea\u5e26\u9ad8\u7cbe\u5ea6\u6570\u636e\u7c7b\u578b\uff0c\u4e8e\u662f\u6211\u60f3\u8d77\u4e86\u7528python\u5b9e\u73b0\u6253\u8868\u7684\u4efb\u52a1 python\u4ee3\u7801\u5982\u4e0b def re_jie(n): if n==1: return 1 else: return n*re_jie(n-1) def re_sum(m): sum=0 for i in range(1,m+1): sum+=re_jie(i) return sum for a in range(1,51): print('\"{}\",'.format(re_sum(a))) \u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u6240\u6709\u7684\u7ed3\u679c \u7136\u540e\u5c06\u8fd9\u4e9b\u7ed3\u679c\u590d\u5236\u5230cpp\u7a0b\u5e8f\u4e2d\u53bb #include <iostream> #include <cstdio> #include <stdlib.h> #include <string> using namespace std; int main(){ string st[60] = {\"0\", \"1\", \"3\", \"9\", \"33\", \"153\", \"873\", \"5913\", \"46233\", \"409113\", \"4037913\", \"43954713\", \"522956313\", \"6749977113\", \"93928268313\", \"1401602636313\", \"22324392524313\", \"378011820620313\", \"6780385526348313\", \"128425485935180313\", \"2561327494111820313\", \"53652269665821260313\", \"1177652997443428940313\", \"27029669736328405580313\", \"647478071469567844940313\", \"16158688114800553828940313\", \"419450149241406189412940313\", \"11308319599659758350180940313\", \"316196664211373618851684940313\", \"9157958657951075573395300940313\", \"274410818470142134209703780940313\", \"8497249472648064951935266660940313\", \"271628086406341595119153278820940313\", \"8954945705218228090637347680100940313\", \"304187744744822368938255957323620940313\", \"10637335711130967298604907294846820940313\", \"382630662501032184766604355445682020940313\", \"14146383753727377231082583937026584420940313\", \"537169001220328488991089808037100875620940313\", \"20935051082417771847631371547939998232420940313\", \"836850334330315506193242641144055892504420940313\", \"34289376947494122614363304694584807557656420940313\", \"1439295494700374021157505910939096377494040420940313\", \"61854558558074209658512637979453093884758552420940313\", \"2720126133346522977702138448994068984204397080420940313\", \"122342346998826717539665299944651784048588130840420940313\", \"5624964506810915667389970728744906677010239883800420940313\", \"264248206017979096310354325882356886646207872272920420940313\", \"12678163798554051767172643373255731925167694226950680420940313\", \"620960027832821612639424806694551108812720525606160920420940313\", \"31035053229546199656252032972759319953190362094566672920420940313\"}; int n; cin>>n; cout<<st[n]; system(\"pause\"); return 0; } \u6700\u540eAC\u6210\u529f\u4e86\uff0c\u7b2c\u4e00\u6b21\u505a\u6253\u8868\u9898\uff0c\u611f\u89c9\u826f\u597d\uff0c\u5341\u5206\u8212\u723d\u554a\uff01\u3002 \u6700\u540e\u603b\u7ed3\u4e00\u4e0b \u6570\u636e\u8fc7\u5927\u7684\u8bb0\u5f97\u4f7f\u7528\u9ad8\u7cbe\u5ea6 \u6570\u636e\u91cf\u4e0d\u5927\u7684\u7528\u6253\u8868\u6bd4\u8f83\u5feb","title":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898"},{"location":"sf/2/#_1","text":"\u4eca\u5929\u5728\u6d1b\u8c37\u5237\u9898\uff0c\u4ece\u9898\u5355\u91cc\u9762\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5237\uff0c\u7136\u540e\u53d1\u73b0\u4e86\u8fd9\u9053\u9898 \u9636\u4e58\u4e4b\u548c \u9898\u76ee\u7684\u8981\u6c42\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c061-n\u7684\u6240\u6709\u6570\u7684\u9636\u4e58\u76f8\u52a0\u8d77\u6765\u3002 \u56e0\u4e3a\u4e4b\u524d\u505a\u8fc7\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u60f3\u5f53\u7136\u7684\u53bb\u4e0a\u624b\u4e86\u3002 \u5f00\u59cb\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a #include <iostream> #include <cstdio> using namespace std; int re_jie(int n){ if(n==1){ return 1; } else if(n==0){ return 0; } else{ return n*re_jie(n-1); } } int main(){ int i; long long sum; cin>>i; for(int n=1;n<=i;n++){ sum+=re_jie(n); } cout<<sum; return 0; } \u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u6837A\u8fc7\u53bb\u4e86 \u7ed3\u679c\u540e\u4e24\u4e2aWA\u4e86\uff0c\u7136\u540e\u6211\u518d\u4ed4\u7ec6\u4e00\u770b\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u53ca\u9898\uff0c\u6240\u4ee5\u80af\u5b9a\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\u7684\u3002 \u4e8e\u662f\u6211\u6709\u770b\u4e86\u770b\u9898\uff0c\u53d1\u73b0\u4e86\u4e0b\u9762\u7684\u63d0\u793a\u3002 \u539f\u6765\u8fd9\u4e2a\u9898\u8f93\u5165\u5927\u4e8e20\u4ee5\u540e\u6570\u636e\u8303\u56f4\u5c31\u8d85\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e2a\u9ad8\u7cbe\u5ea6\u95ee\u9898\u4e86\u3002 \u4e00\u770b\u9898\u76ee\u7684\u9650\u5236\uff0cn<=50 \u6570\u636e\u91cf\u4e0d\u662f\u5f88\u5927\u554a\u3002 \u4e8e\u662f\u60f3\u8d77\u4e86\u7f51\u4e0a\u5e38\u8bf4\u7684\u6253\u8868\u4e86\u3002 \u867d\u7136\u6211\u77e5\u9053\u4ec0\u4e48\u662f\u6253\u8868\uff0c\u4f46\u4e5f\u4e00\u76f4\u6ca1\u6709\u7528\u5230\u8fc7\u3002 \u53c8\u60f3\u8d77\u6765python\u91cc\u81ea\u5e26\u9ad8\u7cbe\u5ea6\u6570\u636e\u7c7b\u578b\uff0c\u4e8e\u662f\u6211\u60f3\u8d77\u4e86\u7528python\u5b9e\u73b0\u6253\u8868\u7684\u4efb\u52a1 python\u4ee3\u7801\u5982\u4e0b def re_jie(n): if n==1: return 1 else: return n*re_jie(n-1) def re_sum(m): sum=0 for i in range(1,m+1): sum+=re_jie(i) return sum for a in range(1,51): print('\"{}\",'.format(re_sum(a))) \u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u6240\u6709\u7684\u7ed3\u679c \u7136\u540e\u5c06\u8fd9\u4e9b\u7ed3\u679c\u590d\u5236\u5230cpp\u7a0b\u5e8f\u4e2d\u53bb #include <iostream> #include <cstdio> #include <stdlib.h> #include <string> using namespace std; int main(){ string st[60] = {\"0\", \"1\", \"3\", \"9\", \"33\", \"153\", \"873\", \"5913\", \"46233\", \"409113\", \"4037913\", \"43954713\", \"522956313\", \"6749977113\", \"93928268313\", \"1401602636313\", \"22324392524313\", \"378011820620313\", \"6780385526348313\", \"128425485935180313\", \"2561327494111820313\", \"53652269665821260313\", \"1177652997443428940313\", \"27029669736328405580313\", \"647478071469567844940313\", \"16158688114800553828940313\", \"419450149241406189412940313\", \"11308319599659758350180940313\", \"316196664211373618851684940313\", \"9157958657951075573395300940313\", \"274410818470142134209703780940313\", \"8497249472648064951935266660940313\", \"271628086406341595119153278820940313\", \"8954945705218228090637347680100940313\", \"304187744744822368938255957323620940313\", \"10637335711130967298604907294846820940313\", \"382630662501032184766604355445682020940313\", \"14146383753727377231082583937026584420940313\", \"537169001220328488991089808037100875620940313\", \"20935051082417771847631371547939998232420940313\", \"836850334330315506193242641144055892504420940313\", \"34289376947494122614363304694584807557656420940313\", \"1439295494700374021157505910939096377494040420940313\", \"61854558558074209658512637979453093884758552420940313\", \"2720126133346522977702138448994068984204397080420940313\", \"122342346998826717539665299944651784048588130840420940313\", \"5624964506810915667389970728744906677010239883800420940313\", \"264248206017979096310354325882356886646207872272920420940313\", \"12678163798554051767172643373255731925167694226950680420940313\", \"620960027832821612639424806694551108812720525606160920420940313\", \"31035053229546199656252032972759319953190362094566672920420940313\"}; int n; cin>>n; cout<<st[n]; system(\"pause\"); return 0; } \u6700\u540eAC\u6210\u529f\u4e86\uff0c\u7b2c\u4e00\u6b21\u505a\u6253\u8868\u9898\uff0c\u611f\u89c9\u826f\u597d\uff0c\u5341\u5206\u8212\u723d\u554a\uff01\u3002 \u6700\u540e\u603b\u7ed3\u4e00\u4e0b \u6570\u636e\u8fc7\u5927\u7684\u8bb0\u5f97\u4f7f\u7528\u9ad8\u7cbe\u5ea6 \u6570\u636e\u91cf\u4e0d\u5927\u7684\u7528\u6253\u8868\u6bd4\u8f83\u5feb","title":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898"},{"location":"sf/20/","text":"\u96f6\u94b1\u5151\u6362 https://leetcode-cn.com/problems/coin-change/ \u4ee5\u6211\u76ee\u524d\u7684\u6c34\u5e73\u505a\u51fa\u6765\u6709\u70b9\u5403\u529b\uff0c\u770b\u4e86\u601d\u8def\u624d\u505a\u51fa\u6765 class Solution: def coinChange(self, coins: List[int], amount: int) -> int: dp = [float('inf')] * (amount + 1) dp[0] = 0 for i in range(amount+1): for coin in coins: # if i >= coin: dp[i] = min(dp[i],dp[i-coin]+1) return -1 if (dp[-1] == float(\"inf\")) else dp[-1] \u4f2a\u4ee3\u7801\u5982\u4e0b # \u4f2a\u7801\u6846\u67b6 def coinChange(coins: List[int], amount: int): # \u5b9a\u4e49\uff1a\u8981\u51d1\u51fa\u91d1\u989d n\uff0c\u81f3\u5c11\u8981 dp(n) \u4e2a\u786c\u5e01 def dp(n): # \u505a\u9009\u62e9\uff0c\u9009\u62e9\u9700\u8981\u786c\u5e01\u6700\u5c11\u7684\u90a3\u4e2a\u7ed3\u679c for coin in coins: res = min(res, 1 + dp(n - coin)) return res # \u9898\u76ee\u8981\u6c42\u7684\u6700\u7ec8\u7ed3\u679c\u662f dp(amount) return dp(amount)","title":"\u96f6\u94b1\u5151\u6362"},{"location":"sf/20/#_1","text":"https://leetcode-cn.com/problems/coin-change/ \u4ee5\u6211\u76ee\u524d\u7684\u6c34\u5e73\u505a\u51fa\u6765\u6709\u70b9\u5403\u529b\uff0c\u770b\u4e86\u601d\u8def\u624d\u505a\u51fa\u6765 class Solution: def coinChange(self, coins: List[int], amount: int) -> int: dp = [float('inf')] * (amount + 1) dp[0] = 0 for i in range(amount+1): for coin in coins: # if i >= coin: dp[i] = min(dp[i],dp[i-coin]+1) return -1 if (dp[-1] == float(\"inf\")) else dp[-1] \u4f2a\u4ee3\u7801\u5982\u4e0b # \u4f2a\u7801\u6846\u67b6 def coinChange(coins: List[int], amount: int): # \u5b9a\u4e49\uff1a\u8981\u51d1\u51fa\u91d1\u989d n\uff0c\u81f3\u5c11\u8981 dp(n) \u4e2a\u786c\u5e01 def dp(n): # \u505a\u9009\u62e9\uff0c\u9009\u62e9\u9700\u8981\u786c\u5e01\u6700\u5c11\u7684\u90a3\u4e2a\u7ed3\u679c for coin in coins: res = min(res, 1 + dp(n - coin)) return res # \u9898\u76ee\u8981\u6c42\u7684\u6700\u7ec8\u7ed3\u679c\u662f dp(amount) return dp(amount)","title":"\u96f6\u94b1\u5151\u6362"},{"location":"sf/21/","text":"\u7ffb\u8f6c\u4e8c\u53c9\u6811 \u5f00\u59cb\u5b66\u4e60\u4e8c\u53c9\u6811\u4e86 \u5148\u6765\u4e2a\u7b80\u5355\u9898 https://leetcode-cn.com/problems/invert-binary-tree/ \u5f88\u7b80\u5355 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def invertTree(self, root: TreeNode) -> TreeNode: if root == None: return None temp = root.left root.left = root.right root.right = temp self.invertTree(root.left) self.invertTree(root.right) return root","title":"\u7ffb\u8f6c\u4e8c\u53c9\u6811"},{"location":"sf/21/#_1","text":"\u5f00\u59cb\u5b66\u4e60\u4e8c\u53c9\u6811\u4e86 \u5148\u6765\u4e2a\u7b80\u5355\u9898 https://leetcode-cn.com/problems/invert-binary-tree/ \u5f88\u7b80\u5355 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def invertTree(self, root: TreeNode) -> TreeNode: if root == None: return None temp = root.left root.left = root.right root.right = temp self.invertTree(root.left) self.invertTree(root.right) return root","title":"\u7ffb\u8f6c\u4e8c\u53c9\u6811"},{"location":"sf/22/","text":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 https://leetcode-cn.com/problems/validate-binary-search-tree/ # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isValidBST(self, root: TreeNode) -> bool: return self.search(root,-(2**32),2**32) def search(self,root,mins,maxs): if root == None: return True if root.val > mins and root.val < maxs: pass else: return False return all([self.search(root.left,mins,root.val),self.search(root.right,root.val,maxs)]) \u6700\u540e\u7528\u4e86\u4e2aall \u4e5f\u662f\u7b80\u6d01\u4e86\u4ee3\u7801","title":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"sf/22/#_1","text":"https://leetcode-cn.com/problems/validate-binary-search-tree/ # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isValidBST(self, root: TreeNode) -> bool: return self.search(root,-(2**32),2**32) def search(self,root,mins,maxs): if root == None: return True if root.val > mins and root.val < maxs: pass else: return False return all([self.search(root.left,mins,root.val),self.search(root.right,root.val,maxs)]) \u6700\u540e\u7528\u4e86\u4e2aall \u4e5f\u662f\u7b80\u6d01\u4e86\u4ee3\u7801","title":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"sf/23/","text":"\u4ea4\u66ff\u6253\u5370\u5b57\u7b26\u4e32 https://leetcode-cn.com/problems/fizz-buzz-multithreaded/ \u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u9898\u76ee\uff0c\u7c7b\u4f3c\u4e8e\u4ea4\u66ff\u6253\u5370\u6570\u5b57\u90a3\u4e2a\u9898\u76ee class FizzBuzz: def __init__(self, n: int): self.n = n from threading import Lock self.fizzlock = Lock() self.buzzlock = Lock() self.fzlock = Lock() self.nofzlock = Lock() self.fizzlock.acquire() self.buzzlock.acquire() self.fzlock.acquire() # printFizz() outputs \"fizz\" def fizz(self, printFizz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 3 == 0 and i % 5 != 0: self.fizzlock.acquire() printFizz() self.nofzlock.release() # printBuzz() outputs \"buzz\" def buzz(self, printBuzz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 5 == 0 and i % 3 != 0: self.buzzlock.acquire() printBuzz() self.nofzlock.release() # printFizzBuzz() outputs \"fizzbuzz\" def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 15 == 0: self.fzlock.acquire() printFizzBuzz() self.nofzlock.release() # printNumber(x) outputs \"x\", where x is an integer. def number(self, printNumber: 'Callable[[int], None]') -> None: for i in range(1,self.n+1): self.nofzlock.acquire() if i % 3 != 0 and i % 5 != 0: printNumber(i) self.nofzlock.release() elif i % 3 != 0 and i % 5 == 0: self.buzzlock.release() elif i % 3 == 0 and i % 5 != 0: self.fizzlock.release() elif i % 15 == 0: self.fzlock.release() \u601d\u8def\u4e00\u6478\u4e00\u6837\u5c31\u662f\u5229\u7528\u4e86\u9501\u7684\u963b\u585e\u673a\u5236","title":"\u4ea4\u66ff\u6253\u5370\u5b57\u7b26\u4e32"},{"location":"sf/23/#_1","text":"https://leetcode-cn.com/problems/fizz-buzz-multithreaded/ \u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u9898\u76ee\uff0c\u7c7b\u4f3c\u4e8e\u4ea4\u66ff\u6253\u5370\u6570\u5b57\u90a3\u4e2a\u9898\u76ee class FizzBuzz: def __init__(self, n: int): self.n = n from threading import Lock self.fizzlock = Lock() self.buzzlock = Lock() self.fzlock = Lock() self.nofzlock = Lock() self.fizzlock.acquire() self.buzzlock.acquire() self.fzlock.acquire() # printFizz() outputs \"fizz\" def fizz(self, printFizz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 3 == 0 and i % 5 != 0: self.fizzlock.acquire() printFizz() self.nofzlock.release() # printBuzz() outputs \"buzz\" def buzz(self, printBuzz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 5 == 0 and i % 3 != 0: self.buzzlock.acquire() printBuzz() self.nofzlock.release() # printFizzBuzz() outputs \"fizzbuzz\" def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None: for i in range(1,self.n+1): if i % 15 == 0: self.fzlock.acquire() printFizzBuzz() self.nofzlock.release() # printNumber(x) outputs \"x\", where x is an integer. def number(self, printNumber: 'Callable[[int], None]') -> None: for i in range(1,self.n+1): self.nofzlock.acquire() if i % 3 != 0 and i % 5 != 0: printNumber(i) self.nofzlock.release() elif i % 3 != 0 and i % 5 == 0: self.buzzlock.release() elif i % 3 == 0 and i % 5 != 0: self.fizzlock.release() elif i % 15 == 0: self.fzlock.release() \u601d\u8def\u4e00\u6478\u4e00\u6837\u5c31\u662f\u5229\u7528\u4e86\u9501\u7684\u963b\u585e\u673a\u5236","title":"\u4ea4\u66ff\u6253\u5370\u5b57\u7b26\u4e32"},{"location":"sf/24/","text":"\u65e0\u91cd\u53e0\u533a\u95f4 https://leetcode-cn.com/problems/non-overlapping-intervals/ \u5229\u7528\u4e86\u8d2a\u5fc3 \u79fb\u9664\u7684\u6570\u76ee\u5c31\u662f\u603b\u6570\u76ee\u51cf\u53bb\u6761\u4ef6\u6210\u7acb\u7684\u6570\u76ee class Solution: def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int: if len(intervals) == 0: return 0 res = 0 mins = -float(\"inf\") for i in sorted(intervals,key=lambda i:i[1]): if i[0] >= mins: res += 1 mins = i[1] return len(intervals) - res \u6ce8\u610f\u662f\u6839\u636eend\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u5f15\u7528\u522b\u4eba\u7684\u89e3\u91ca@ HONGYANG \u6bd4\u5982\u4f60\u4e00\u5929\u8981\u53c2\u52a0\u51e0\u4e2a\u6d3b\u52a8\uff0c\u8fd9\u4e2a\u6d3b\u52a8\u5f00\u59cb\u7684\u591a\u65e9\u5176\u5b9e\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u4f60\u7ed3\u675f\u7684\u591a\u65e9\uff0c\u65e9\u66687\u70b9\u5c31\u5f00\u59cb\u4e86\u7136\u540e\u4e00\u641e\u641e\u4e00\u5929\uff0c\u90a3\u4f60\u4eca\u5929\u4e5f\u5c31\u53ea\u80fd\u53c2\u52a0\u8fd9\u4e00\u4e2a\u6d3b\u52a8\uff1b\u4f46\u5982\u679c\u8fd9\u4e2a\u6d3b\u52a8\u5f00\u59cb\u7684\u4e0d\u65e9\uff0c\u6bd4\u59829\u70b9\u624d\u5f00\u59cb\uff0c\u4f46\u662f\u968f\u4fbf\u641e\u641e10\u70b9\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u4f60\u63a5\u4e0b\u6765\u5c31\u8fd8\u6709\u5927\u534a\u5929\u7684\u65f6\u95f4\u53ef\u4ee5\u53c2\u52a0\u5176\u4ed6\u6d3b\u52a8\u3002 \u8fd9\u5c31\u662f\u4e3a\u5565\u8981\u7740\u773c\u4e8eend\uff0c\u800c\u4e0d\u662fstart\u3002 \u8d2a\u5fc3\u5c31\u662f\u8003\u8651\u5f53\u524d\u6700\u4f18\u89e3","title":"\u65e0\u91cd\u53e0\u533a\u57df"},{"location":"sf/24/#_1","text":"https://leetcode-cn.com/problems/non-overlapping-intervals/ \u5229\u7528\u4e86\u8d2a\u5fc3 \u79fb\u9664\u7684\u6570\u76ee\u5c31\u662f\u603b\u6570\u76ee\u51cf\u53bb\u6761\u4ef6\u6210\u7acb\u7684\u6570\u76ee class Solution: def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int: if len(intervals) == 0: return 0 res = 0 mins = -float(\"inf\") for i in sorted(intervals,key=lambda i:i[1]): if i[0] >= mins: res += 1 mins = i[1] return len(intervals) - res \u6ce8\u610f\u662f\u6839\u636eend\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u5f15\u7528\u522b\u4eba\u7684\u89e3\u91ca@ HONGYANG \u6bd4\u5982\u4f60\u4e00\u5929\u8981\u53c2\u52a0\u51e0\u4e2a\u6d3b\u52a8\uff0c\u8fd9\u4e2a\u6d3b\u52a8\u5f00\u59cb\u7684\u591a\u65e9\u5176\u5b9e\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u4f60\u7ed3\u675f\u7684\u591a\u65e9\uff0c\u65e9\u66687\u70b9\u5c31\u5f00\u59cb\u4e86\u7136\u540e\u4e00\u641e\u641e\u4e00\u5929\uff0c\u90a3\u4f60\u4eca\u5929\u4e5f\u5c31\u53ea\u80fd\u53c2\u52a0\u8fd9\u4e00\u4e2a\u6d3b\u52a8\uff1b\u4f46\u5982\u679c\u8fd9\u4e2a\u6d3b\u52a8\u5f00\u59cb\u7684\u4e0d\u65e9\uff0c\u6bd4\u59829\u70b9\u624d\u5f00\u59cb\uff0c\u4f46\u662f\u968f\u4fbf\u641e\u641e10\u70b9\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u4f60\u63a5\u4e0b\u6765\u5c31\u8fd8\u6709\u5927\u534a\u5929\u7684\u65f6\u95f4\u53ef\u4ee5\u53c2\u52a0\u5176\u4ed6\u6d3b\u52a8\u3002 \u8fd9\u5c31\u662f\u4e3a\u5565\u8981\u7740\u773c\u4e8eend\uff0c\u800c\u4e0d\u662fstart\u3002 \u8d2a\u5fc3\u5c31\u662f\u8003\u8651\u5f53\u524d\u6700\u4f18\u89e3","title":"\u65e0\u91cd\u53e0\u533a\u95f4"},{"location":"sf/25/","text":"\u79cd\u82b1\u95ee\u9898 \uff08\u65b0\u5e74\u5feb\u4e50!2021\u7b2c\u4e00\u9898\uff09 \u65b0\u5e74\u5feb\u4e50\uff012021\u5e74\u7b2c\u4e00\u9898\uff0c\u6bcf\u65e5\u4e00\u9898\uff01\u5e0c\u671b2021\u5e74LC\u548cgithub\u53ef\u4ee5\u5168\u7eff\uff01\u52a0\u6cb9\uff01 https://leetcode-cn.com/problems/can-place-flowers/ \u4ee3\u7801\u5982\u4e0b\uff1a class Solution: def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool: flowerbed = [0] + flowerbed + [0] for i in range(1,len(flowerbed)-1): if flowerbed[i-1] == 0 and flowerbed[i] == 0 and flowerbed[i+1] == 0: n -= 1 flowerbed[i] = 1 return n <= 0 \u601d\u8def\u5f88\u66b4\u529b\uff0c\u5c31\u662f\u4e09\u4e2a0\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u63d2\u8fdb\u53bb\u3002\u3002 \u4e3b\u8981\u662f\u8fb9\u754c\u95ee\u9898\uff0c\u8fd9\u91cc\u6784\u9020\u4e86\u4e24\u4e2a\u8fb9\u754c \u65b0\u7684\u4e00\u5e74\u5f00\u5f00\u5fc3\u5fc3\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u76ee\u6807\uff0c\u8ba9\u81ea\u5df1\u66f4\u4f18\u79c0\uff01","title":"\u79cd\u82b1\u95ee\u9898\uff082021\u7b2c\u4e00\u9898\uff09"},{"location":"sf/25/#2021","text":"\u65b0\u5e74\u5feb\u4e50\uff012021\u5e74\u7b2c\u4e00\u9898\uff0c\u6bcf\u65e5\u4e00\u9898\uff01\u5e0c\u671b2021\u5e74LC\u548cgithub\u53ef\u4ee5\u5168\u7eff\uff01\u52a0\u6cb9\uff01 https://leetcode-cn.com/problems/can-place-flowers/ \u4ee3\u7801\u5982\u4e0b\uff1a class Solution: def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool: flowerbed = [0] + flowerbed + [0] for i in range(1,len(flowerbed)-1): if flowerbed[i-1] == 0 and flowerbed[i] == 0 and flowerbed[i+1] == 0: n -= 1 flowerbed[i] = 1 return n <= 0 \u601d\u8def\u5f88\u66b4\u529b\uff0c\u5c31\u662f\u4e09\u4e2a0\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u63d2\u8fdb\u53bb\u3002\u3002 \u4e3b\u8981\u662f\u8fb9\u754c\u95ee\u9898\uff0c\u8fd9\u91cc\u6784\u9020\u4e86\u4e24\u4e2a\u8fb9\u754c \u65b0\u7684\u4e00\u5e74\u5f00\u5f00\u5fc3\u5fc3\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u76ee\u6807\uff0c\u8ba9\u81ea\u5df1\u66f4\u4f18\u79c0\uff01","title":"\u79cd\u82b1\u95ee\u9898\uff08\u65b0\u5e74\u5feb\u4e50!2021\u7b2c\u4e00\u9898\uff09"},{"location":"sf/26/","text":"\u5408\u5e76\u533a\u95f4 \u9898\u76ee\uff1a \u200b https://leetcode-cn.com/problems/merge-intervals/ \u601d\u8def\uff1a \u200b \u4e00\u5f00\u59cb\u601d\u8def\u60f3\u7684\u662f\uff0c\u6839\u636e\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684left\u6392\u5e8f\u540e\uff0c\u7136\u540e\u6bd4\u8f83\u6bcf\u4e00\u4e2a\u6570\uff0c\u518d\u5411\u524d\u66f4\u65b0\uff0c\u7136\u540e\u5199\u4e86\u534a\u5929\uff0c\u4e00\u76f4WA\uff0c\u611f\u89c9\u8fd9\u4e2a\u601d\u8def\u4e0d\u592a\u884c\u4e86 \u4ee3\u7801\uff1a \u200b \u5148\u8d34\u4e0a\u9519\u8bef\u7684\u4ee3\u7801\uff1a class Solution: def merge(self, res: List[List[int]]) -> List[List[int]]: if not res: return [] res.sort(key=lambda i:i[0]) n = len(res) - 1 for i in range(0,n): if res[i][1] < res[i+1][0]: continue else: res[i+1] = [res[i][0],max(res[i][1],res[i+1][1])] res[i] = res[i-1] ress = [] for i in res: if i not in ress: ress.append(i) return ress \u5728 [[1,4],[0,2],[3,5]] \u200b \u51fa\u9519\u4e86 \u8f93\u51fa\uff1a [[3,5],[0,5]] \u9884\u671f\u7ed3\u679c\uff1a [[0,5]] \u5e94\u8be5\u662f\u601d\u8def\u7684\u9519\u8bef \u540e\u6765\u89c9\u5f97\u4e0d\u5e94\u8be5\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c \u53c8\u6539\u4e86\u5982\u4e0b\uff0c\u7ec8\u4e8e\u8fc7\u4e86 class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return [] intervals.sort(key=lambda i:i[0]) res = [] for i in intervals: if len(res) == 0 or res[-1][1] < i[0]: res.append(i) else: res[-1][1] = max(res[-1][1],i[1]) return res \u8fd9\u4e2a\u601d\u8def\u5c31\u662f\u5148\u521b\u9020\u4e00\u4e2a\u7a7a\u6570\u7ec4res \u7136\u540e\u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\u6216\u8005\u9898\u8bbe\u7684\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u65f6\u5019\uff0c\u628a\u539f\u6570\u7ec4\u7684\u503c\u52a0\u8fdb\u53bb\uff0c\u8981\u662f\u6761\u4ef6\u6210\u7acb\u7684\u8bdd\uff0c\u5219\u5c06\u76ee\u524d\u533a\u95f4\u7684right\u6539\u4e3a\u76ee\u524d\u533a\u95f4\u7684right\u548c\u539f\u6570\u7ec4\u7684right\u4e4b\u95f4\u7684\u6700\u5927\u503c\uff0c\u9884\u9632 [[1,4],[2,3]] \u8fd9\u79cd\u60c5\u51b5\u3002\u6ce8\u610f\u8fd9\u4e2a\u4e5f\u662f\u6309left\u6392\u5e8f\u7684 \u6211\u4e0a\u9762\u4ee3\u7801\u7684\u601d\u8def\u548c\u8fd9\u4e2a\u662f\u4e00\u6837\u7684\uff0c\u770b\u6765\u7c7b\u4f3c\u7684\u9898\u76ee\u5c3d\u91cf\u4e0d\u8981\u5728\u539f\u6570\u7ec4\u4e0a\u9762\u64cd\u4f5c\uff0c\u9664\u975e\u9898\u76ee\u8981\u6c42","title":"\u5408\u5e76\u533a\u95f4"},{"location":"sf/26/#_1","text":"","title":"\u5408\u5e76\u533a\u95f4"},{"location":"sf/26/#_2","text":"\u200b https://leetcode-cn.com/problems/merge-intervals/","title":"\u9898\u76ee\uff1a"},{"location":"sf/26/#_3","text":"\u200b \u4e00\u5f00\u59cb\u601d\u8def\u60f3\u7684\u662f\uff0c\u6839\u636e\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684left\u6392\u5e8f\u540e\uff0c\u7136\u540e\u6bd4\u8f83\u6bcf\u4e00\u4e2a\u6570\uff0c\u518d\u5411\u524d\u66f4\u65b0\uff0c\u7136\u540e\u5199\u4e86\u534a\u5929\uff0c\u4e00\u76f4WA\uff0c\u611f\u89c9\u8fd9\u4e2a\u601d\u8def\u4e0d\u592a\u884c\u4e86","title":"\u601d\u8def\uff1a"},{"location":"sf/26/#_4","text":"\u200b \u5148\u8d34\u4e0a\u9519\u8bef\u7684\u4ee3\u7801\uff1a class Solution: def merge(self, res: List[List[int]]) -> List[List[int]]: if not res: return [] res.sort(key=lambda i:i[0]) n = len(res) - 1 for i in range(0,n): if res[i][1] < res[i+1][0]: continue else: res[i+1] = [res[i][0],max(res[i][1],res[i+1][1])] res[i] = res[i-1] ress = [] for i in res: if i not in ress: ress.append(i) return ress \u5728 [[1,4],[0,2],[3,5]] \u200b \u51fa\u9519\u4e86 \u8f93\u51fa\uff1a [[3,5],[0,5]] \u9884\u671f\u7ed3\u679c\uff1a [[0,5]] \u5e94\u8be5\u662f\u601d\u8def\u7684\u9519\u8bef \u540e\u6765\u89c9\u5f97\u4e0d\u5e94\u8be5\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c \u53c8\u6539\u4e86\u5982\u4e0b\uff0c\u7ec8\u4e8e\u8fc7\u4e86 class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return [] intervals.sort(key=lambda i:i[0]) res = [] for i in intervals: if len(res) == 0 or res[-1][1] < i[0]: res.append(i) else: res[-1][1] = max(res[-1][1],i[1]) return res \u8fd9\u4e2a\u601d\u8def\u5c31\u662f\u5148\u521b\u9020\u4e00\u4e2a\u7a7a\u6570\u7ec4res \u7136\u540e\u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\u6216\u8005\u9898\u8bbe\u7684\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u65f6\u5019\uff0c\u628a\u539f\u6570\u7ec4\u7684\u503c\u52a0\u8fdb\u53bb\uff0c\u8981\u662f\u6761\u4ef6\u6210\u7acb\u7684\u8bdd\uff0c\u5219\u5c06\u76ee\u524d\u533a\u95f4\u7684right\u6539\u4e3a\u76ee\u524d\u533a\u95f4\u7684right\u548c\u539f\u6570\u7ec4\u7684right\u4e4b\u95f4\u7684\u6700\u5927\u503c\uff0c\u9884\u9632 [[1,4],[2,3]] \u8fd9\u79cd\u60c5\u51b5\u3002\u6ce8\u610f\u8fd9\u4e2a\u4e5f\u662f\u6309left\u6392\u5e8f\u7684 \u6211\u4e0a\u9762\u4ee3\u7801\u7684\u601d\u8def\u548c\u8fd9\u4e2a\u662f\u4e00\u6837\u7684\uff0c\u770b\u6765\u7c7b\u4f3c\u7684\u9898\u76ee\u5c3d\u91cf\u4e0d\u8981\u5728\u539f\u6570\u7ec4\u4e0a\u9762\u64cd\u4f5c\uff0c\u9664\u975e\u9898\u76ee\u8981\u6c42","title":"\u4ee3\u7801\uff1a"},{"location":"sf/27/","text":"\u4e09\u6570\u4e4b\u548c \u9898\u76ee\uff1a https://leetcode-cn.com/problems/3sum/solution/ \u601d\u8def\uff1a \u200b \u7b2c\u4e00\u773c\u770b\u5c31\u60f3\u5230\u4e86\u7528\u53cc\u6307\u9488\uff0c\u601d\u8def\u6709\u70b9\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e\uff1f \u4ee3\u7801\uff1a \u200b class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: n=len(nums) res=[] if(not nums or n<3): return [] nums.sort() res=[] for i in range(n): if(nums[i] > 0): return res if(i > 0 and nums[i]==nums[i-1]): continue L=i+1 R=n-1 while(L<R): if(nums[i]+nums[L]+nums[R]==0): res.append([nums[i],nums[L],nums[R]]) while(L<R and nums[L]==nums[L+1]): L=L+1 while(L<R and nums[R]==nums[R-1]): R=R-1 L=L+1 R=R-1 elif(nums[i]+nums[L]+nums[R]>0): R=R-1 else: L=L+1 return res","title":"\u4e09\u6570\u4e4b\u548c"},{"location":"sf/27/#_1","text":"","title":"\u4e09\u6570\u4e4b\u548c"},{"location":"sf/27/#_2","text":"https://leetcode-cn.com/problems/3sum/solution/","title":"\u9898\u76ee\uff1a"},{"location":"sf/27/#_3","text":"\u200b \u7b2c\u4e00\u773c\u770b\u5c31\u60f3\u5230\u4e86\u7528\u53cc\u6307\u9488\uff0c\u601d\u8def\u6709\u70b9\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e\uff1f","title":"\u601d\u8def\uff1a"},{"location":"sf/27/#_4","text":"\u200b class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: n=len(nums) res=[] if(not nums or n<3): return [] nums.sort() res=[] for i in range(n): if(nums[i] > 0): return res if(i > 0 and nums[i]==nums[i-1]): continue L=i+1 R=n-1 while(L<R): if(nums[i]+nums[L]+nums[R]==0): res.append([nums[i],nums[L],nums[R]]) while(L<R and nums[L]==nums[L+1]): L=L+1 while(L<R and nums[R]==nums[R-1]): R=R-1 L=L+1 R=R-1 elif(nums[i]+nums[L]+nums[R]>0): R=R-1 else: L=L+1 return res","title":"\u4ee3\u7801\uff1a"},{"location":"sf/28/","text":"\u5bf9\u89d2\u7ebf\u904d\u5386 \u9898\u76ee\uff1a \u200b https://leetcode-cn.com/problems/diagonal-traverse/ \u601d\u8def\uff1a \u200b \u6bcf\u4e2a\u5bf9\u89d2\u7ebf\u7684\u4e24\u7d22\u5f15\u4e4b\u548c\u662f\u4e00\u6837\u7684 \u4ee3\u7801\uff1a **** class Solution: def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]: if not matrix: return [] hashs = collections.defaultdict(list) row, col = len(matrix), len(matrix[0]) for i in range(row): for j in range(col): hashs[j + i].append(matrix[i][j]) res = [] flag = True for k, v in sorted(hashs.items()): if flag: res.extend(v[::-1]) else: res.extend(v) flag = not flag return res \u6ce8\u610fflag\u7684\u4f5c\u7528","title":"\u5bf9\u89d2\u7ebf\u904d\u5386"},{"location":"sf/28/#_1","text":"","title":"\u5bf9\u89d2\u7ebf\u904d\u5386"},{"location":"sf/28/#_2","text":"\u200b https://leetcode-cn.com/problems/diagonal-traverse/","title":"\u9898\u76ee\uff1a"},{"location":"sf/28/#_3","text":"\u200b \u6bcf\u4e2a\u5bf9\u89d2\u7ebf\u7684\u4e24\u7d22\u5f15\u4e4b\u548c\u662f\u4e00\u6837\u7684","title":"\u601d\u8def\uff1a"},{"location":"sf/28/#_4","text":"**** class Solution: def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]: if not matrix: return [] hashs = collections.defaultdict(list) row, col = len(matrix), len(matrix[0]) for i in range(row): for j in range(col): hashs[j + i].append(matrix[i][j]) res = [] flag = True for k, v in sorted(hashs.items()): if flag: res.extend(v[::-1]) else: res.extend(v) flag = not flag return res \u6ce8\u610fflag\u7684\u4f5c\u7528","title":"\u4ee3\u7801\uff1a"},{"location":"sf/29/","text":"\u6700\u957f\u56de\u6587\u5b50\u4e32 \u9898\u76ee\uff1a \u200b https://leetcode-cn.com/problems/longest-palindromic-substring/ \u601d\u8def\uff1a \u200b \u4e00\u5f00\u59cb\u66b4\u529b\u89e3\u6cd5\uff0c\u6bd4\u8f83\u597d\u60f3\uff0c\u7ed3\u679c\u8d85\u65f6\u4e86\u54ce\uff0c\u540e\u6765\u770b\u89c1\u4e86\u6807\u7b7e\u662f\u52a8\u6001\u89c4\u5212\uff0c\u624d\u77e5\u9053\u4e0d\u80fd\u66b4\u529b class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s maxs = -float(\"inf\") res = collections.defaultdict(list) left,right = 0,len(s)-1 while left < right: for i in range(left,right+2): if s[left:i] == s[left:i][::-1]: maxs = max(maxs,len(s[left:i])) res[maxs].append(s[left:i]) left += 1 return max(res[max(res.keys())],key=len) \u4e5f\u7528\u5230\u4e86\u53cc\u6307\u9488\uff0c\u8d85\u65f6\u5728\u60c5\u7406\u4e4b\u4e2d\u3002 \u540e\u6765\u7528\u5230\u4e86\u52a8\u6001\u89c4\u5212 class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s length = len(s) dp = [[False for _ in range(length)] for _ in range(length)] for i in range(length): dp[i][i] = True start = 0 max_len = 1 for j in range(1, length): for i in range(0, j): if s[i] == s[j]: if j - i < 3: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = False if dp[i][j]: cur_len = j - i + 1 if cur_len > max_len: max_len = cur_len start = i return s[start:start + max_len]","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"sf/29/#_1","text":"","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"sf/29/#_2","text":"\u200b https://leetcode-cn.com/problems/longest-palindromic-substring/","title":"\u9898\u76ee\uff1a"},{"location":"sf/29/#_3","text":"\u200b \u4e00\u5f00\u59cb\u66b4\u529b\u89e3\u6cd5\uff0c\u6bd4\u8f83\u597d\u60f3\uff0c\u7ed3\u679c\u8d85\u65f6\u4e86\u54ce\uff0c\u540e\u6765\u770b\u89c1\u4e86\u6807\u7b7e\u662f\u52a8\u6001\u89c4\u5212\uff0c\u624d\u77e5\u9053\u4e0d\u80fd\u66b4\u529b class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s maxs = -float(\"inf\") res = collections.defaultdict(list) left,right = 0,len(s)-1 while left < right: for i in range(left,right+2): if s[left:i] == s[left:i][::-1]: maxs = max(maxs,len(s[left:i])) res[maxs].append(s[left:i]) left += 1 return max(res[max(res.keys())],key=len) \u4e5f\u7528\u5230\u4e86\u53cc\u6307\u9488\uff0c\u8d85\u65f6\u5728\u60c5\u7406\u4e4b\u4e2d\u3002 \u540e\u6765\u7528\u5230\u4e86\u52a8\u6001\u89c4\u5212 class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s length = len(s) dp = [[False for _ in range(length)] for _ in range(length)] for i in range(length): dp[i][i] = True start = 0 max_len = 1 for j in range(1, length): for i in range(0, j): if s[i] == s[j]: if j - i < 3: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = False if dp[i][j]: cur_len = j - i + 1 if cur_len > max_len: max_len = cur_len start = i return s[start:start + max_len]","title":"\u601d\u8def\uff1a"},{"location":"sf/3/","text":"\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e2a\u5e94\u7528 \u7ffb\u4e86\u7ffb\u4ee5\u524d\u7528python\u5237leetcode\u7684\u8bb0\u5f55\uff0c\u6700\u540e\u5237\u7684\u4e00\u9053\u9898\u662f\u8fd9\u6837\u7684 https://leetcode-cn.com/problems/single-number/ \u53eb\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u5f53\u65f6\u770b\u9898\u611f\u89c9\u975e\u5e38\u7b80\u5355\u554a\uff01\u76f4\u63a5\u641e\u5c31\u884c\u4e86 \u5f53\u65f6\u4e00\u5f00\u59cb\u6211\u7684\u505a\u6cd5\u662f\u8fd9\u6837\u7684 class Solution: def singleNumber(self, nums): for i in set(nums): if nums.count(i) ==1: return i \u4fe1\u5fc3\u6ee1\u6ee1\u7684\u63d0\u4ea4\uff0c\u7ed3\u679c\u53d1\u73b0TLE\u4e86\u3002\u3002 \u7136\u540e\u770b\u8d85\u65f6\u6848\u4f8b\u7684\u8f93\u5165\uff0c\u6ca1\u6709\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u7684set\u8ddf\u6ca1\u6709\u4e00\u6837\uff0c\u6240\u4ee5\u8bf4\u80af\u5b9a\u4e0d\u80fd\u8fd9\u4e48\u505a\u3002 \u7136\u540e\u53c8\u60f3\u5230\u4e86\u54c8\u5e0c\u8868 class Solution: def singleNumber(self, nums): dic={} for num in nums: if num in dic.keys(): dic[num]+=1 else: dic[num]=1 for i in dic.keys(): if dic[i] ==1: return i \u8fd9\u6837\u4e5f\u7b97\u662fAC\u4e86\u3002\u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\uff0c\u7ed3\u679c\u65e0\u610f\u4e2d\u770b\u5230\u4e86\u522b\u7684\u9898\u89e3\u9707\u60ca\u4e86 \u4ee3\u7801\u6570\u91cf\u6bd4\u6211\u77ed\u7684\u591a\u5f97\u591a\u3002 \u7136\u540e\u5c31\u8ba4\u8bc6\u5230\u4e86\u4f4d\u8fd0\u7b97\u7684\u9b54\u529b\u3002\u3002 \u5148\u4e0a\u4ee3\u7801\uff1a class Solution: def singleNumber(self, nums): a = 0 for i in nums: a^=i return a \u7b80\u5355\u7684\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97\u5c31\u8fbe\u5230\u4e86\u76ee\u7684 \u771f\u662f\u592a\u795e\u5947\u4e86\uff01 \u627e\u5230\u76f8\u5173\u8d44\u6599 \u4ea4\u6362\u5f8b\uff1aa ^ b ^ c <=> a ^ c ^ b \u4efb\u4f55\u6570\u4e8e0\u5f02\u6216\u4e3a\u4efb\u4f55\u6570 0 ^ n => n \u76f8\u540c\u7684\u6570\u5f02\u6216\u4e3a0: n ^ n => 0 \u4e5f\u5c31\u662f\u8bf4\u76f8\u540c\u7684\u6570\u5c31\u5f02\u6216\u4e3a0\u4e86\uff0c\u8fbe\u5230\u4e86\u53bb\u91cd\u7684\u76ee\u7684\u3002","title":"\u4f4d\u8fd0\u7b97\u7684\u5e94\u7528"},{"location":"sf/3/#_1","text":"\u7ffb\u4e86\u7ffb\u4ee5\u524d\u7528python\u5237leetcode\u7684\u8bb0\u5f55\uff0c\u6700\u540e\u5237\u7684\u4e00\u9053\u9898\u662f\u8fd9\u6837\u7684 https://leetcode-cn.com/problems/single-number/ \u53eb\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u5f53\u65f6\u770b\u9898\u611f\u89c9\u975e\u5e38\u7b80\u5355\u554a\uff01\u76f4\u63a5\u641e\u5c31\u884c\u4e86 \u5f53\u65f6\u4e00\u5f00\u59cb\u6211\u7684\u505a\u6cd5\u662f\u8fd9\u6837\u7684 class Solution: def singleNumber(self, nums): for i in set(nums): if nums.count(i) ==1: return i \u4fe1\u5fc3\u6ee1\u6ee1\u7684\u63d0\u4ea4\uff0c\u7ed3\u679c\u53d1\u73b0TLE\u4e86\u3002\u3002 \u7136\u540e\u770b\u8d85\u65f6\u6848\u4f8b\u7684\u8f93\u5165\uff0c\u6ca1\u6709\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u7684set\u8ddf\u6ca1\u6709\u4e00\u6837\uff0c\u6240\u4ee5\u8bf4\u80af\u5b9a\u4e0d\u80fd\u8fd9\u4e48\u505a\u3002 \u7136\u540e\u53c8\u60f3\u5230\u4e86\u54c8\u5e0c\u8868 class Solution: def singleNumber(self, nums): dic={} for num in nums: if num in dic.keys(): dic[num]+=1 else: dic[num]=1 for i in dic.keys(): if dic[i] ==1: return i \u8fd9\u6837\u4e5f\u7b97\u662fAC\u4e86\u3002\u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\uff0c\u7ed3\u679c\u65e0\u610f\u4e2d\u770b\u5230\u4e86\u522b\u7684\u9898\u89e3\u9707\u60ca\u4e86 \u4ee3\u7801\u6570\u91cf\u6bd4\u6211\u77ed\u7684\u591a\u5f97\u591a\u3002 \u7136\u540e\u5c31\u8ba4\u8bc6\u5230\u4e86\u4f4d\u8fd0\u7b97\u7684\u9b54\u529b\u3002\u3002 \u5148\u4e0a\u4ee3\u7801\uff1a class Solution: def singleNumber(self, nums): a = 0 for i in nums: a^=i return a \u7b80\u5355\u7684\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97\u5c31\u8fbe\u5230\u4e86\u76ee\u7684 \u771f\u662f\u592a\u795e\u5947\u4e86\uff01 \u627e\u5230\u76f8\u5173\u8d44\u6599 \u4ea4\u6362\u5f8b\uff1aa ^ b ^ c <=> a ^ c ^ b \u4efb\u4f55\u6570\u4e8e0\u5f02\u6216\u4e3a\u4efb\u4f55\u6570 0 ^ n => n \u76f8\u540c\u7684\u6570\u5f02\u6216\u4e3a0: n ^ n => 0 \u4e5f\u5c31\u662f\u8bf4\u76f8\u540c\u7684\u6570\u5c31\u5f02\u6216\u4e3a0\u4e86\uff0c\u8fbe\u5230\u4e86\u53bb\u91cd\u7684\u76ee\u7684\u3002","title":"\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e2a\u5e94\u7528"},{"location":"sf/30/","text":"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/minimum-size-subarray-sum/ \u601d\u8def\uff1a \u200b \u4e00\u5f00\u59cb\u60f3\u7684\u662f\u76f4\u63a5\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u540e\u9762\u5f00\u59cb\u904d\u5386\uff0c\u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u7684 \u7136\u540e\u51fa\u9519\u4e86\uff0c\uff0c\uff0c\uff0c\uff0c class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -> int: nums.sort() end = len(nums) - 1 while end > 0: for i in range(end,-1,-1): if sum(nums[i:end+1]) >= s: return len(nums[i:end+1]) end -= 1 return 0 \u5728 213 [12,28,83,4,25,26,25,2,25,25,25,12] \u51fa\u4e86\u9519\uff0c\u7ed3\u679c\u8bd5\u4e86\u4e00\u4e0b\u6392\u5e8f\u540e\u7684\u5217\u8868 [2, 4, 12, 12, 25, 25, 25, 25, 25, 26, 28, 83] \u7ed3\u679c\u5c45\u7136\u662f\u5bf9\u7684\uff0c\u8bf4\u660e\u662f\u6211\u7684\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u4e0d\u5e94\u8be5\u6392\u5e8f \u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462 class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -> int: if not nums: return 0 left = 0 right = 0 res = float('inf') while right < len(nums): while sum(nums[left:right+1]) >= s: res = min(res, right-left +1) left += 1 else: right += 1 if res == float('inf'): return 0 return res \u601d\u8def\u4e5f\u5dee\u4e0d\u591a\uff0c\u4e5f\u662f\u7528\u5230\u4e86\u53cc\u6307\u9488\u3002\u4e0d\u8fc7\u5fc5\u987b\u6ce8\u610f\u8981\u5224\u65ad\u6700\u5c0f\u7684\u8fd9\u4e2a\u6761\u4ef6\u554a\u3002","title":"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4"},{"location":"sf/30/#_1","text":"","title":"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4"},{"location":"sf/30/#_2","text":"https://leetcode-cn.com/problems/minimum-size-subarray-sum/","title":"\u9898\u76ee\uff1a"},{"location":"sf/30/#_3","text":"\u200b \u4e00\u5f00\u59cb\u60f3\u7684\u662f\u76f4\u63a5\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u540e\u9762\u5f00\u59cb\u904d\u5386\uff0c\u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u7684 \u7136\u540e\u51fa\u9519\u4e86\uff0c\uff0c\uff0c\uff0c\uff0c class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -> int: nums.sort() end = len(nums) - 1 while end > 0: for i in range(end,-1,-1): if sum(nums[i:end+1]) >= s: return len(nums[i:end+1]) end -= 1 return 0 \u5728 213 [12,28,83,4,25,26,25,2,25,25,25,12] \u51fa\u4e86\u9519\uff0c\u7ed3\u679c\u8bd5\u4e86\u4e00\u4e0b\u6392\u5e8f\u540e\u7684\u5217\u8868 [2, 4, 12, 12, 25, 25, 25, 25, 25, 26, 28, 83] \u7ed3\u679c\u5c45\u7136\u662f\u5bf9\u7684\uff0c\u8bf4\u660e\u662f\u6211\u7684\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u4e0d\u5e94\u8be5\u6392\u5e8f \u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462 class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -> int: if not nums: return 0 left = 0 right = 0 res = float('inf') while right < len(nums): while sum(nums[left:right+1]) >= s: res = min(res, right-left +1) left += 1 else: right += 1 if res == float('inf'): return 0 return res \u601d\u8def\u4e5f\u5dee\u4e0d\u591a\uff0c\u4e5f\u662f\u7528\u5230\u4e86\u53cc\u6307\u9488\u3002\u4e0d\u8fc7\u5fc5\u987b\u6ce8\u610f\u8981\u5224\u65ad\u6700\u5c0f\u7684\u8fd9\u4e2a\u6761\u4ef6\u554a\u3002","title":"\u601d\u8def\uff1a"},{"location":"sf/31/","text":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u98791 \u9898\u76ee\uff1a \u200b https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/ \u601d\u8def\uff1a \u200b \u53cc\u6307\u9488\uff0c\u5b9a\u4e49 nums[0...i] \u4e3a\u4e3a\u975e\u91cd\u590d\u6570\u5217\uff0c\u904d\u5386\u6574\u4e2a\u6570\u5217\u4e0d\u65ad\u7684\u7ef4\u62a4\u8fd9\u4e2a\u5b9a\u4e49 \u4ee3\u7801\uff1a \u200b class Solution: def removeDuplicates(self, nums: List[int]) -> int: start = 0 for i in range(len(nums)): if nums[i] != nums[start]: start += 1 nums[i],nums[start] = nums[start],nums[i] return start + 1 \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u98792 \u9898\u76ee\uff1a \u200b https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/ \u601d\u8def\uff1a \u200b \u4e5f\u662f\u5229\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u8981\u62f7\u8d1d\u8d4b\u503c\u7684\u7d22\u5f15\u4f4d\u7f6e \u4ee3\u7801\uff1a \u200b class Solution: def removeDuplicates(self, nums: List[int]) -> int: if len(nums) <= 2: #\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e2\u65f6 return len(nums) count = 1 #\u7528\u4e8e\u91cd\u590d\u7684\u8ba1\u6570 j = 1 #\u6307\u5411\u591a\u4f59\u91cd\u590d\u7684\u5143\u7d20 for i in range(1,len(nums)): if nums[i] == nums[i-1]: count += 1 #\u91cd\u590d\u4e86\u5c31\u52a0\u4e00 if count > 2: #\u5982\u679c\u91cd\u590d\u4e24\u6b21\u4ee5\u4e0a\u5c31pass\u6389\uff0c\u7b49\u7740\u88ab\u66ff\u6362 pass else: nums[j] = nums[i] j += 1 else: nums[j] = nums[i] #\u5982\u679c\u4e0d\u76f8\u7b49\u4e86 \u628a\u591a\u4f59\u91cd\u590d\u7684\u90a3\u4e2a\u66ff\u6362\u6389\u4e86 count = 1 #\u91cd\u7f6e\u8ba1\u6570 j += 1 return j \u8fd9\u662f\u4e00\u79cd\u601d\u8def\u6bd4\u8f83\u6e05\u6670\u7684\u5199\u6cd5","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"sf/31/#_1","text":"","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"sf/31/#1","text":"","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u98791"},{"location":"sf/31/#_2","text":"\u200b https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/","title":"\u9898\u76ee\uff1a"},{"location":"sf/31/#_3","text":"\u200b \u53cc\u6307\u9488\uff0c\u5b9a\u4e49 nums[0...i] \u4e3a\u4e3a\u975e\u91cd\u590d\u6570\u5217\uff0c\u904d\u5386\u6574\u4e2a\u6570\u5217\u4e0d\u65ad\u7684\u7ef4\u62a4\u8fd9\u4e2a\u5b9a\u4e49","title":"\u601d\u8def\uff1a"},{"location":"sf/31/#_4","text":"\u200b class Solution: def removeDuplicates(self, nums: List[int]) -> int: start = 0 for i in range(len(nums)): if nums[i] != nums[start]: start += 1 nums[i],nums[start] = nums[start],nums[i] return start + 1","title":"\u4ee3\u7801\uff1a"},{"location":"sf/31/#2","text":"","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u98792"},{"location":"sf/31/#_5","text":"\u200b https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/","title":"\u9898\u76ee\uff1a"},{"location":"sf/31/#_6","text":"\u200b \u4e5f\u662f\u5229\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u8981\u62f7\u8d1d\u8d4b\u503c\u7684\u7d22\u5f15\u4f4d\u7f6e","title":"\u601d\u8def\uff1a"},{"location":"sf/31/#_7","text":"\u200b class Solution: def removeDuplicates(self, nums: List[int]) -> int: if len(nums) <= 2: #\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e2\u65f6 return len(nums) count = 1 #\u7528\u4e8e\u91cd\u590d\u7684\u8ba1\u6570 j = 1 #\u6307\u5411\u591a\u4f59\u91cd\u590d\u7684\u5143\u7d20 for i in range(1,len(nums)): if nums[i] == nums[i-1]: count += 1 #\u91cd\u590d\u4e86\u5c31\u52a0\u4e00 if count > 2: #\u5982\u679c\u91cd\u590d\u4e24\u6b21\u4ee5\u4e0a\u5c31pass\u6389\uff0c\u7b49\u7740\u88ab\u66ff\u6362 pass else: nums[j] = nums[i] j += 1 else: nums[j] = nums[i] #\u5982\u679c\u4e0d\u76f8\u7b49\u4e86 \u628a\u591a\u4f59\u91cd\u590d\u7684\u90a3\u4e2a\u66ff\u6362\u6389\u4e86 count = 1 #\u91cd\u7f6e\u8ba1\u6570 j += 1 return j \u8fd9\u662f\u4e00\u79cd\u601d\u8def\u6bd4\u8f83\u6e05\u6670\u7684\u5199\u6cd5","title":"\u4ee3\u7801\uff1a"},{"location":"sf/32/","text":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/merge-two-sorted-lists/ \u601d\u8def\uff1a \u5229\u7528\u9012\u5f52\u7684\u601d\u60f3\uff0c\u6bd4\u8f83\u4e24\u4e2a\u5f53\u524d\u503c\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u94fe\u8868 \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode: if l1 == None: return l2 if l2 == None: return l1 if l1.val <= l2.val: l1.next = self.mergeTwoLists(l1.next,l2) return l1 else: l2.next = self.mergeTwoLists(l1,l2.next) return l2","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"sf/32/#_1","text":"","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868"},{"location":"sf/32/#_2","text":"https://leetcode-cn.com/problems/merge-two-sorted-lists/","title":"\u9898\u76ee\uff1a"},{"location":"sf/32/#_3","text":"\u5229\u7528\u9012\u5f52\u7684\u601d\u60f3\uff0c\u6bd4\u8f83\u4e24\u4e2a\u5f53\u524d\u503c\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u94fe\u8868","title":"\u601d\u8def\uff1a"},{"location":"sf/32/#_4","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode: if l1 == None: return l2 if l2 == None: return l1 if l1.val <= l2.val: l1.next = self.mergeTwoLists(l1.next,l2) return l1 else: l2.next = self.mergeTwoLists(l1,l2.next) return l2","title":"\u4ee3\u7801\uff1a"},{"location":"sf/33/","text":"\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid/ \u601d\u8def\uff1a \u901a\u8fc7\u4e00\u4e2a\u503c\u6765\u5224\u65ad\u662f\u5426\u5339\u914d \u4ee3\u7801\uff1a class Solution: def minAddToMakeValid(self, S: str) -> int: res,temp = 0,0 for i in S: if i == '(': temp += 1 if i == ')': temp -= 1 if temp == -1: temp = 0 res += 1 return res + temp \u5982\u679c\u53f3\u62ec\u53f7\u8fc7\u591a\u7684\u8bdd\uff0c\u5c31\u5728\u5de6\u8fb9\u8865\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002\u8fd9\u65f6\u7ed3\u679c+1 \u5982\u679c\u4e00\u76f4\u662f\u5de6\u62ec\u53f7\u7684\u8bdd\uff0cres \u4e3a0 temp\u5c31\u662f\u5e94\u8be5\u8865\u7684\u4e2a\u6570 \u5982\u679c\u90fd\u76f8\u5339\u914d\u7684\u8bdd\uff0ctemp = 0 \u76f8\u5e94 res\u4e5f\u4e3a0","title":"\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c0f\u6dfb\u52a0"},{"location":"sf/33/#_1","text":"","title":"\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0"},{"location":"sf/33/#_2","text":"https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid/","title":"\u9898\u76ee\uff1a"},{"location":"sf/33/#_3","text":"\u901a\u8fc7\u4e00\u4e2a\u503c\u6765\u5224\u65ad\u662f\u5426\u5339\u914d","title":"\u601d\u8def\uff1a"},{"location":"sf/33/#_4","text":"class Solution: def minAddToMakeValid(self, S: str) -> int: res,temp = 0,0 for i in S: if i == '(': temp += 1 if i == ')': temp -= 1 if temp == -1: temp = 0 res += 1 return res + temp \u5982\u679c\u53f3\u62ec\u53f7\u8fc7\u591a\u7684\u8bdd\uff0c\u5c31\u5728\u5de6\u8fb9\u8865\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002\u8fd9\u65f6\u7ed3\u679c+1 \u5982\u679c\u4e00\u76f4\u662f\u5de6\u62ec\u53f7\u7684\u8bdd\uff0cres \u4e3a0 temp\u5c31\u662f\u5e94\u8be5\u8865\u7684\u4e2a\u6570 \u5982\u679c\u90fd\u76f8\u5339\u914d\u7684\u8bdd\uff0ctemp = 0 \u76f8\u5e94 res\u4e5f\u4e3a0","title":"\u4ee3\u7801\uff1a"},{"location":"sf/34/","text":"\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string/ \u601d\u8def\uff1a \u672c\u9898\u548c\u524d\u9762\u7684\u9898\u5c5e\u4e8e\u540c\u4e00\u7cfb\u5217\u7684\uff0c\u90fd\u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u4e0d\u662f1:1 \u800c\u662f1:2 \u601d\u8def\u8fd8\u662f\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u5224\u65ad\u6761\u4ef6\u9700\u8981\u6539\u53d8 \u4ee3\u7801\uff1a class Solution: def minInsertions(self, s: str) -> int: res,temp = 0,0 for i in s: if i == '(': temp += 2 if temp % 2 == 1: res += 1 temp -= 1 if i == ')': temp -= 1 if temp == -1: res += 1 temp = 1 return res + temp \u5f00\u59cb\u8fd8\u662f\u521d\u59cb\u5316\uff0ctemp\u4ee3\u8868\u9700\u6c42\u7684\u53f3\u62ec\u53f7\u7684\u6570\u91cf \u5982\u679c\u6709\u5de6\u62ec\u53f7\u7684\u8bdd\uff0c\u5219\u8ba9\u53f3\u62ec\u53f7\u7684\u9700\u6c42+2 \u56e0\u4e3a\u4e00\u4e2a\u5de6\u5bf9\u5e94\u4e24\u4e2a\u53f3 \u8fd9\u91cc\u6709\u4e2a\u96be\u70b9\uff0c\u5982\u679c\u9700\u6c42\u7684\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5219\u5e94\u6dfb\u52a0\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u7136\u540e\u8ba9\u9700\u6c42\u51cf1 \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u9700\u6c42 \u51cf1 \u5982\u679c\u9700\u6c42\u7684\u6210\u4e86-1 \u7684\u8bdd \u5219\u5728\u5de6\u8fb9\u8865\u4e0a\u5de6\u62ec\u53f7 res++ \u6b64\u65f6\u8fd8\u9700\u8981\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219temp\u518d\u521d\u59cb\u5316\u4e3a1 \u6700\u540e\u8fd8\u662f\u8f93\u51fa Q:\u4e3a\u4ec0\u4e48\u6700\u540e\u4e0d\u662f temp == -2 res += 1 temp=0 \u5462\uff1f \u770b\u770b\u8fd9\u4e2a\u4f8b\u5b50: \")))))))\" \u8fd9\u662f7\u4e2a\u53f3\u62ec\u53f7\uff0c\u6700\u540e\u51cf\u5230\u6700\u540e\u7684\u8bdd\uff0ctemp\u662f\u4e2a\u8d1f\u6570\uff0c\u5f71\u54cd\u4e86\u6700\u540e\u7684\u7ed3\u679c\u3002 \u6240\u4ee5\u8fd8\u662f\u8981\u7528\u539f\u6765\u7684\u90a3\u6837\uff0c-1\u7684\u65f6\u5019\u5c31\u8fdb\u884c\u5224\u65ad\uff0c\u4e0d\u7528\u8003\u8651\u5947\u5076\u7684\u95ee\u9898\u4e86","title":"\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570"},{"location":"sf/34/#_1","text":"","title":"\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570"},{"location":"sf/34/#_2","text":"https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string/","title":"\u9898\u76ee\uff1a"},{"location":"sf/34/#_3","text":"\u672c\u9898\u548c\u524d\u9762\u7684\u9898\u5c5e\u4e8e\u540c\u4e00\u7cfb\u5217\u7684\uff0c\u90fd\u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u4e0d\u662f1:1 \u800c\u662f1:2 \u601d\u8def\u8fd8\u662f\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u5224\u65ad\u6761\u4ef6\u9700\u8981\u6539\u53d8","title":"\u601d\u8def\uff1a"},{"location":"sf/34/#_4","text":"class Solution: def minInsertions(self, s: str) -> int: res,temp = 0,0 for i in s: if i == '(': temp += 2 if temp % 2 == 1: res += 1 temp -= 1 if i == ')': temp -= 1 if temp == -1: res += 1 temp = 1 return res + temp \u5f00\u59cb\u8fd8\u662f\u521d\u59cb\u5316\uff0ctemp\u4ee3\u8868\u9700\u6c42\u7684\u53f3\u62ec\u53f7\u7684\u6570\u91cf \u5982\u679c\u6709\u5de6\u62ec\u53f7\u7684\u8bdd\uff0c\u5219\u8ba9\u53f3\u62ec\u53f7\u7684\u9700\u6c42+2 \u56e0\u4e3a\u4e00\u4e2a\u5de6\u5bf9\u5e94\u4e24\u4e2a\u53f3 \u8fd9\u91cc\u6709\u4e2a\u96be\u70b9\uff0c\u5982\u679c\u9700\u6c42\u7684\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5219\u5e94\u6dfb\u52a0\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u7136\u540e\u8ba9\u9700\u6c42\u51cf1 \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u9700\u6c42 \u51cf1 \u5982\u679c\u9700\u6c42\u7684\u6210\u4e86-1 \u7684\u8bdd \u5219\u5728\u5de6\u8fb9\u8865\u4e0a\u5de6\u62ec\u53f7 res++ \u6b64\u65f6\u8fd8\u9700\u8981\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219temp\u518d\u521d\u59cb\u5316\u4e3a1 \u6700\u540e\u8fd8\u662f\u8f93\u51fa Q:\u4e3a\u4ec0\u4e48\u6700\u540e\u4e0d\u662f temp == -2 res += 1 temp=0 \u5462\uff1f \u770b\u770b\u8fd9\u4e2a\u4f8b\u5b50: \")))))))\" \u8fd9\u662f7\u4e2a\u53f3\u62ec\u53f7\uff0c\u6700\u540e\u51cf\u5230\u6700\u540e\u7684\u8bdd\uff0ctemp\u662f\u4e2a\u8d1f\u6570\uff0c\u5f71\u54cd\u4e86\u6700\u540e\u7684\u7ed3\u679c\u3002 \u6240\u4ee5\u8fd8\u662f\u8981\u7528\u539f\u6765\u7684\u90a3\u6837\uff0c-1\u7684\u65f6\u5019\u5c31\u8fdb\u884c\u5224\u65ad\uff0c\u4e0d\u7528\u8003\u8651\u5947\u5076\u7684\u95ee\u9898\u4e86","title":"\u4ee3\u7801\uff1a"},{"location":"sf/35/","text":"\u9636\u4e58\u51fd\u6570\u540eK\u4e2a\u96f6(\u9996\u4e2a\u56f0\u96be\u9898) \u9898\u76ee\uff1a https://leetcode-cn.com/problems/preimage-size-of-factorial-zeroes-function/ \u601d\u8def\uff1a \u9996\u5148\u5148\u5199\u4e2a\u5224\u65ad\u9636\u4e58\u540e\u6709\u591a\u5c11\u4e2a\u96f6\u7684\u51fd\u6570\uff0c\u601d\u8def\u5c31\u662f\u627e\u6240\u6709\u76f8\u4e58\u7684\u6570\u4e2d\u56e0\u6570\u67095\u7684\u4e2a\u6570\u3002 \u7136\u540e\u518d\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u6709K\u4e2a0\u7684\u5de6\u754c\u548c\u53f3\u754c\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\uff0c\u5c31\u662f\u8981\u627e\u7684\u6570\u76ee class Solution: def preimageSizeFZF(self, K: int) -> int: return self.findright(K) - self.findleft(K) def whatzero(self,n): dis = 5 res = 0 while dis <= n: res += n // dis dis *= 5 return res def findleft(self,K): mins,maxs = 0,sys.maxsize while (mins < maxs): mid = mins + (maxs-mins) // 2 if self.whatzero(mid) < K: mins = mid + 1 elif self.whatzero(mid) > K: maxs = mid else: maxs = mid return mins def findright(self,K): mins,maxs = 0,sys.maxsize while (mins < maxs): mid = mins + (maxs-mins) // 2 if self.whatzero(mid) < K: mins = mid + 1 elif self.whatzero(mid) > K: maxs = mid else: mins = mid + 1 return maxs \u6ce8\u610f\u8fd9\u91cc\u7684\u6700\u5927\u503c\u8981\u521d\u59cb\u5316\u4e3asys\u5e93\u91cc\u7684maxsize \u7528float(\"inf\")\u4f1a\u8fd4\u56denan\u503c","title":"\u9636\u4e58\u51fd\u6570\u540eK\u4e2a\u96f6"},{"location":"sf/35/#k","text":"","title":"\u9636\u4e58\u51fd\u6570\u540eK\u4e2a\u96f6(\u9996\u4e2a\u56f0\u96be\u9898)"},{"location":"sf/35/#_1","text":"https://leetcode-cn.com/problems/preimage-size-of-factorial-zeroes-function/","title":"\u9898\u76ee\uff1a"},{"location":"sf/35/#_2","text":"\u9996\u5148\u5148\u5199\u4e2a\u5224\u65ad\u9636\u4e58\u540e\u6709\u591a\u5c11\u4e2a\u96f6\u7684\u51fd\u6570\uff0c\u601d\u8def\u5c31\u662f\u627e\u6240\u6709\u76f8\u4e58\u7684\u6570\u4e2d\u56e0\u6570\u67095\u7684\u4e2a\u6570\u3002 \u7136\u540e\u518d\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u6709K\u4e2a0\u7684\u5de6\u754c\u548c\u53f3\u754c\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\uff0c\u5c31\u662f\u8981\u627e\u7684\u6570\u76ee class Solution: def preimageSizeFZF(self, K: int) -> int: return self.findright(K) - self.findleft(K) def whatzero(self,n): dis = 5 res = 0 while dis <= n: res += n // dis dis *= 5 return res def findleft(self,K): mins,maxs = 0,sys.maxsize while (mins < maxs): mid = mins + (maxs-mins) // 2 if self.whatzero(mid) < K: mins = mid + 1 elif self.whatzero(mid) > K: maxs = mid else: maxs = mid return mins def findright(self,K): mins,maxs = 0,sys.maxsize while (mins < maxs): mid = mins + (maxs-mins) // 2 if self.whatzero(mid) < K: mins = mid + 1 elif self.whatzero(mid) > K: maxs = mid else: mins = mid + 1 return maxs \u6ce8\u610f\u8fd9\u91cc\u7684\u6700\u5927\u503c\u8981\u521d\u59cb\u5316\u4e3asys\u5e93\u91cc\u7684maxsize \u7528float(\"inf\")\u4f1a\u8fd4\u56denan\u503c","title":"\u601d\u8def\uff1a"},{"location":"sf/36/","text":"\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/search-in-rotated-sorted-array/ \u601d\u8def\uff1a \u660e\u663e\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u4e0d\u8fc7\u4e0d\u662f\u6709\u5e8f\u6570\u7ec4\u4e86\uff0c\u800c\u662f\u90e8\u5206\u6709\u5e8f\uff0c\u6240\u4ee5\u9700\u8981\u6709\u5224\u65ad \u4ee3\u7801\uff1a class Solution(object): def search(self, nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid if nums[mid] < nums[right]:#\u53f3\u8fb9\u4e3a\u5347\u5e8f if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid if nums[left] <= nums[mid]:#\u5de6\u8fb9\u4e3a\u5347\u5e8f if nums[left] <= target < nums[mid]: right = mid else: left = mid + 1 return -1","title":"\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4"},{"location":"sf/36/#_1","text":"","title":"\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4"},{"location":"sf/36/#_2","text":"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/","title":"\u9898\u76ee\uff1a"},{"location":"sf/36/#_3","text":"\u660e\u663e\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u4e0d\u8fc7\u4e0d\u662f\u6709\u5e8f\u6570\u7ec4\u4e86\uff0c\u800c\u662f\u90e8\u5206\u6709\u5e8f\uff0c\u6240\u4ee5\u9700\u8981\u6709\u5224\u65ad","title":"\u601d\u8def\uff1a"},{"location":"sf/36/#_4","text":"class Solution(object): def search(self, nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid if nums[mid] < nums[right]:#\u53f3\u8fb9\u4e3a\u5347\u5e8f if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid if nums[left] <= nums[mid]:#\u5de6\u8fb9\u4e3a\u5347\u5e8f if nums[left] <= target < nums[mid]: right = mid else: left = mid + 1 return -1","title":"\u4ee3\u7801\uff1a"},{"location":"sf/37/","text":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/swap-nodes-in-pairs/ \u601d\u8def: \u5148\u628a\u7b2c\u4e8c\u4f4d\u50a8\u5b58\u8d77\u6765\uff0c\u7136\u540e\u5c06\u540e\u9762\u7684\u9012\u5f52\u64cd\u4f5c\u540e\uff0c\u518d\u628a\u7b2c\u4e8c\u4f4d\u6307\u5411\u7b2c\u4e00\u4f4d\uff0c\u5b8c\u6210\u6362\u4f4d \u4ee3\u7801\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: #\u5047\u8bbe\u4e3a[1,2,3,4] def swapPairs(self, head: ListNode) -> ListNode: if not head or not head.next: #\u9012\u5f52\u51fa\u53e3 return head newnode = head.next #\u50a8\u5b58\u7b2c\u4e8c\u4f4d2 head.next = self.swapPairs(head.next.next) #\u6b64\u65f6\u4e3a[1,4,3] newnode.next = head #[2,1,4,3] return newnode","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"sf/37/#_1","text":"","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"sf/37/#_2","text":"https://leetcode-cn.com/problems/swap-nodes-in-pairs/","title":"\u9898\u76ee\uff1a"},{"location":"sf/37/#_3","text":"\u5148\u628a\u7b2c\u4e8c\u4f4d\u50a8\u5b58\u8d77\u6765\uff0c\u7136\u540e\u5c06\u540e\u9762\u7684\u9012\u5f52\u64cd\u4f5c\u540e\uff0c\u518d\u628a\u7b2c\u4e8c\u4f4d\u6307\u5411\u7b2c\u4e00\u4f4d\uff0c\u5b8c\u6210\u6362\u4f4d","title":"\u601d\u8def:"},{"location":"sf/37/#_4","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: #\u5047\u8bbe\u4e3a[1,2,3,4] def swapPairs(self, head: ListNode) -> ListNode: if not head or not head.next: #\u9012\u5f52\u51fa\u53e3 return head newnode = head.next #\u50a8\u5b58\u7b2c\u4e8c\u4f4d2 head.next = self.swapPairs(head.next.next) #\u6b64\u65f6\u4e3a[1,4,3] newnode.next = head #[2,1,4,3] return newnode","title":"\u4ee3\u7801\uff1a"},{"location":"sf/38/","text":"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/ \u601d\u8def\uff1a dp\u601d\u60f3\uff0c\u4e0d\u7528\u7ba1\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u5b9a\u4e49dp[i]\u4e3a\u957f\u5ea6\u4e3ai\u65f6 \u6709\u591a\u5c11\u4e2a\u65b9\u6cd5 \u4ee3\u7801: class Solution: def translateNum(self, num: int) -> int: s = str(num) if len(s) < 2: return 1 dp = [0] * len(s) dp[0] = 1 dp[1] = 2 if int(s[0] + s[1]) < 26 else 1 for i in range(2,len(s)): dp[i] = dp[i-1] + dp[i-2] if int(s[i-1] + s[i]) < 26 and s[i-1] != '0' else dp[i-1] return dp[-1] \u6ce8\u610f\u5982\u679c\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e1 \u5219\u76f4\u63a5\u8fd4\u56de1 \u5982\u679c\u4e0d\u662f26\u4e2a\u82f1\u6587\u5b57\u6bcd\u91cc\u9762\u7684 \u5219dp[i] = dp[i-1] \u8bf4\u660e\u65b9\u6cd5\u6b21\u6570\u5e76\u4e0d\u6539\u53d8 \u6ce8\u610f\u6709\u9996\u4f4d\u4e3a0\u7684\u60c5\u51b5 \u6240\u4ee5\u8981int\u4e00\u4e0b","title":"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"sf/38/#_1","text":"","title":"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"sf/38/#_2","text":"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/","title":"\u9898\u76ee\uff1a"},{"location":"sf/38/#_3","text":"dp\u601d\u60f3\uff0c\u4e0d\u7528\u7ba1\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u5b9a\u4e49dp[i]\u4e3a\u957f\u5ea6\u4e3ai\u65f6 \u6709\u591a\u5c11\u4e2a\u65b9\u6cd5","title":"\u601d\u8def\uff1a"},{"location":"sf/38/#_4","text":"class Solution: def translateNum(self, num: int) -> int: s = str(num) if len(s) < 2: return 1 dp = [0] * len(s) dp[0] = 1 dp[1] = 2 if int(s[0] + s[1]) < 26 else 1 for i in range(2,len(s)): dp[i] = dp[i-1] + dp[i-2] if int(s[i-1] + s[i]) < 26 and s[i-1] != '0' else dp[i-1] return dp[-1] \u6ce8\u610f\u5982\u679c\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e1 \u5219\u76f4\u63a5\u8fd4\u56de1 \u5982\u679c\u4e0d\u662f26\u4e2a\u82f1\u6587\u5b57\u6bcd\u91cc\u9762\u7684 \u5219dp[i] = dp[i-1] \u8bf4\u660e\u65b9\u6cd5\u6b21\u6570\u5e76\u4e0d\u6539\u53d8 \u6ce8\u610f\u6709\u9996\u4f4d\u4e3a0\u7684\u60c5\u51b5 \u6240\u4ee5\u8981int\u4e00\u4e0b","title":"\u4ee3\u7801:"},{"location":"sf/39/","text":"\u68c0\u67e5\u5e73\u8861\u6027 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/check-balance-lcci/ \u601d\u8def\uff1a \u7b97\u6df1\u5ea6\uff0c\u7136\u540e\u4f5c\u5dee\u662f\u5426\u5927\u4e8e1 \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isBalanced(self, root: TreeNode) -> bool: if self.maxdepth(root) < 1: return True if abs(self.maxdepth(root.left) - self.maxdepth(root.right)) > 1: return False return self.isBalanced(root.right) and self.isBalanced(root.left) def maxdepth(self,root): if not root: return 0 return 1 + max(self.maxdepth(root.right),self.maxdepth(root.left))","title":"\u68c0\u67e5\u5e73\u8861\u6027"},{"location":"sf/39/#_1","text":"","title":"\u68c0\u67e5\u5e73\u8861\u6027"},{"location":"sf/39/#_2","text":"https://leetcode-cn.com/problems/check-balance-lcci/","title":"\u9898\u76ee\uff1a"},{"location":"sf/39/#_3","text":"\u7b97\u6df1\u5ea6\uff0c\u7136\u540e\u4f5c\u5dee\u662f\u5426\u5927\u4e8e1","title":"\u601d\u8def\uff1a"},{"location":"sf/39/#_4","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isBalanced(self, root: TreeNode) -> bool: if self.maxdepth(root) < 1: return True if abs(self.maxdepth(root.left) - self.maxdepth(root.right)) > 1: return False return self.isBalanced(root.right) and self.isBalanced(root.left) def maxdepth(self,root): if not root: return 0 return 1 + max(self.maxdepth(root.right),self.maxdepth(root.left))","title":"\u4ee3\u7801\uff1a"},{"location":"sf/4/","text":"\u4f4d\u8fd0\u7b97\u7684\u5e94\u7528\uff082\uff09 \u4e5f\u662fleetcode\u4e0a\u7684\u4e00\u4e2a\u9898\u76ee\uff0c\u9898\u76ee\u662f\u8fd9\u6837\u7684 https://leetcode-cn.com/problems/number-of-1-bits/ \u8bdd\u4e0d\u591a\u8bf4 \u76f4\u63a5\u4e0a\u4ee3\u7801 class Solution { public: int hammingWeight(uint32_t n) { int count = 0; while(n>0){ if((n&1)==1){ //\u5982\u679c\u672b\u4f4d\u4e3a1 count++; } n=(n>>1); //\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d } return count; } };","title":"\u4f4d\u8fd0\u7b97\u7684\u5e94\u7528(2)"},{"location":"sf/4/#2","text":"\u4e5f\u662fleetcode\u4e0a\u7684\u4e00\u4e2a\u9898\u76ee\uff0c\u9898\u76ee\u662f\u8fd9\u6837\u7684 https://leetcode-cn.com/problems/number-of-1-bits/ \u8bdd\u4e0d\u591a\u8bf4 \u76f4\u63a5\u4e0a\u4ee3\u7801 class Solution { public: int hammingWeight(uint32_t n) { int count = 0; while(n>0){ if((n&1)==1){ //\u5982\u679c\u672b\u4f4d\u4e3a1 count++; } n=(n>>1); //\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d } return count; } };","title":"\u4f4d\u8fd0\u7b97\u7684\u5e94\u7528\uff082\uff09"},{"location":"sf/40/","text":"\u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/ \u601d\u8def\uff1a \u6ed1\u52a8\u7a97\u53e3\u9898\u76ee\uff0c\u9650\u5b9a\u7a97\u53e3\u5927\u5c0f\u7136\u540e\u6ed1\u52a8\u5373\u53ef \u4ee3\u7801\uff1a class Solution: def maxScore(self, cardPoints: List[int], k: int) -> int: n = len(cardPoints) # \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u4e3a n-k windowSize = n - k # \u9009\u524d n-k \u4e2a\u4f5c\u4e3a\u521d\u59cb\u503c s = sum(cardPoints[:windowSize]) minSum = s for i in range(windowSize, n): # \u6ed1\u52a8\u7a97\u53e3\u6bcf\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u589e\u52a0\u4ece\u53f3\u4fa7\u8fdb\u5165\u7a97\u53e3\u7684\u5143\u7d20\u503c\uff0c\u5e76\u51cf\u5c11\u4ece\u5de6\u4fa7\u79bb\u5f00\u7a97\u53e3\u7684\u5143\u7d20\u503c s += cardPoints[i] - cardPoints[i - windowSize] minSum = min(minSum, s) return sum(cardPoints) - minSum","title":"\u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570"},{"location":"sf/40/#_1","text":"","title":"\u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570"},{"location":"sf/40/#_2","text":"https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/","title":"\u9898\u76ee\uff1a"},{"location":"sf/40/#_3","text":"\u6ed1\u52a8\u7a97\u53e3\u9898\u76ee\uff0c\u9650\u5b9a\u7a97\u53e3\u5927\u5c0f\u7136\u540e\u6ed1\u52a8\u5373\u53ef","title":"\u601d\u8def\uff1a"},{"location":"sf/40/#_4","text":"class Solution: def maxScore(self, cardPoints: List[int], k: int) -> int: n = len(cardPoints) # \u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u4e3a n-k windowSize = n - k # \u9009\u524d n-k \u4e2a\u4f5c\u4e3a\u521d\u59cb\u503c s = sum(cardPoints[:windowSize]) minSum = s for i in range(windowSize, n): # \u6ed1\u52a8\u7a97\u53e3\u6bcf\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u589e\u52a0\u4ece\u53f3\u4fa7\u8fdb\u5165\u7a97\u53e3\u7684\u5143\u7d20\u503c\uff0c\u5e76\u51cf\u5c11\u4ece\u5de6\u4fa7\u79bb\u5f00\u7a97\u53e3\u7684\u5143\u7d20\u503c s += cardPoints[i] - cardPoints[i - windowSize] minSum = min(minSum, s) return sum(cardPoints) - minSum","title":"\u4ee3\u7801\uff1a"},{"location":"sf/41/","text":"\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/permutation-in-string/ \u601d\u8def\uff1a \u6ed1\u52a8\u7a97\u53e3\u52a0\u5b57\u5178 \u4ee3\u7801\uff1a class Solution(object): def checkInclusion(self, s1, s2): counter1 = collections.Counter(s1) N = len(s2) left = 0 right = len(s1) - 1 counter2 = collections.Counter(s2[0:right]) while right < N: counter2[s2[right]] += 1 if counter1 == counter2: return True counter2[s2[left]] -= 1 if counter2[s2[left]] == 0: del counter2[s2[left]] left += 1 right += 1 return False","title":"\u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"sf/41/#_1","text":"","title":"\u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"sf/41/#_2","text":"https://leetcode-cn.com/problems/permutation-in-string/","title":"\u9898\u76ee\uff1a"},{"location":"sf/41/#_3","text":"\u6ed1\u52a8\u7a97\u53e3\u52a0\u5b57\u5178","title":"\u601d\u8def\uff1a"},{"location":"sf/41/#_4","text":"class Solution(object): def checkInclusion(self, s1, s2): counter1 = collections.Counter(s1) N = len(s2) left = 0 right = len(s1) - 1 counter2 = collections.Counter(s2[0:right]) while right < N: counter2[s2[right]] += 1 if counter1 == counter2: return True counter2[s2[left]] -= 1 if counter2[s2[left]] == 0: del counter2[s2[left]] left += 1 right += 1 return False","title":"\u4ee3\u7801\uff1a"},{"location":"sf/42/","text":"\u81f3\u5c11\u6709k\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/ \u601d\u8def\uff1a \u5229\u7528\u9012\u5f52\uff0c\u5982\u679cs\u4e2d\u5b57\u7b26c\u7684\u6570\u76ee\u5c0f\u4e8ek,\u5219\u4ee5c\u4f5c\u5206\u5272\uff0c\u5206\u6210\u7684\u5b57\u4e32\u518d\u6b21\u8c03\u7528\u51fd\u6570\u5f62\u6210\u9012\u5f52\uff0c\u7136\u540e\u4ece\u4f17\u591a\u7ed3\u679c\u4e2d\u627e\u5bfb\u6700\u5927\u957f\u5ea6\u7684\u3002 \u4ee3\u7801\uff1a class Solution(object): def longestSubstring(self, s, k): if len(s) < k: return 0 for c in set(s): if s.count(c) < k: return max(self.longestSubstring(t, k) for t in s.split(c)) return len(s)","title":"\u81f3\u5c11\u6709k\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32"},{"location":"sf/42/#k","text":"","title":"\u81f3\u5c11\u6709k\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32"},{"location":"sf/42/#_1","text":"https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/","title":"\u9898\u76ee\uff1a"},{"location":"sf/42/#_2","text":"\u5229\u7528\u9012\u5f52\uff0c\u5982\u679cs\u4e2d\u5b57\u7b26c\u7684\u6570\u76ee\u5c0f\u4e8ek,\u5219\u4ee5c\u4f5c\u5206\u5272\uff0c\u5206\u6210\u7684\u5b57\u4e32\u518d\u6b21\u8c03\u7528\u51fd\u6570\u5f62\u6210\u9012\u5f52\uff0c\u7136\u540e\u4ece\u4f17\u591a\u7ed3\u679c\u4e2d\u627e\u5bfb\u6700\u5927\u957f\u5ea6\u7684\u3002","title":"\u601d\u8def\uff1a"},{"location":"sf/42/#_3","text":"class Solution(object): def longestSubstring(self, s, k): if len(s) < k: return 0 for c in set(s): if s.count(c) < k: return max(self.longestSubstring(t, k) for t in s.split(c)) return len(s)","title":"\u4ee3\u7801\uff1a"},{"location":"sf/43/","text":"\u4e11\u6570\u7cfb\u5217 1.\u4e11\u6570 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/ugly-number/ \u601d\u8def\uff1a \u5c31\u662f\u8ba9\u8fd9\u4e2a\u6570\u5b57\u4e0d\u65ad\u5730\u9664\u4ee52.3.5 \u5982\u679c\u6700\u540e\u53d8\u6210\u4e861 \u5c31\u8bf4\u660e\u662f\u4e2a\u4e11\u6570 \u4ee3\u7801\uff1a class Solution: def isUgly(self, num: int) -> bool: if num<=-2**31 or num>=2**31-1: return False while num >1: if num %2 == 0: num=int(num/2) elif num %3 ==0: num =int(num/3) elif num %5 ==0: num=int(num/5) else: break if num == 1: return True else: return False \u4e11\u6570II \u9898\u76ee\uff1a https://leetcode-cn.com/problems/ugly-number-ii/ \u601d\u8def\uff1a \u5229\u7528\u4e09\u6307\u9488\uff0c\u7ef4\u62a4i2 i3 i5\u4e09\u4e2a\u6307\u9488\u5206\u522b\u6307\u54112 3 5 \u4ee3\u7801\uff1a class Solution: def nthUglyNumber(self, n: int) -> int: res = [1] # \u5148\u521d\u59cb\u5316\u4e3a1 i2 = i3 = i5 = 0 # \u521d\u59cb\u5316\u4e3a0 for i in range(1,n): mins = min(res[i2]*2,res[i3]*3,res[i5]*5) # \u4ece\u5c0f\u5230\u5927\u627e res.append(mins) if res[i] == res[i2]*2: i2 += 1 if res[i] == res[i3]*3: i3 += 1 if res[i] == res[i5]*5: i5 += 1 return res[n-1]","title":"\u4e11\u6570\u7cfb\u5217"},{"location":"sf/43/#_1","text":"","title":"\u4e11\u6570\u7cfb\u5217"},{"location":"sf/43/#1","text":"","title":"1.\u4e11\u6570"},{"location":"sf/43/#_2","text":"https://leetcode-cn.com/problems/ugly-number/","title":"\u9898\u76ee\uff1a"},{"location":"sf/43/#_3","text":"\u5c31\u662f\u8ba9\u8fd9\u4e2a\u6570\u5b57\u4e0d\u65ad\u5730\u9664\u4ee52.3.5 \u5982\u679c\u6700\u540e\u53d8\u6210\u4e861 \u5c31\u8bf4\u660e\u662f\u4e2a\u4e11\u6570","title":"\u601d\u8def\uff1a"},{"location":"sf/43/#_4","text":"class Solution: def isUgly(self, num: int) -> bool: if num<=-2**31 or num>=2**31-1: return False while num >1: if num %2 == 0: num=int(num/2) elif num %3 ==0: num =int(num/3) elif num %5 ==0: num=int(num/5) else: break if num == 1: return True else: return False","title":"\u4ee3\u7801\uff1a"},{"location":"sf/43/#ii","text":"","title":"\u4e11\u6570II"},{"location":"sf/43/#_5","text":"https://leetcode-cn.com/problems/ugly-number-ii/","title":"\u9898\u76ee\uff1a"},{"location":"sf/43/#_6","text":"\u5229\u7528\u4e09\u6307\u9488\uff0c\u7ef4\u62a4i2 i3 i5\u4e09\u4e2a\u6307\u9488\u5206\u522b\u6307\u54112 3 5","title":"\u601d\u8def\uff1a"},{"location":"sf/43/#_7","text":"class Solution: def nthUglyNumber(self, n: int) -> int: res = [1] # \u5148\u521d\u59cb\u5316\u4e3a1 i2 = i3 = i5 = 0 # \u521d\u59cb\u5316\u4e3a0 for i in range(1,n): mins = min(res[i2]*2,res[i3]*3,res[i5]*5) # \u4ece\u5c0f\u5230\u5927\u627e res.append(mins) if res[i] == res[i2]*2: i2 += 1 if res[i] == res[i3]*3: i3 += 1 if res[i] == res[i5]*5: i5 += 1 return res[n-1]","title":"\u4ee3\u7801\uff1a"},{"location":"sf/44/","text":"\u6700\u5927\u6570 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/largest-number/ \u601d\u8def\uff1a \u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\u641c\u7d22\uff0c\u628a\u6240\u6709\u7684\u60c5\u51b5\u90fd\u5217\u4e3e\u7136\u540e\u6bd4\u8f83\uff0c\u7ed3\u679c\u8d85\u65f6\u4e86\uff0c\u6700\u540e\u5229\u7528\u4e86\u81ea\u5b9a\u4e49\u6392\u5e8f\u7684\u65b9\u6cd5 \u4ee3\u7801\uff1a class Solution: def largestNumber(self, nums: List[int]) -> str: class Comapre(str): def __lt__(self,other): return int(self+other) > int(other+self) nums.sort(key=Comapre) return str(int(''.join(map(str,nums)))) \u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u5229\u7528\u4e86\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u7c7b\u578b\uff0c\u7ee7\u627f\u4e86str\uff0c\u4e5f\u53ef\u4ee5\u4ecefunctools\u91cc\u5bfc\u5165cmp_to_key\u65b9\u6cd5\u6765\u5b9e\u73b0\u6bd4\u8f83 python3\u4e4b\u540e\u4e0d\u652f\u6301cmp\uff0c\u6240\u7528key\u51fd\u6570\u5e76\u4e0d\u76f4\u63a5\u6bd4\u8f83\u4efb\u610f\u4e24\u4e2a\u539f\u59cb\u5143\u7d20\uff0c\u800c\u662f\u901a\u8fc7key\u51fd\u6570\u628a\u90a3\u4e9b\u5143\u7d20\u8f6c\u6362\u6210\u4e00\u4e2a\u4e2a\u65b0\u7684\u53ef\u6bd4\u8f83\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u5143\u7d20\u7684key\uff0c\u7136\u540e\u7528\u5143\u7d20\u7684key\u4ee3\u66ff\u5143\u7d20\u53bb\u53c2\u4e0e\u6bd4\u8f83\u3002\u5982\u679c\u539f\u59cb\u5143\u7d20\u672c\u6765\u5c31\u662f\u53ef\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6bd4\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4e0d\u8003\u8651\u6027\u80fd\u4f18\u5316\u53ef\u4ee5\u76f4\u63a5sort(key=lambda e: e)\u3002\u4e0d\u8fc7\u8fd9\u79cd\u57fa\u4e8ekey\u51fd\u6570\u7684\u8bbe\u8ba1\u503e\u5411\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u6709\u4e2a\u7edd\u5bf9\u6807\u51c6\uff0c\u4f46\u6709\u65f6\u5374\u4f1a\u51fa\u73b0\u5355\u4e2a\u5143\u7d20\u5e76\u6ca1\u6709\u4e00\u4e2a\u7edd\u5bf9\u7684\u5927\u5c0f\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 functools.cmp_to_key\u6784\u5efa\u57fa\u4e8e\u591a\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u51fd\u6570\u3002","title":"\u6700\u5927\u6570"},{"location":"sf/44/#_1","text":"","title":"\u6700\u5927\u6570"},{"location":"sf/44/#_2","text":"https://leetcode-cn.com/problems/largest-number/","title":"\u9898\u76ee\uff1a"},{"location":"sf/44/#_3","text":"\u4e00\u5f00\u59cb\u76f4\u63a5\u66b4\u529b\u641c\u7d22\uff0c\u628a\u6240\u6709\u7684\u60c5\u51b5\u90fd\u5217\u4e3e\u7136\u540e\u6bd4\u8f83\uff0c\u7ed3\u679c\u8d85\u65f6\u4e86\uff0c\u6700\u540e\u5229\u7528\u4e86\u81ea\u5b9a\u4e49\u6392\u5e8f\u7684\u65b9\u6cd5","title":"\u601d\u8def\uff1a"},{"location":"sf/44/#_4","text":"class Solution: def largestNumber(self, nums: List[int]) -> str: class Comapre(str): def __lt__(self,other): return int(self+other) > int(other+self) nums.sort(key=Comapre) return str(int(''.join(map(str,nums)))) \u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u5229\u7528\u4e86\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u7c7b\u578b\uff0c\u7ee7\u627f\u4e86str\uff0c\u4e5f\u53ef\u4ee5\u4ecefunctools\u91cc\u5bfc\u5165cmp_to_key\u65b9\u6cd5\u6765\u5b9e\u73b0\u6bd4\u8f83 python3\u4e4b\u540e\u4e0d\u652f\u6301cmp\uff0c\u6240\u7528key\u51fd\u6570\u5e76\u4e0d\u76f4\u63a5\u6bd4\u8f83\u4efb\u610f\u4e24\u4e2a\u539f\u59cb\u5143\u7d20\uff0c\u800c\u662f\u901a\u8fc7key\u51fd\u6570\u628a\u90a3\u4e9b\u5143\u7d20\u8f6c\u6362\u6210\u4e00\u4e2a\u4e2a\u65b0\u7684\u53ef\u6bd4\u8f83\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u5143\u7d20\u7684key\uff0c\u7136\u540e\u7528\u5143\u7d20\u7684key\u4ee3\u66ff\u5143\u7d20\u53bb\u53c2\u4e0e\u6bd4\u8f83\u3002\u5982\u679c\u539f\u59cb\u5143\u7d20\u672c\u6765\u5c31\u662f\u53ef\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6bd4\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4e0d\u8003\u8651\u6027\u80fd\u4f18\u5316\u53ef\u4ee5\u76f4\u63a5sort(key=lambda e: e)\u3002\u4e0d\u8fc7\u8fd9\u79cd\u57fa\u4e8ekey\u51fd\u6570\u7684\u8bbe\u8ba1\u503e\u5411\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u6709\u4e2a\u7edd\u5bf9\u6807\u51c6\uff0c\u4f46\u6709\u65f6\u5374\u4f1a\u51fa\u73b0\u5355\u4e2a\u5143\u7d20\u5e76\u6ca1\u6709\u4e00\u4e2a\u7edd\u5bf9\u7684\u5927\u5c0f\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 functools.cmp_to_key\u6784\u5efa\u57fa\u4e8e\u591a\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u51fd\u6570\u3002","title":"\u4ee3\u7801\uff1a"},{"location":"sf/45/","text":"\u91c7\u8d2d\u65b9\u6848 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/4xy4Wx/ \u601d\u8def\uff1a \u9898\u76ee\u5f88\u7b80\u5355\uff0c\u601d\u60f3\u5c31\u662f\u53cc\u6307\u9488\uff0c\u611f\u89c9\u662f\u4e2a\u53cc\u6307\u9488\u7684\u5178\u578b\u4f8b\u5b50\u5c31\u5199\u4e86\u4e0b\u6765 \u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u4ece\u4e24\u8fb9\u79fb\u52a8\uff0c\u5982\u679c\u4e00\u76f4\u5927\u4e8etarget\u5c31\u4e00\u76f4\u5de6\u79fbright \u7136\u540eright - left\u5c31\u662f\u6240\u6709\u6210\u7acb\u7684\u6570\u76ee\uff0c\u518d\u79fb\u52a8left \u8fdb\u884c\u7b5b\u9009 \u4ee3\u7801\uff1a class Solution: def purchasePlans(self, nums: List[int], target: int) -> int: nums.sort() left = 0 right = len(nums) - 1 res = 0 while left < right and left < len(nums): while left < right and nums[right] + nums[left] > target: right -= 1 res += right - left left += 1 return res % (1000000007)","title":"\u91c7\u8d2d\u65b9\u6848"},{"location":"sf/45/#_1","text":"","title":"\u91c7\u8d2d\u65b9\u6848"},{"location":"sf/45/#_2","text":"https://leetcode-cn.com/problems/4xy4Wx/","title":"\u9898\u76ee\uff1a"},{"location":"sf/45/#_3","text":"\u9898\u76ee\u5f88\u7b80\u5355\uff0c\u601d\u60f3\u5c31\u662f\u53cc\u6307\u9488\uff0c\u611f\u89c9\u662f\u4e2a\u53cc\u6307\u9488\u7684\u5178\u578b\u4f8b\u5b50\u5c31\u5199\u4e86\u4e0b\u6765 \u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u4ece\u4e24\u8fb9\u79fb\u52a8\uff0c\u5982\u679c\u4e00\u76f4\u5927\u4e8etarget\u5c31\u4e00\u76f4\u5de6\u79fbright \u7136\u540eright - left\u5c31\u662f\u6240\u6709\u6210\u7acb\u7684\u6570\u76ee\uff0c\u518d\u79fb\u52a8left \u8fdb\u884c\u7b5b\u9009","title":"\u601d\u8def\uff1a"},{"location":"sf/45/#_4","text":"class Solution: def purchasePlans(self, nums: List[int], target: int) -> int: nums.sort() left = 0 right = len(nums) - 1 res = 0 while left < right and left < len(nums): while left < right and nums[right] + nums[left] > target: right -= 1 res += right - left left += 1 return res % (1000000007)","title":"\u4ee3\u7801\uff1a"},{"location":"sf/46/","text":"\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u9898\u76ee: https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/ \u601d\u8def\uff1a \u6ed1\u52a8\u7a97\u53e3\u5373\u53ef\uff0c\u6ed1\u52a8\u7a97\u53e3\u5c31\u662f\u9009\u53d6\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fdb\u884c\u64cd\u4f5c\uff0cleft \u548c right\u53ea\u80fd\u5411\u53f3\u79fb\u52a8 \u4ee3\u7801\uff1a class Solution: def findContinuousSequence(self, target: int) -> List[List[int]]: res = [] left,right = 1,2 while left <= target // 2: # \u4f18\u5316 \u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6 if sum(range(left,right+1)) < target: # \u5c0f\u4e8etarget \u53f3\u6307\u9488\u79fb\u52a8 right += 1 elif sum(range(left,right+1)) > target: # \u5927\u4e8etarget \u5de6\u6307\u9488\u79fb\u52a8 left += 1 else: res.append(list(range(left,right+1))) # \u76f8\u7b49\u7684\u8bdd \u4e24\u4e2a\u6307\u9488\u90fd\u79fb\u52a8 right += 1 left += 1 return res","title":"\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"sf/46/#s","text":"","title":"\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"sf/46/#_1","text":"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/","title":"\u9898\u76ee:"},{"location":"sf/46/#_2","text":"\u6ed1\u52a8\u7a97\u53e3\u5373\u53ef\uff0c\u6ed1\u52a8\u7a97\u53e3\u5c31\u662f\u9009\u53d6\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fdb\u884c\u64cd\u4f5c\uff0cleft \u548c right\u53ea\u80fd\u5411\u53f3\u79fb\u52a8","title":"\u601d\u8def\uff1a"},{"location":"sf/46/#_3","text":"class Solution: def findContinuousSequence(self, target: int) -> List[List[int]]: res = [] left,right = 1,2 while left <= target // 2: # \u4f18\u5316 \u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6 if sum(range(left,right+1)) < target: # \u5c0f\u4e8etarget \u53f3\u6307\u9488\u79fb\u52a8 right += 1 elif sum(range(left,right+1)) > target: # \u5927\u4e8etarget \u5de6\u6307\u9488\u79fb\u52a8 left += 1 else: res.append(list(range(left,right+1))) # \u76f8\u7b49\u7684\u8bdd \u4e24\u4e2a\u6307\u9488\u90fd\u79fb\u52a8 right += 1 left += 1 return res","title":"\u4ee3\u7801\uff1a"},{"location":"sf/47/","text":"\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/sliding-window-median/ \u601d\u8def\uff1a \u5f88\u660e\u663e\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6c42\u4e2d\u4f4d\u6570\u7684\u533f\u540d\u51fd\u6570\uff0c\u7136\u540e\u4e00\u70b9\u4e00\u70b9\u6c42\u51fa\u6765 \u4ee3\u7801\uff1a class Solution: def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]: median = lambda a: (a[(len(a)-1)//2] + a[len(a)//2]) / 2 res = [] for i in range(len(nums)-k+1): res.append(median(sorted(nums[i:i+k]))) return res","title":"\u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570"},{"location":"sf/47/#_1","text":"","title":"\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570"},{"location":"sf/47/#_2","text":"https://leetcode-cn.com/problems/sliding-window-median/","title":"\u9898\u76ee\uff1a"},{"location":"sf/47/#_3","text":"\u5f88\u660e\u663e\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6c42\u4e2d\u4f4d\u6570\u7684\u533f\u540d\u51fd\u6570\uff0c\u7136\u540e\u4e00\u70b9\u4e00\u70b9\u6c42\u51fa\u6765","title":"\u601d\u8def\uff1a"},{"location":"sf/47/#_4","text":"class Solution: def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]: median = lambda a: (a[(len(a)-1)//2] + a[len(a)//2]) / 2 res = [] for i in range(len(nums)-k+1): res.append(median(sorted(nums[i:i+k]))) return res","title":"\u4ee3\u7801\uff1a"},{"location":"sf/48/","text":"\u5bf9\u79f0\u4e8c\u53c9\u6811 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/symmetric-tree/ \u601d\u8def\uff1a \u5229\u7528\u53cc\u5411\u961f\u5217\uff0c\u6bcf\u6b21\u628a\u5bf9\u79f0\u7684\u4e24\u4e2a\u5bf9\u5e94\u7684\u8282\u70b9\u653e\u5165\u961f\u5217\u4e2d\uff0c\u7136\u540e\u53d6\u51fa\u6765\u6bd4\u8f83\uff0c\u5982\u679c\u503c\u4e0d\u76f8\u7b49\u5219\u8fd4\u56defalse,\u5982\u679c\u4e00\u8fb9\u4e3a\u7a7a \u4e00\u8fb9\u4e0d\u4e3a\u7a7a\u4e5f\u8fd4\u56defalse \u7b26\u5408\u6761\u4ef6\u7684\u8bdd\u5c31\u7ee7\u7eed\u641c\u7d22 \u4ee3\u7801\uff1a # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isSymmetric(self, root: TreeNode) -> bool: from collections import deque d = deque() d.append((root,root)) while d: left,right = d.popleft() if not left and not right: continue elif not left or not right: return False elif left.val != right.val: return False else: d.append((left.left,right.right)) d.append((left.right,right.left)) return True","title":"\u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"sf/48/#_1","text":"","title":"\u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"sf/48/#_2","text":"https://leetcode-cn.com/problems/symmetric-tree/","title":"\u9898\u76ee\uff1a"},{"location":"sf/48/#_3","text":"\u5229\u7528\u53cc\u5411\u961f\u5217\uff0c\u6bcf\u6b21\u628a\u5bf9\u79f0\u7684\u4e24\u4e2a\u5bf9\u5e94\u7684\u8282\u70b9\u653e\u5165\u961f\u5217\u4e2d\uff0c\u7136\u540e\u53d6\u51fa\u6765\u6bd4\u8f83\uff0c\u5982\u679c\u503c\u4e0d\u76f8\u7b49\u5219\u8fd4\u56defalse,\u5982\u679c\u4e00\u8fb9\u4e3a\u7a7a \u4e00\u8fb9\u4e0d\u4e3a\u7a7a\u4e5f\u8fd4\u56defalse \u7b26\u5408\u6761\u4ef6\u7684\u8bdd\u5c31\u7ee7\u7eed\u641c\u7d22","title":"\u601d\u8def\uff1a"},{"location":"sf/48/#_4","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isSymmetric(self, root: TreeNode) -> bool: from collections import deque d = deque() d.append((root,root)) while d: left,right = d.popleft() if not left and not right: continue elif not left or not right: return False elif left.val != right.val: return False else: d.append((left.left,right.right)) d.append((left.right,right.left)) return True","title":"\u4ee3\u7801\uff1a"},{"location":"sf/49/","text":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/longest-increasing-subsequence/ \u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212 \u5b9a\u4e49dp[i]\u4e3a\u5230nums[i]\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5168\u90e8\u90fd\u521d\u59cb\u5316\u4e3a1,\u56e0\u4e3a\u672c\u8eab\u5c31\u662f\u957f\u5ea6\u4e3a1\u7684\u9012\u589e\u5b50\u5e8f\u5217 \u4ee3\u7801\uff1a class Solution: def lengthOfLIS(self, nums: List[int]) -> int: dp = [1 for _ in range(len(nums))] for i in range(1,len(nums)): for j in range(i): if nums[j] < nums[i]: dp[i] = max(dp[i],dp[j]+1) return max(dp)","title":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217"},{"location":"sf/49/#_1","text":"","title":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217"},{"location":"sf/49/#_2","text":"https://leetcode-cn.com/problems/longest-increasing-subsequence/","title":"\u9898\u76ee\uff1a"},{"location":"sf/49/#_3","text":"\u52a8\u6001\u89c4\u5212 \u5b9a\u4e49dp[i]\u4e3a\u5230nums[i]\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5168\u90e8\u90fd\u521d\u59cb\u5316\u4e3a1,\u56e0\u4e3a\u672c\u8eab\u5c31\u662f\u957f\u5ea6\u4e3a1\u7684\u9012\u589e\u5b50\u5e8f\u5217","title":"\u601d\u8def\uff1a"},{"location":"sf/49/#_4","text":"class Solution: def lengthOfLIS(self, nums: List[int]) -> int: dp = [1 for _ in range(len(nums))] for i in range(1,len(nums)): for j in range(i): if nums[j] < nums[i]: dp[i] = max(dp[i],dp[j]+1) return max(dp)","title":"\u4ee3\u7801\uff1a"},{"location":"sf/5/","text":"\u6700\u5c0f\u516c\u4f17\u524d\u7f00 leetcode\u4e0a\u7684\u7b80\u5355\u9898\uff0c \u6700\u5c0f\u516c\u4f17\u524d\u7f00 \u6709\u4e09\u79cd\u89e3\u6cd5\uff0c\u4e00\u79cd\u5e38\u89c4\uff0c\u4e24\u79cd\u5de7\u5999\u89e3\u6cd5 # \u6700\u5c0f\u516c\u5171\u524d\u7f00 #\u89e31\uff1a\u5e38\u89c4\u89e3\u6cd5 \u601d\u8def\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u5224\u65ad \u5148\u5224\u65ad\u6240\u6709\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u76f8\u540c\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u5224\u65ad def longestCommonPrefix1(strs): if len(strs) == 0: return '' if len(strs) == 1: return strs[0] minl=min([len(x) for x in strs]) #\u6c42\u6700\u5c0f\u957f\u5ea6 end = 0 while end < minl: #\u5224\u65ad\u662f\u5426\u5230\u6700\u5c0f\u957f\u5ea6 for i in range(1,len(strs)): #\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u57fa\u51c6 if strs[i][end] != strs[i-1][end]: #\u5982\u679c\u5230end\u8fd9\u91cc\u4e0d\u518d\u76f8\u7b49 \u5219\u8fd4\u56de\u5230end\u8fd9\u91cc\u7684\u5b57\u7b26\u4e32\u5373\u6700\u5c0f\u516c\u5171\u524d\u7f00 return strs[0][:end] end+=1 return strs[0][:end] #\u5e38\u89c4\u65b9\u6cd5\u5bb9\u6613\u60f3\u5230 \u4f46\u662f\u7f3a\u70b9\u662f\u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u4ece\u6bcf\u6b21\u5224\u65ad\u90fd\u8981\u904d\u5386\u6240\u6709\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u770b\u51fa #\u89e32: \u901a\u8fc7ascii\u7801\u6765\u5224\u65ad #Python\u91cc\u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6309\u7167ascII\u503c\u6392 def longestCommonPrefix2(strs): if not strs: return 0 s1 = max(strs) s2 = min(strs) #\u627e\u51fas1 s2\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00\u5373\u4e3a\u6574\u4e2a\u5217\u8868\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00 for i,s in enumerate(s2): if s1[i] != s: return s1[:i] return s2 #\u901a\u8fc7max \u548c min \u51fd\u6570\u6765\u627e\u5230\u5217\u8868\u91cc\u9762\u6700\u5927\u6700\u5c0f\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32 \u7136\u540e\u627e\u5230\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00\u3002 #\u89e33\uff1a\u901a\u8fc7python\u8bed\u6cd5\u7cd6 \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5bf9\u5e94\u5b57\u7b26\u4e32\u5b58\u4e3a\u4e00\u7ec4\uff0c\u7528zip\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b58\u5728\u4e00\u8d77\uff0c\u7136\u540e\u7528set\u53bb\u91cd\uff0c\u5982\u679c\u7559\u4e0b\u4e86\u4e00\u4e2a\uff0c\u5219\u8bf4\u660e\u90fd\u91cd\u590d\u4e86\uff0c\u5219\u5c31\u662f\u76f8\u540c\u7684 def longestCommonPrefix3(strs): if not strs: return 0 cc = list(map(set,zip(*strs))) #\u4e3a\u4ec0\u4e48\u7528map\u5462 \u56e0\u4e3a\u8981\u5bf9zip\u538b\u7f29\u540e\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u53bb\u91cd res = '' #\u7ed3\u679c for i,s in enumerate(cc): x = list(s) if len(x) > 1: #\u5982\u679c\u957f\u5ea6\u5927\u4e8e1 \u8bf4\u660e\u6709\u4e0d\u4e00\u6837\u7684 \u5219\u76f4\u63a5\u9000\u51fa break res += x[0] return res \u5982\u4e0a\uff01","title":"\u6700\u5c0f\u516c\u4f17\u524d\u7f00"},{"location":"sf/5/#_1","text":"leetcode\u4e0a\u7684\u7b80\u5355\u9898\uff0c \u6700\u5c0f\u516c\u4f17\u524d\u7f00 \u6709\u4e09\u79cd\u89e3\u6cd5\uff0c\u4e00\u79cd\u5e38\u89c4\uff0c\u4e24\u79cd\u5de7\u5999\u89e3\u6cd5 # \u6700\u5c0f\u516c\u5171\u524d\u7f00 #\u89e31\uff1a\u5e38\u89c4\u89e3\u6cd5 \u601d\u8def\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u5224\u65ad \u5148\u5224\u65ad\u6240\u6709\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u76f8\u540c\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u5224\u65ad def longestCommonPrefix1(strs): if len(strs) == 0: return '' if len(strs) == 1: return strs[0] minl=min([len(x) for x in strs]) #\u6c42\u6700\u5c0f\u957f\u5ea6 end = 0 while end < minl: #\u5224\u65ad\u662f\u5426\u5230\u6700\u5c0f\u957f\u5ea6 for i in range(1,len(strs)): #\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u57fa\u51c6 if strs[i][end] != strs[i-1][end]: #\u5982\u679c\u5230end\u8fd9\u91cc\u4e0d\u518d\u76f8\u7b49 \u5219\u8fd4\u56de\u5230end\u8fd9\u91cc\u7684\u5b57\u7b26\u4e32\u5373\u6700\u5c0f\u516c\u5171\u524d\u7f00 return strs[0][:end] end+=1 return strs[0][:end] #\u5e38\u89c4\u65b9\u6cd5\u5bb9\u6613\u60f3\u5230 \u4f46\u662f\u7f3a\u70b9\u662f\u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u4ece\u6bcf\u6b21\u5224\u65ad\u90fd\u8981\u904d\u5386\u6240\u6709\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u770b\u51fa #\u89e32: \u901a\u8fc7ascii\u7801\u6765\u5224\u65ad #Python\u91cc\u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6309\u7167ascII\u503c\u6392 def longestCommonPrefix2(strs): if not strs: return 0 s1 = max(strs) s2 = min(strs) #\u627e\u51fas1 s2\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00\u5373\u4e3a\u6574\u4e2a\u5217\u8868\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00 for i,s in enumerate(s2): if s1[i] != s: return s1[:i] return s2 #\u901a\u8fc7max \u548c min \u51fd\u6570\u6765\u627e\u5230\u5217\u8868\u91cc\u9762\u6700\u5927\u6700\u5c0f\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32 \u7136\u540e\u627e\u5230\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u516c\u5171\u524d\u7f00\u3002 #\u89e33\uff1a\u901a\u8fc7python\u8bed\u6cd5\u7cd6 \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5bf9\u5e94\u5b57\u7b26\u4e32\u5b58\u4e3a\u4e00\u7ec4\uff0c\u7528zip\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b58\u5728\u4e00\u8d77\uff0c\u7136\u540e\u7528set\u53bb\u91cd\uff0c\u5982\u679c\u7559\u4e0b\u4e86\u4e00\u4e2a\uff0c\u5219\u8bf4\u660e\u90fd\u91cd\u590d\u4e86\uff0c\u5219\u5c31\u662f\u76f8\u540c\u7684 def longestCommonPrefix3(strs): if not strs: return 0 cc = list(map(set,zip(*strs))) #\u4e3a\u4ec0\u4e48\u7528map\u5462 \u56e0\u4e3a\u8981\u5bf9zip\u538b\u7f29\u540e\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u53bb\u91cd res = '' #\u7ed3\u679c for i,s in enumerate(cc): x = list(s) if len(x) > 1: #\u5982\u679c\u957f\u5ea6\u5927\u4e8e1 \u8bf4\u660e\u6709\u4e0d\u4e00\u6837\u7684 \u5219\u76f4\u63a5\u9000\u51fa break res += x[0] return res \u5982\u4e0a\uff01","title":"\u6700\u5c0f\u516c\u4f17\u524d\u7f00"},{"location":"sf/50/","text":"\u5206\u5272\u7b49\u548c\u5b50\u96c6 \u9898\u76ee\uff1a https://leetcode-cn.com/problems/partition-equal-subset-sum/?utm_source=LCUS&utm_medium=ip_redirect&utm_campaign=transfer2china \u601d\u8def\uff1a \u5178\u578b\u768401\u80cc\u5305\u95ee\u9898\uff0c\u5229\u7528\u5957\u8def\u6846\u67b6\u505a\u5373\u53ef \u6ce8\u610f\u505a\u4e86\u4f18\u5316\uff0c\u628a\u539f\u672c\u7684\u4e8c\u7ef4dp\u964d\u4f4e\u4e86\u4e00\u7ef4 \u4ee3\u7801\uff1a class Solution: def canPartition(self, nums: List[int]) -> bool: if sum(nums) % 2: return False s = sum(nums) // 2 dp = [False for _ in range(s+1)] dp[0] = True for i in range(1,len(nums)+1): for j in range(s,nums[i-1]-1,-1): # \u5bb9\u91cf dp[j] = dp[j] or dp[j-nums[i-1]] # \u7528\u4e86or\u64cd\u4f5c\u7b26 return dp[s] \u66f4\u4e00\u822c\u7684\u5957\u8def\uff0c\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7136\u540e\u4e8c\u7ef4dp # i\u4ee3\u8868\u524di\u4e2a\u7269\u54c1,j\u4ee3\u8868\u80cc\u5305\u5bb9\u91cf\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: if len(nums) <= 1: return False if sum(nums) % 2: return False s = sum(nums) // 2 dp = [[False for _ in range(s+1)] for _ in range(len(nums)+1)] for i in range(len(nums)+1): dp[i][0] = True # \u80cc\u5305\u5bb9\u91cf\u4e3a0\u65f6 \u6c38\u8fdc\u90fd\u662f\u6ee1\u7684 \u6240\u4ee5\u4e3atrue for i in range(1,len(nums)+1): # \u7269\u54c1\u4e2a\u6570 for j in range(1,s+1): # \u80cc\u5305\u5bb9\u91cf\uff0c\u6700\u5927\u4e3a\u603b\u548c\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u6c42\u7684 if j - nums[i-1] < 0: # \u5982\u679c\u5bb9\u91cf\u5c0f\u4e8e\u5f53\u524d\u7269\u54c1\u7684\u91cd\u91cf dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] if dp[i][s]: # \u526a\u679d return True return dp[len(nums)][s] '''\u9996\u5148\uff0c\u7531\u4e8ei\u662f\u4ece 1 \u5f00\u59cb\u7684\uff0c\u800c\u6570\u7ec4\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u7b2ci\u4e2a\u7269\u54c1\u7684\u91cd\u91cf\u5e94\u8be5\u662fnums[i-1]\uff0c\u8fd9\u4e00\u70b9\u4e0d\u8981\u641e\u6df7\u3002 dp[i - 1][j-nums[i-1]]\u4e5f\u5f88\u597d\u7406\u89e3\uff1a\u4f60\u5982\u679c\u88c5\u4e86\u7b2ci\u4e2a\u7269\u54c1\uff0c\u5c31\u8981\u770b\u80cc\u5305\u7684\u5269\u4f59\u91cd\u91cfj - nums[i-1]\u9650\u5236\u4e0b\u662f\u5426\u80fd\u591f\u88ab\u6070\u597d\u88c5\u6ee1\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679cj - nums[i-1]\u7684\u91cd\u91cf\u53ef\u4ee5\u88ab\u6070\u597d\u88c5\u6ee1\uff0c\u90a3\u4e48\u53ea\u8981\u628a\u7b2ci\u4e2a\u7269\u54c1\u88c5\u8fdb\u53bb\uff0c\u4e5f\u53ef\u6070\u597d\u88c5\u6ee1j\u7684\u91cd\u91cf\uff1b\u5426\u5219\u7684\u8bdd\uff0c\u91cd\u91cfj\u80af\u5b9a\u662f\u88c5\u4e0d\u6ee1\u7684\u3002'''","title":"\u5206\u5272\u7b49\u548c\u5b50\u96c6"},{"location":"sf/50/#_1","text":"","title":"\u5206\u5272\u7b49\u548c\u5b50\u96c6"},{"location":"sf/50/#_2","text":"https://leetcode-cn.com/problems/partition-equal-subset-sum/?utm_source=LCUS&utm_medium=ip_redirect&utm_campaign=transfer2china","title":"\u9898\u76ee\uff1a"},{"location":"sf/50/#_3","text":"\u5178\u578b\u768401\u80cc\u5305\u95ee\u9898\uff0c\u5229\u7528\u5957\u8def\u6846\u67b6\u505a\u5373\u53ef \u6ce8\u610f\u505a\u4e86\u4f18\u5316\uff0c\u628a\u539f\u672c\u7684\u4e8c\u7ef4dp\u964d\u4f4e\u4e86\u4e00\u7ef4","title":"\u601d\u8def\uff1a"},{"location":"sf/50/#_4","text":"class Solution: def canPartition(self, nums: List[int]) -> bool: if sum(nums) % 2: return False s = sum(nums) // 2 dp = [False for _ in range(s+1)] dp[0] = True for i in range(1,len(nums)+1): for j in range(s,nums[i-1]-1,-1): # \u5bb9\u91cf dp[j] = dp[j] or dp[j-nums[i-1]] # \u7528\u4e86or\u64cd\u4f5c\u7b26 return dp[s] \u66f4\u4e00\u822c\u7684\u5957\u8def\uff0c\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7136\u540e\u4e8c\u7ef4dp # i\u4ee3\u8868\u524di\u4e2a\u7269\u54c1,j\u4ee3\u8868\u80cc\u5305\u5bb9\u91cf\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: if len(nums) <= 1: return False if sum(nums) % 2: return False s = sum(nums) // 2 dp = [[False for _ in range(s+1)] for _ in range(len(nums)+1)] for i in range(len(nums)+1): dp[i][0] = True # \u80cc\u5305\u5bb9\u91cf\u4e3a0\u65f6 \u6c38\u8fdc\u90fd\u662f\u6ee1\u7684 \u6240\u4ee5\u4e3atrue for i in range(1,len(nums)+1): # \u7269\u54c1\u4e2a\u6570 for j in range(1,s+1): # \u80cc\u5305\u5bb9\u91cf\uff0c\u6700\u5927\u4e3a\u603b\u548c\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u6c42\u7684 if j - nums[i-1] < 0: # \u5982\u679c\u5bb9\u91cf\u5c0f\u4e8e\u5f53\u524d\u7269\u54c1\u7684\u91cd\u91cf dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] if dp[i][s]: # \u526a\u679d return True return dp[len(nums)][s] '''\u9996\u5148\uff0c\u7531\u4e8ei\u662f\u4ece 1 \u5f00\u59cb\u7684\uff0c\u800c\u6570\u7ec4\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u7b2ci\u4e2a\u7269\u54c1\u7684\u91cd\u91cf\u5e94\u8be5\u662fnums[i-1]\uff0c\u8fd9\u4e00\u70b9\u4e0d\u8981\u641e\u6df7\u3002 dp[i - 1][j-nums[i-1]]\u4e5f\u5f88\u597d\u7406\u89e3\uff1a\u4f60\u5982\u679c\u88c5\u4e86\u7b2ci\u4e2a\u7269\u54c1\uff0c\u5c31\u8981\u770b\u80cc\u5305\u7684\u5269\u4f59\u91cd\u91cfj - nums[i-1]\u9650\u5236\u4e0b\u662f\u5426\u80fd\u591f\u88ab\u6070\u597d\u88c5\u6ee1\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679cj - nums[i-1]\u7684\u91cd\u91cf\u53ef\u4ee5\u88ab\u6070\u597d\u88c5\u6ee1\uff0c\u90a3\u4e48\u53ea\u8981\u628a\u7b2ci\u4e2a\u7269\u54c1\u88c5\u8fdb\u53bb\uff0c\u4e5f\u53ef\u6070\u597d\u88c5\u6ee1j\u7684\u91cd\u91cf\uff1b\u5426\u5219\u7684\u8bdd\uff0c\u91cd\u91cfj\u80af\u5b9a\u662f\u88c5\u4e0d\u6ee1\u7684\u3002'''","title":"\u4ee3\u7801\uff1a"},{"location":"sf/6/","text":"\u79fb\u9664\u5143\u7d20 \u8fd8\u662f\u4ee5\u524d\u5237\u8fc7\u7684\u9898 https://leetcode-cn.com/problems/remove-element/ \u4ee5\u524d\u7684\u601d\u8def\u65e9\u5fd8\u4e86 \u7136\u540e\u6211\u91cd\u65b0\u505a\u4e86\u4e00\u4e0b\uff0c\u4e00\u5f00\u59cb\u5c31\u4e00\u884c\u4ee3\u7801 class Solution: def removeElement(self, nums: List[int], val: int) -> int: return len(list(filter(lambda x:x!=val,nums))) \u200b \u7136\u540e\u53d1\u73b0\u8f93\u51fa\u548c\u6b63\u786e\u8f93\u51fa\u4e0d\u4e00\u6837\u3002\u4e8e\u662f\u770b\u4e86\u4e86\u4e0b\u9762\u7684\u63d0\u793a\uff0c\u7136\u540e\u6539\u4e86\u6539 class Solution: def removeElement(self, nums: List[int], val: int) -> int: for i in range(nums.count(val)): nums.remove(val) return len(nums)","title":"\u79fb\u9664\u5143\u7d20"},{"location":"sf/6/#_1","text":"\u8fd8\u662f\u4ee5\u524d\u5237\u8fc7\u7684\u9898 https://leetcode-cn.com/problems/remove-element/ \u4ee5\u524d\u7684\u601d\u8def\u65e9\u5fd8\u4e86 \u7136\u540e\u6211\u91cd\u65b0\u505a\u4e86\u4e00\u4e0b\uff0c\u4e00\u5f00\u59cb\u5c31\u4e00\u884c\u4ee3\u7801 class Solution: def removeElement(self, nums: List[int], val: int) -> int: return len(list(filter(lambda x:x!=val,nums))) \u200b \u7136\u540e\u53d1\u73b0\u8f93\u51fa\u548c\u6b63\u786e\u8f93\u51fa\u4e0d\u4e00\u6837\u3002\u4e8e\u662f\u770b\u4e86\u4e86\u4e0b\u9762\u7684\u63d0\u793a\uff0c\u7136\u540e\u6539\u4e86\u6539 class Solution: def removeElement(self, nums: List[int], val: int) -> int: for i in range(nums.count(val)): nums.remove(val) return len(nums)","title":"\u79fb\u9664\u5143\u7d20"},{"location":"sf/7/","text":"\u6709\u6548\u7684\u6570\u72ec https://leetcode-cn.com/problems/valid-sudoku/ #\u6709\u6548\u7684\u6570\u72ec \u96be\u70b9\u5728\u5c063*3\u91cc\u7684\u6570\u53d6\u51fa\u6765 class Solution: def isValidSudoku(board) -> bool: for line1,line2 in zip(board,zip(*board)): #\u884c\u5217 for n1,n2 in zip(line1,line2): if (n1 != '.' and line1.count(n1) > 1) or (n2!='.' and line2.count(n2) >1): return False pal = [[board[i+m][j+n] for m in range(3) for n in range(3) if board[i+m][j+n] != '.'] for i in (0, 3, 6) for j in (0, 3, 6)] for line in pal: if len(set(line)) != len(line): return False return True","title":"\u6709\u6548\u7684\u6570\u72ec"},{"location":"sf/7/#_1","text":"https://leetcode-cn.com/problems/valid-sudoku/ #\u6709\u6548\u7684\u6570\u72ec \u96be\u70b9\u5728\u5c063*3\u91cc\u7684\u6570\u53d6\u51fa\u6765 class Solution: def isValidSudoku(board) -> bool: for line1,line2 in zip(board,zip(*board)): #\u884c\u5217 for n1,n2 in zip(line1,line2): if (n1 != '.' and line1.count(n1) > 1) or (n2!='.' and line2.count(n2) >1): return False pal = [[board[i+m][j+n] for m in range(3) for n in range(3) if board[i+m][j+n] != '.'] for i in (0, 3, 6) for j in (0, 3, 6)] for line in pal: if len(set(line)) != len(line): return False return True","title":"\u6709\u6548\u7684\u6570\u72ec"},{"location":"sf/8/","text":"\u65cb\u8f6c\u56fe\u50cf https://leetcode-cn.com/problems/rotate-image/ \u6ca1\u96be\u5ea6\u7684\u4e2d\u7b49\u9898\uff0c\u8fd9\u65b9\u6cd5\u5f88python class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \"\"\" n = len(matrix) for i in list(map(list,map(reversed,zip(*matrix)))): matrix.append(i) del matrix[:n]","title":"\u65cb\u8f6c\u56fe\u50cf"},{"location":"sf/8/#_1","text":"https://leetcode-cn.com/problems/rotate-image/ \u6ca1\u96be\u5ea6\u7684\u4e2d\u7b49\u9898\uff0c\u8fd9\u65b9\u6cd5\u5f88python class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \"\"\" n = len(matrix) for i in list(map(list,map(reversed,zip(*matrix)))): matrix.append(i) del matrix[:n]","title":"\u65cb\u8f6c\u56fe\u50cf"},{"location":"sf/9/","text":"\u53bb\u9664\u91cd\u590d\u5b57\u6bcd \u4e00\u5f00\u59cb\u770b\u5230\u9898\u76ee\u611f\u89c9\u633a\u7b80\u5355\u7684\uff0c\u6ca1\u60f3\u5230\u5bf9\u73b0\u5728\u7684\u6211\u633a\u6709\u96be\u5ea6\u3002\u3002 https://leetcode-cn.com/problems/remove-duplicate-letters/ #1 class Solution: def removeDuplicateLetters(s: str): res = \"\" while s: #\u7528\u9012\u5f52\u4e5f\u53ef\u4ee5 loc = min(map(s.rindex,s)) #s.rindex\u662f\u8fd4\u56de\u5217\u8868\u5404\u503c\u6700\u540e\u51fa\u73b0\u7684\u7d22\u5f15 \u6c42\u8fd9\u4e2a\u6700\u5c0f\u7684\u7d22\u5f15 a = min(s[:loc+1]) #\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 res += a s = s[s.index(a):].replace(a,\"\") #\u628a\u5df2\u7ecf\u52a0\u5165\u7684\u548c\u4e0e\u5176\u91cd\u590d\u7684\u90fd\u53bb\u6389\u4e86 return res #2 #\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u538b\u5165\u6808\uff0c\u5982\u679c\u9047\u5230\u6bd4\u6808\u9876\u5c0f\u7684\u5143\u7d20\u4e14\u5f53\u524d\u5b57\u7b26\u540e\u9762\u8fd8\u6709\u4e0e\u6808\u9876\u76f8\u540c\u7684\u5143\u7d20\u65f6\uff0c\u79fb\u9664\u6808\u9876\u5143\u7d20 class Solution: def removeDuplicateLetters(s: str) -> str: stack = [] for i, t in enumerate(s): if t in stack: continue while stack !=[] and t < stack[-1] and s[i:].find(stack[-1]) != -1: stack.pop() stack.append(t) return \"\".join(stack) \u4e24\u4e2a\u65b9\u6cd5\uff0c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u66f4\u597d\u60f3\u70b9\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662fcopy\u7684","title":"\u53bb\u6389\u91cd\u590d\u5b57\u6bcd"},{"location":"sf/9/#_1","text":"\u4e00\u5f00\u59cb\u770b\u5230\u9898\u76ee\u611f\u89c9\u633a\u7b80\u5355\u7684\uff0c\u6ca1\u60f3\u5230\u5bf9\u73b0\u5728\u7684\u6211\u633a\u6709\u96be\u5ea6\u3002\u3002 https://leetcode-cn.com/problems/remove-duplicate-letters/ #1 class Solution: def removeDuplicateLetters(s: str): res = \"\" while s: #\u7528\u9012\u5f52\u4e5f\u53ef\u4ee5 loc = min(map(s.rindex,s)) #s.rindex\u662f\u8fd4\u56de\u5217\u8868\u5404\u503c\u6700\u540e\u51fa\u73b0\u7684\u7d22\u5f15 \u6c42\u8fd9\u4e2a\u6700\u5c0f\u7684\u7d22\u5f15 a = min(s[:loc+1]) #\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 res += a s = s[s.index(a):].replace(a,\"\") #\u628a\u5df2\u7ecf\u52a0\u5165\u7684\u548c\u4e0e\u5176\u91cd\u590d\u7684\u90fd\u53bb\u6389\u4e86 return res #2 #\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u538b\u5165\u6808\uff0c\u5982\u679c\u9047\u5230\u6bd4\u6808\u9876\u5c0f\u7684\u5143\u7d20\u4e14\u5f53\u524d\u5b57\u7b26\u540e\u9762\u8fd8\u6709\u4e0e\u6808\u9876\u76f8\u540c\u7684\u5143\u7d20\u65f6\uff0c\u79fb\u9664\u6808\u9876\u5143\u7d20 class Solution: def removeDuplicateLetters(s: str) -> str: stack = [] for i, t in enumerate(s): if t in stack: continue while stack !=[] and t < stack[-1] and s[i:].find(stack[-1]) != -1: stack.pop() stack.append(t) return \"\".join(stack) \u4e24\u4e2a\u65b9\u6cd5\uff0c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u66f4\u597d\u60f3\u70b9\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662fcopy\u7684","title":"\u53bb\u9664\u91cd\u590d\u5b57\u6bcd"},{"location":"sf/python_lq/","text":"python\u5237\u9898\u9488\u5bf9\u84dd\u6865\u676f\u548cleetcode \u5e38\u7528\u6a21\u5757\uff1aitertools,collections,datetime,random random: import random random.random() #\u968f\u673a\u751f\u62100-1\u968f\u673a\u6d6e\u70b9\u6570 random.randint(n,m) #\u751f\u6210n\u5230m\u7684\u968f\u673a\u4e00\u4e2a\u6570 random.uniform(1.1,5.4) #\u751f\u62101.1-5.4\u4e2d\u95f4\u4e00\u4e2a\u6d6e\u70b9\u6570 random.choice(['\u77f3\u5934','\u526a\u5200','\u5e03']) #\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u9009\u4e00\u4e2a random.shuffle(<list>) #\u6253\u4e71\u5e8f\u5217 random.sample('abcde12345ABCDE',5) #\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u90095\u4e2a datetime: import datetime datetime.date.today() #\u4eca\u5929\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYY-MM-DD d = datetime.date(2020,12,10) #\u751f\u6210\u4e00\u4e2a\u65e5\u671f\u5bf9\u8c61 d.year d.month d.day\u83b7\u53d6\u5e74\u6708\u65e5 d.__format__(\"%Y-%m-%d\") collections: from collections import Counter #\u8ba1\u6570\u5668 s = \"hello-python-hello-world\" a = Counter(s) print(a) #\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178 \u8fd8\u6709python cookbook\u91cc\u9762\u7684\u4e00\u4e9b\u6280\u5de7\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387","title":"python\u5237\u9898"},{"location":"sf/python_lq/#pythonleetcode","text":"\u5e38\u7528\u6a21\u5757\uff1aitertools,collections,datetime,random random: import random random.random() #\u968f\u673a\u751f\u62100-1\u968f\u673a\u6d6e\u70b9\u6570 random.randint(n,m) #\u751f\u6210n\u5230m\u7684\u968f\u673a\u4e00\u4e2a\u6570 random.uniform(1.1,5.4) #\u751f\u62101.1-5.4\u4e2d\u95f4\u4e00\u4e2a\u6d6e\u70b9\u6570 random.choice(['\u77f3\u5934','\u526a\u5200','\u5e03']) #\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u9009\u4e00\u4e2a random.shuffle(<list>) #\u6253\u4e71\u5e8f\u5217 random.sample('abcde12345ABCDE',5) #\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u90095\u4e2a datetime: import datetime datetime.date.today() #\u4eca\u5929\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYY-MM-DD d = datetime.date(2020,12,10) #\u751f\u6210\u4e00\u4e2a\u65e5\u671f\u5bf9\u8c61 d.year d.month d.day\u83b7\u53d6\u5e74\u6708\u65e5 d.__format__(\"%Y-%m-%d\") collections: from collections import Counter #\u8ba1\u6570\u5668 s = \"hello-python-hello-world\" a = Counter(s) print(a) #\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178 \u8fd8\u6709python cookbook\u91cc\u9762\u7684\u4e00\u4e9b\u6280\u5de7\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387","title":"python\u5237\u9898\u9488\u5bf9\u84dd\u6865\u676f\u548cleetcode"},{"location":"sklearn/","text":"Sklearn\u5b66\u4e60 \u5176\u5b9e\u65e9\u5c31\u5b66\u4e60\u8fc7\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u4e86\uff0c\u73b0\u5728\u53ea\u662f\u628a\u7b14\u8bb0\u6574\u7406\u8d77\u6765\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8be2\u548c\u56de\u987e START!","title":"\u4ecb\u7ecd"},{"location":"sklearn/#sklearn","text":"\u5176\u5b9e\u65e9\u5c31\u5b66\u4e60\u8fc7\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u4e86\uff0c\u73b0\u5728\u53ea\u662f\u628a\u7b14\u8bb0\u6574\u7406\u8d77\u6765\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8be2\u548c\u56de\u987e START!","title":"Sklearn\u5b66\u4e60"},{"location":"sklearn/Decision%20Tree/","text":"import numpy as np import matplotlib.pyplot as plt import pandas as pd dataset = pd.read_csv('./datasets/Social_Network_Ads.csv') X = dataset.iloc[:, [2, 3]].values y = dataset.iloc[:, 4].values from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) from sklearn.tree import DecisionTreeClassifier classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0) classifier.fit(X_train, y_train) DecisionTreeClassifier(criterion='entropy', random_state=0) classifier.score(X_test,y_test) 0.91","title":"Decision Tree"},{"location":"sklearn/KNN/","text":"\u5bfc\u5165\u5305 import numpy as np import pandas as pd from sklearn.model_selection import train_test_split import plotly.graph_objects as go \u5bfc\u5165\u6570\u636e data = pd.read_csv(\"./datasets/Social_Network_Ads.csv\") X = data.iloc[:,[2,3]].values Y = data.iloc[:,4].values # scatter = go.Scatter(x=X[:,0],y=X[:,1],mode='markers',marker={'color':Y}) # fig = go.Figure(scatter) # fig.show() X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.25,random_state=0) \u6807\u51c6\u5316 from sklearn.preprocessing import StandardScaler sca = StandardScaler() X_train = sca.fit_transform(X_train) X_test = sca.transform(X_test) \u8bad\u7ec3\u6a21\u578b from sklearn.neighbors import KNeighborsClassifier model = KNeighborsClassifier(n_neighbors=5,p=2) model.fit(X_train,Y_train) KNeighborsClassifier() \u6a21\u578b\u5f97\u5206 model.score(X_test,Y_test) 0.93","title":"KNN"},{"location":"sklearn/KNN/#_1","text":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split import plotly.graph_objects as go","title":"\u5bfc\u5165\u5305"},{"location":"sklearn/KNN/#_2","text":"data = pd.read_csv(\"./datasets/Social_Network_Ads.csv\") X = data.iloc[:,[2,3]].values Y = data.iloc[:,4].values # scatter = go.Scatter(x=X[:,0],y=X[:,1],mode='markers',marker={'color':Y}) # fig = go.Figure(scatter) # fig.show() X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.25,random_state=0)","title":"\u5bfc\u5165\u6570\u636e"},{"location":"sklearn/KNN/#_3","text":"from sklearn.preprocessing import StandardScaler sca = StandardScaler() X_train = sca.fit_transform(X_train) X_test = sca.transform(X_test)","title":"\u6807\u51c6\u5316"},{"location":"sklearn/KNN/#_4","text":"from sklearn.neighbors import KNeighborsClassifier model = KNeighborsClassifier(n_neighbors=5,p=2) model.fit(X_train,Y_train) KNeighborsClassifier()","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"sklearn/KNN/#_5","text":"model.score(X_test,Y_test) 0.93","title":"\u6a21\u578b\u5f97\u5206"},{"location":"sklearn/Logistic%20Regression/","text":"\u5bfc\u5165\u5305 import numpy as np import pandas as pd \u5bfc\u5165\u6570\u636e data = pd.read_csv(\"./datasets/Social_Network_Ads.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } User ID Gender Age EstimatedSalary Purchased 0 15624510 Male 19 19000 0 1 15810944 Male 35 20000 0 2 15668575 Female 26 43000 0 3 15603246 Female 27 57000 0 4 15804002 Male 19 76000 0 X = data.iloc[:,[2,3]].values Y = data.iloc[:,4].values \u4ea4\u53c9\u9a8c\u8bc1 from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,train_size=1/4,random_state=0) \u6807\u51c6\u5316 from sklearn.preprocessing import StandardScaler standardscaler = StandardScaler() X_train = standardscaler.fit_transform(X_train) X_test = standardscaler.transform(X_test) \u8bad\u7ec3\u6a21\u578b from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X_train,Y_train) LogisticRegression() \u6a21\u578b\u5f97\u5206 model.score(X_test,Y_test) 0.7933333333333333","title":"Logistic Regression"},{"location":"sklearn/Logistic%20Regression/#_1","text":"import numpy as np import pandas as pd","title":"\u5bfc\u5165\u5305"},{"location":"sklearn/Logistic%20Regression/#_2","text":"data = pd.read_csv(\"./datasets/Social_Network_Ads.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } User ID Gender Age EstimatedSalary Purchased 0 15624510 Male 19 19000 0 1 15810944 Male 35 20000 0 2 15668575 Female 26 43000 0 3 15603246 Female 27 57000 0 4 15804002 Male 19 76000 0 X = data.iloc[:,[2,3]].values Y = data.iloc[:,4].values","title":"\u5bfc\u5165\u6570\u636e"},{"location":"sklearn/Logistic%20Regression/#_3","text":"from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,train_size=1/4,random_state=0)","title":"\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"sklearn/Logistic%20Regression/#_4","text":"from sklearn.preprocessing import StandardScaler standardscaler = StandardScaler() X_train = standardscaler.fit_transform(X_train) X_test = standardscaler.transform(X_test)","title":"\u6807\u51c6\u5316"},{"location":"sklearn/Logistic%20Regression/#_5","text":"from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X_train,Y_train) LogisticRegression()","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"sklearn/Logistic%20Regression/#_6","text":"model.score(X_test,Y_test) 0.7933333333333333","title":"\u6a21\u578b\u5f97\u5206"},{"location":"sklearn/SVM/","text":"import numpy as np import pandas as pd import matplotlib.pyplot as plt data = pd.read_csv(\"./datasets/Social_Network_Ads.csv\") X = data.iloc[:, [2, 3]].values y = data.iloc[:, 4].values from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.fit_transform(X_test) from sklearn.svm import SVC classifier = SVC(kernel = 'linear', random_state = 0) classifier.fit(X_train, y_train) SVC(kernel='linear', random_state=0) y_pred = classifier.predict(X_test) classifier.score(X_test,y_test) 0.88 from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) from matplotlib.colors import ListedColormap X_set, y_set = X_train, y_train X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01), np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01)) plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green'))) plt.xlim(X1.min(), X1.max()) plt.ylim(X2.min(), X2.max()) for i, j in enumerate(np.unique(y_set)): plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j) plt.title('SVM (Training set)') plt.xlabel('Age') plt.ylabel('Estimated Salary') plt.legend() plt.show() from matplotlib.colors import ListedColormap X_set, y_set = X_test, y_test X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01), np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01)) plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green'))) plt.xlim(X1.min(), X1.max()) plt.ylim(X2.min(), X2.max()) for i, j in enumerate(np.unique(y_set)): plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j) plt.title('SVM (Test set)') plt.xlabel('Age') plt.ylabel('Estimated Salary') plt.legend() plt.show()","title":"SVM"},{"location":"sklearn/kmeans/","text":"import numpy as np import matplotlib.pyplot as plt from sklearn import metrics from sklearn.datasets import make_blobs from sklearn.cluster import KMeans from sklearn.datasets import load_iris %matplotlib inline X,y = make_blobs(n_samples=100,n_features=2,centers=[[-1,-1],[0,0],[1,1],[2,2]],cluster_std=[0.4,0.2,0.2,0.2])#\u4f7f\u7528make_blobs\u751f\u6210\u8bad\u7ec3\u6570\u636e\uff0c\u751f\u6210100\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c2\u4e2a\u7279\u5f81\uff0c\u51714\u4e2a\u805a\u7c7b\uff0c\u805a\u7c7b\u4e2d\u5fc3\u5206\u522b\u4e3a[-1,-1],[0,0],[1,1],[2,2]\uff0c\u805a\u7c7b\u65b9\u5dee\u5206\u522b\u4e3a0.4,0.2,0.2,0.2 plt.scatter(X[:,0],X[:,1])#\u753b\u51fa\u8bad\u7ec3\u6837\u672c\u7684\u6563\u70b9\u56fe\uff0c\u6563\u70b9\u56fe\u7684\u6a2a\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e00\u7ef4\u7279\u5f81\uff0c\u7eb5\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e8c\u7ef4\u7279\u5f81 plt.show() kmeans = KMeans(n_clusters=3)#\u751f\u6210kmeans\u5206\u7c7b\u5668,\u805a\u7c7b\u6570\u91cf\u4e3a3\uff0c\u5176\u4f59\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 y_pred = kmeans.fit_predict(X)#\u4f7f\u7528fit_predict\u65b9\u6cd5\u8ba1\u7b97\u805a\u7c7b\u4e2d\u5fc3\u5e76\u4e14\u9884\u6d4b\u6bcf\u4e2a\u6837\u672c\u7684\u805a\u7c7b\u7d22\u5f15\u3002 plt.scatter(X[:,0],X[:,1],c=y_pred)#\u753b\u51fa\u8bad\u7ec3\u6837\u672c\u7684\u6563\u70b9\u56fe\uff0c\u6563\u70b9\u56fe\u7684\u6a2a\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e00\u7ef4\u7279\u5f81\uff0c\u7eb5\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e8c\u7ef4\u7279\u5f81\uff0c\u5c06\u5404\u805a\u7c7b\u7ed3\u679c\u663e\u793a\u4e3a\u4e0d\u540c\u7684\u989c\u8272 plt.show() kmeans = KMeans(n_clusters=4)#\u751f\u6210kmeans\u5206\u7c7b\u5668,\u805a\u7c7b\u6570\u91cf\u4e3a4\uff0c\u5176\u4f59\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 y_pred = kmeans.fit_predict(X)#\u4f7f\u7528fit_predict\u65b9\u6cd5\u8ba1\u7b97\u805a\u7c7b\u4e2d\u5fc3\u5e76\u4e14\u9884\u6d4b\u6bcf\u4e2a\u6837\u672c\u7684\u805a\u7c7b\u7d22\u5f15\u3002 plt.scatter(X[:,0],X[:,1],c=y_pred)#\u753b\u51fa\u8bad\u7ec3\u6837\u672c\u7684\u6563\u70b9\u56fe\uff0c\u6563\u70b9\u56fe\u7684\u6a2a\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e00\u7ef4\u7279\u5f81\uff0c\u7eb5\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e8c\u7ef4\u7279\u5f81\uff0c\u5c06\u5404\u805a\u7c7b\u7ed3\u679c\u663e\u793a\u4e3a\u4e0d\u540c\u7684\u989c\u8272 plt.show() iris = load_iris() #\u5bfc\u5165iris\u6570\u636e\u96c6,iris\u6570\u636e\u96c6\u5305\u542b\u4e86150\u4e2a\u6837\u672c\uff0c\u5206\u522b\u5c5e\u4e8e3\u7c7b\uff0c\u6bcf\u4e2a\u6837\u672c\u5305\u542b4\u4e2a\u7279\u5f81 data_train=iris.data #iris\u6837\u672c\u96c6\u7684\u6837\u672c\u7279\u5f81 label_train=iris.target #iris\u6837\u672c\u96c6\u7684\u6837\u672c\u6807\u7b7e kmeans = KMeans(n_clusters=3)#\u751f\u6210kmeans\u5206\u7c7b\u5668,\u805a\u7c7b\u6570\u91cf\u4e3a3\uff0c\u5176\u4f59\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 y_predict = kmeans.fit_predict(data_train)#\u4f7f\u7528fit_predict\u65b9\u6cd5\u8ba1\u7b97\u805a\u7c7b\u4e2d\u5fc3\u5e76\u4e14\u9884\u6d4b\u6bcf\u4e2a\u6837\u672c\u7684\u805a\u7c7b\u7d22\u5f15\u3002 plt.scatter(data_train[:,0],data_train[:,2],c=y_predict)#\u753b\u51fa\u8bad\u7ec3\u6837\u672c\u7684\u6563\u70b9\u56fe\uff0c\u6563\u70b9\u56fe\u7684\u6a2a\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e00\u7ef4\u7279\u5f81\uff0c\u7eb5\u5750\u6807\u4e3a\u6837\u672c\u7684\u7b2c\u4e09\u7ef4\u7279\u5f81\uff0c\u5c06\u5404\u805a\u7c7b\u7ed3\u679c\u663e\u793a\u4e3a\u4e0d\u540c\u7684\u989c\u8272 plt.show()","title":"K-means\u805a\u7c7b\u7b97\u6cd5"},{"location":"sklearn/random%20forest/","text":"\u548c\u4e4b\u524d\u7684\u975e\u5e38\u76f8\u4f3c \u53ea\u662f\u6362\u4e86\u4e2a\u7b97\u6cd5","title":"Random Forest"},{"location":"sklearn/random%20forest/#_1","text":"","title":"\u548c\u4e4b\u524d\u7684\u975e\u5e38\u76f8\u4f3c \u53ea\u662f\u6362\u4e86\u4e2a\u7b97\u6cd5"},{"location":"sklearn/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/","text":"\u200b import numpy as np from sklearn.model_selection import train_test_split,cross_val_score from sklearn import datasets from sklearn.neighbors import KNeighborsClassifier data = datasets.load_iris() X = data.data Y = data.target k_scores = [] for k in range(1,31): model = KNeighborsClassifier(n_neighbors=k) scores = cross_val_score(model,X,Y,cv=10,scoring=\"accuracy\") k_scores.append(scores.mean())","title":"\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"sklearn/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","text":"import pandas as pd import numpy as np \u8bfb\u5165\u6570\u636e data = pd.read_csv(\"./datasets/50_Startups.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } R&D Spend Administration Marketing Spend State Profit 0 165349.20 136897.80 471784.10 New York 192261.83 1 162597.70 151377.59 443898.53 California 191792.06 2 153441.51 101145.55 407934.54 Florida 191050.39 3 144372.41 118671.85 383199.62 New York 182901.99 4 142107.34 91391.77 366168.42 Florida 166187.94 \u5206\u5f00xy X = data.iloc[:,:-1].values Y = data.iloc[:,-1].values \u7f16\u7801 from sklearn.preprocessing import LabelEncoder,OneHotEncoder labelEncoder = LabelEncoder() X[:,3] = labelEncoder.fit_transform(X[:,3]) onehotencoder = OneHotEncoder() X = onehotencoder.fit_transform(X).toarray() X = X[:,1:] from sklearn.model_selection import train_test_split X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0) from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train,Y_train) LinearRegression()","title":"\u590d\u6742\u7684\u7ebf\u6027\u56de\u5f52"},{"location":"sklearn/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_1","text":"data = pd.read_csv(\"./datasets/50_Startups.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } R&D Spend Administration Marketing Spend State Profit 0 165349.20 136897.80 471784.10 New York 192261.83 1 162597.70 151377.59 443898.53 California 191792.06 2 153441.51 101145.55 407934.54 Florida 191050.39 3 144372.41 118671.85 383199.62 New York 182901.99 4 142107.34 91391.77 366168.42 Florida 166187.94","title":"\u8bfb\u5165\u6570\u636e"},{"location":"sklearn/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#xy","text":"X = data.iloc[:,:-1].values Y = data.iloc[:,-1].values","title":"\u5206\u5f00xy"},{"location":"sklearn/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_2","text":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder labelEncoder = LabelEncoder() X[:,3] = labelEncoder.fit_transform(X[:,3]) onehotencoder = OneHotEncoder() X = onehotencoder.fit_transform(X).toarray() X = X[:,1:] from sklearn.model_selection import train_test_split X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0) from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train,Y_train) LinearRegression()","title":"\u7f16\u7801"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/","text":"\u5bfc\u5165\u5fc5\u8981\u7684\u5305 import pandas as pd import numpy as np \u8bfb\u5165\u6570\u636e data = pd.read_csv(\"./datasets/Data.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Country Age Salary Purchased 0 France 44.0 72000.0 No 1 Spain 27.0 48000.0 Yes 2 Germany 30.0 54000.0 No 3 Spain 38.0 61000.0 No 4 Germany 40.0 NaN Yes \u786e\u5b9aX,Y\u53d8\u91cf X = data.iloc[:,:-1].values Y = data.iloc[:,3].values \u6570\u636e\u7a7a\u503c\u5904\u7406 from sklearn.impute import SimpleImputer imputer = SimpleImputer() X[:,1:3] = imputer.fit_transform(X[:,1:3]) X array([['France', 44.0, 72000.0], ['Spain', 27.0, 48000.0], ['Germany', 30.0, 54000.0], ['Spain', 38.0, 61000.0], ['Germany', 40.0, 63777.77777777778], ['France', 35.0, 58000.0], ['Spain', 38.77777777777778, 52000.0], ['France', 48.0, 79000.0], ['Germany', 50.0, 83000.0], ['France', 37.0, 67000.0]], dtype=object) \u7f16\u7801\u5904\u7406 from sklearn.preprocessing import LabelEncoder,OneHotEncoder labelencoder = LabelEncoder() X[:,0] = labelencoder.fit_transform(X[:,0]) onehotencoder = OneHotEncoder() X = onehotencoder.fit_transform(X).toarray() labelencoder_Y = LabelEncoder() Y = labelencoder_Y.fit_transform(Y) \u5206\u5272\u6570\u636e from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, random_state=0) \u6807\u51c6\u5316 from sklearn.preprocessing import StandardScaler sc_X = StandardScaler() X_train = sc_X.fit_transform(X_train) X_test = sc_X.fit_transform(X_test)","title":"\u6570\u636e\u9884\u5904\u7406"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_1","text":"import pandas as pd import numpy as np","title":"\u5bfc\u5165\u5fc5\u8981\u7684\u5305"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_2","text":"data = pd.read_csv(\"./datasets/Data.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Country Age Salary Purchased 0 France 44.0 72000.0 No 1 Spain 27.0 48000.0 Yes 2 Germany 30.0 54000.0 No 3 Spain 38.0 61000.0 No 4 Germany 40.0 NaN Yes","title":"\u8bfb\u5165\u6570\u636e"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#xy","text":"X = data.iloc[:,:-1].values Y = data.iloc[:,3].values","title":"\u786e\u5b9aX,Y\u53d8\u91cf"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_3","text":"from sklearn.impute import SimpleImputer imputer = SimpleImputer() X[:,1:3] = imputer.fit_transform(X[:,1:3]) X array([['France', 44.0, 72000.0], ['Spain', 27.0, 48000.0], ['Germany', 30.0, 54000.0], ['Spain', 38.0, 61000.0], ['Germany', 40.0, 63777.77777777778], ['France', 35.0, 58000.0], ['Spain', 38.77777777777778, 52000.0], ['France', 48.0, 79000.0], ['Germany', 50.0, 83000.0], ['France', 37.0, 67000.0]], dtype=object)","title":"\u6570\u636e\u7a7a\u503c\u5904\u7406"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_4","text":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder labelencoder = LabelEncoder() X[:,0] = labelencoder.fit_transform(X[:,0]) onehotencoder = OneHotEncoder() X = onehotencoder.fit_transform(X).toarray() labelencoder_Y = LabelEncoder() Y = labelencoder_Y.fit_transform(Y)","title":"\u7f16\u7801\u5904\u7406"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_5","text":"from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, random_state=0)","title":"\u5206\u5272\u6570\u636e"},{"location":"sklearn/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#_6","text":"from sklearn.preprocessing import StandardScaler sc_X = StandardScaler() X_train = sc_X.fit_transform(X_train) X_test = sc_X.fit_transform(X_test)","title":"\u6807\u51c6\u5316"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","text":"\u5bfc\u5165\u5305 import pandas as pd import numpy as np import matplotlib.pyplot as plt \u5bfc\u5165\u6570\u636e data = pd.read_csv(\"./datasets/studentscores.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Hours Scores 0 2.5 21 1 5.1 47 2 3.2 27 3 8.5 75 4 3.5 30 \u6570\u636e\u5904\u7406 X = data.iloc[:,:1].values Y = data.iloc[:,1].values from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=1/4,random_state=0) \u8bad\u7ec3\u6a21\u578b from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor = regressor.fit(X_train,Y_train) \u9884\u6d4b Y_pred = regressor.predict(X_test) \u753b\u56fe plt.scatter(X_train,Y_train,color='red') plt.plot(X_train,regressor.predict(X_train),color='blue') plt.scatter(X_test , Y_test, color = 'red') plt.plot(X_test , regressor.predict(X_test), color ='blue')","title":"\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_1","text":"import pandas as pd import numpy as np import matplotlib.pyplot as plt","title":"\u5bfc\u5165\u5305"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_2","text":"data = pd.read_csv(\"./datasets/studentscores.csv\") data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Hours Scores 0 2.5 21 1 5.1 47 2 3.2 27 3 8.5 75 4 3.5 30","title":"\u5bfc\u5165\u6570\u636e"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_3","text":"X = data.iloc[:,:1].values Y = data.iloc[:,1].values from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=1/4,random_state=0)","title":"\u6570\u636e\u5904\u7406"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_4","text":"from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor = regressor.fit(X_train,Y_train)","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_5","text":"Y_pred = regressor.predict(X_test)","title":"\u9884\u6d4b"},{"location":"sklearn/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_6","text":"plt.scatter(X_train,Y_train,color='red') plt.plot(X_train,regressor.predict(X_train),color='blue') plt.scatter(X_test , Y_test, color = 'red') plt.plot(X_test , regressor.predict(X_test), color ='blue')","title":"\u753b\u56fe"},{"location":"spider/base/","text":"\u722c\u866b \u722c\u866b\u662f\u6211\u6bd4\u8f83\u64c5\u957f\u7684\u4e3b\u9898\uff0c\u800c\u4e14\u5b83\u5165\u95e8\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002 \u722c\u866b\u7684\u6838\u5fc3\u5e93\u662f requests \u5e93 \u53ef\u4ee5\u901a\u8fc7 pip install requests \u6765\u5b89\u88c5 \u6700\u7b80\u5355\u7684\u722c\u866b\u7a0b\u5e8f\uff1a import requests headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari'} res = requests.get(\"http://www.baidu.com\",headers=headers) res.encoding = 'utf-8'#\u6ce8\u610f\u4e71\u7801\u95ee\u9898 print(res.text) #print(res.headers)\u8fd4\u56de\u5934 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5148\u5bfc\u5165requests\u5e93\uff0c\u7136\u540e\u8c03\u7528requests\u5e93\u4e2d\u7684get()\u65b9\u6cd5\uff0c\u5bf9\u7f51\u7ad9\u8fdb\u884cget\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8fd4\u56de\u7684\u5185\u5bb9\u6253\u5370\u51fa\u6765 \u5f53\u7136\u6709\u65f6\u5019\u6211\u4eec\u722c\u866b\u8981\u4f2a\u88c5\u4e00\u4e0b\uff0c\u5728\u8bf7\u6c42\u7684\u65f6\u5019\u52a0\u5165\u5934headers \u89e3\u6790\u7f51\u9875 \u5728\u83b7\u5f97\u4e86\u7f51\u9875\u7684\u5185\u5bb9\u540e\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662f\u4ee3\u7801\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u6837\u6765\u83b7\u5f97\u81ea\u5df1\u60f3\u8981\u7684\u90a3\u90e8\u5206\u5185\u5bb9\u5462\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u7f51\u9875\u89e3\u6790\u5e93\u4e86 \u8fd9\u91cc\u5462\u6211\u63a8\u8350\u4f7f\u7528\u7684\u662f lxml ,\u5373\u4f7f\u7528 xpath \u8bed\u6cd5\uff0c\u4e5f\u662f\u6211\u4e2a\u4eba\u5e38\u7528\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u901f\u5ea6\u6bd4\u8f83\u5feb\uff0c\u8bed\u6cd5\u4e5f\u4e0d\u96be\u3002 pip install lxml \u8fdb\u884c\u5b89\u88c5 from lxml import etree import requests res = requests.get('https://inkplatform.gitbook.io/andrew-pytorch/') sele = etree.HTML(res.text) nav = sele.xpath('//*[@id=\"ke-cheng-yi-shen-jing-wang-luo-yu-shen-du-xue-xi\"]/div[1]/span/span/span/text()') print(nav) \u8fd9\u6837\u901a\u8fc7xpath\u8bed\u6cd5\u6765\u83b7\u5f97\u4e00\u4e9b\u5185\u5bb9 \u4f7f\u7528API API\u5c31\u662f\u5f00\u53d1\u8005\u5236\u4f5c\u7684\u5916\u90e8\u63a5\u53e3\uff0c\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b \u4e00\u822c\u7684API\u53ef\u4ee5\u901a\u8fc7\u6293\u5305\u83b7\u5f97 \u8fd9\u91cc\u76f4\u63a5\u653e\u6211\u6293bilibili cos\u533a\u56fe\u7247\u7684\u4f8b\u5b50\u5427 API\u662f\u6211\u6293\u5305\u6293\u6765\u7684\u3002 import requests import json headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} #\u6a21\u62df\u6d4f\u89c8\u5668 urls = [f'https://api.vc.bilibili.com/link_draw/v2/Photo/list?category=cos&type=hot&page_num={f}&page_size=50' for f in range(1,25)] #\u5217\u8868\u89e3\u6790\u5f0f\u6784\u5efaurls def get_photo(url): res = requests.get(url,headers=headers) jsons = json.loads(res.text) lists = jsons['data']['items'][0]['item']['pictures'] #\u89e3\u6790json url_list=[] for list in lists: url_list.append(list['img_src']) for urld in url_list: ress = requests.get(urld,headers=headers) fp = open(f'meizitu\\\\{urld[-20:]}','wb') fp.write(ress.content) print(\"OK\") fp.close() #main for url in urls: try: get_photo(url) except IndexError: pass POST\u8bf7\u6c42 \u4f7f\u7528 requests.post(url,data=params,headers=headers) params\u4e3a\u4f20\u5165\u7684\u53c2\u6570 \u6216\u8005\u83b7\u53d6cookie \u7136\u540e\u5728headers\u91cc\u9762\u4f20\u5165 \u4f9d\u65e7\u7528\u6211\u722c\u8fc7\u7684\u4f8b\u5b50 import requests import json import time params={ 'account':\"youraccount\", 'password':\"yourpassword\", \"phoneVersion\":19, \"platform\":1, \"deviceCode\":355757010701395, \"versionNumber\":\"9.4.0\", \"channel\":\"ppMarket\", \"phoneBrand\":\"samsung\", \"phoneModel\":\"SM-G955F\" } res=requests.post(\"http://120.55.151.61/V2/StudentSkip/loginCheckV4.action\",params) \u5176\u5b9e\u8ddfget\u5dee\u4e0d\u591a selenium selenium\u662f\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u53ef\u4ee5\u914d\u5408\u5404\u6d4f\u89c8\u5668\u4f7f\u7528\u3002 \u7528\u6765\u6a21\u62df\u4eba\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\uff0c\u70b9\u51fb\u6309\u94ae\uff0c\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6570\u636e\u3002 \u4e14\u4e5f\u652f\u6301xpath\u8bed\u6cd5\u662f\u722c\u53d6\u5f02\u6b65\u52a0\u8f7d\u7f51\u9875\u6216\u9700\u8981\u7528\u5230\u767b\u5f55\u65f6\u7684\u5229\u5668\uff0c\u867d\u7136\u53ef\u4ee5\u6293\u5305\uff0c\u4f46\u4e0d\u5982\u8fd9\u6837\u6765\u7684\u76f4\u63a5\u3002 \u8bb0\u5f55\u4e00\u4e0b\u9047\u5230\u7684\u5751\uff1a \u5728\u83b7\u53d6\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u4f8b\u5982\u7528class\u83b7\u53d6\u7684\u8bdd\uff0c\u8981\u7528 browser.find_element_by_class_name \u6ce8\u610f\u6ce8\u610f\u6ce8\u610f element\u4e0d\u8981\u52a0s \u4e0d\u7136\u5c31\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u4e86 2020 11.19\u8e29\u5751\u4e86\uff0c\u7279\u6765\u8bb0\u5f55\uff01 Scrapy Scrapy\u662f\u4e00\u4e2a\u722c\u866b\u6846\u67b6","title":"\u57fa\u7840"},{"location":"spider/base/#_1","text":"\u722c\u866b\u662f\u6211\u6bd4\u8f83\u64c5\u957f\u7684\u4e3b\u9898\uff0c\u800c\u4e14\u5b83\u5165\u95e8\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002 \u722c\u866b\u7684\u6838\u5fc3\u5e93\u662f requests \u5e93 \u53ef\u4ee5\u901a\u8fc7 pip install requests \u6765\u5b89\u88c5","title":"\u722c\u866b"},{"location":"spider/base/#_2","text":"import requests headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari'} res = requests.get(\"http://www.baidu.com\",headers=headers) res.encoding = 'utf-8'#\u6ce8\u610f\u4e71\u7801\u95ee\u9898 print(res.text) #print(res.headers)\u8fd4\u56de\u5934 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5148\u5bfc\u5165requests\u5e93\uff0c\u7136\u540e\u8c03\u7528requests\u5e93\u4e2d\u7684get()\u65b9\u6cd5\uff0c\u5bf9\u7f51\u7ad9\u8fdb\u884cget\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8fd4\u56de\u7684\u5185\u5bb9\u6253\u5370\u51fa\u6765 \u5f53\u7136\u6709\u65f6\u5019\u6211\u4eec\u722c\u866b\u8981\u4f2a\u88c5\u4e00\u4e0b\uff0c\u5728\u8bf7\u6c42\u7684\u65f6\u5019\u52a0\u5165\u5934headers","title":"\u6700\u7b80\u5355\u7684\u722c\u866b\u7a0b\u5e8f\uff1a"},{"location":"spider/base/#_3","text":"\u5728\u83b7\u5f97\u4e86\u7f51\u9875\u7684\u5185\u5bb9\u540e\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662f\u4ee3\u7801\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u6837\u6765\u83b7\u5f97\u81ea\u5df1\u60f3\u8981\u7684\u90a3\u90e8\u5206\u5185\u5bb9\u5462\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u7f51\u9875\u89e3\u6790\u5e93\u4e86 \u8fd9\u91cc\u5462\u6211\u63a8\u8350\u4f7f\u7528\u7684\u662f lxml ,\u5373\u4f7f\u7528 xpath \u8bed\u6cd5\uff0c\u4e5f\u662f\u6211\u4e2a\u4eba\u5e38\u7528\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u901f\u5ea6\u6bd4\u8f83\u5feb\uff0c\u8bed\u6cd5\u4e5f\u4e0d\u96be\u3002 pip install lxml \u8fdb\u884c\u5b89\u88c5 from lxml import etree import requests res = requests.get('https://inkplatform.gitbook.io/andrew-pytorch/') sele = etree.HTML(res.text) nav = sele.xpath('//*[@id=\"ke-cheng-yi-shen-jing-wang-luo-yu-shen-du-xue-xi\"]/div[1]/span/span/span/text()') print(nav) \u8fd9\u6837\u901a\u8fc7xpath\u8bed\u6cd5\u6765\u83b7\u5f97\u4e00\u4e9b\u5185\u5bb9","title":"\u89e3\u6790\u7f51\u9875"},{"location":"spider/base/#api","text":"API\u5c31\u662f\u5f00\u53d1\u8005\u5236\u4f5c\u7684\u5916\u90e8\u63a5\u53e3\uff0c\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b \u4e00\u822c\u7684API\u53ef\u4ee5\u901a\u8fc7\u6293\u5305\u83b7\u5f97 \u8fd9\u91cc\u76f4\u63a5\u653e\u6211\u6293bilibili cos\u533a\u56fe\u7247\u7684\u4f8b\u5b50\u5427 API\u662f\u6211\u6293\u5305\u6293\u6765\u7684\u3002 import requests import json headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} #\u6a21\u62df\u6d4f\u89c8\u5668 urls = [f'https://api.vc.bilibili.com/link_draw/v2/Photo/list?category=cos&type=hot&page_num={f}&page_size=50' for f in range(1,25)] #\u5217\u8868\u89e3\u6790\u5f0f\u6784\u5efaurls def get_photo(url): res = requests.get(url,headers=headers) jsons = json.loads(res.text) lists = jsons['data']['items'][0]['item']['pictures'] #\u89e3\u6790json url_list=[] for list in lists: url_list.append(list['img_src']) for urld in url_list: ress = requests.get(urld,headers=headers) fp = open(f'meizitu\\\\{urld[-20:]}','wb') fp.write(ress.content) print(\"OK\") fp.close() #main for url in urls: try: get_photo(url) except IndexError: pass","title":"\u4f7f\u7528API"},{"location":"spider/base/#post","text":"\u4f7f\u7528 requests.post(url,data=params,headers=headers) params\u4e3a\u4f20\u5165\u7684\u53c2\u6570 \u6216\u8005\u83b7\u53d6cookie \u7136\u540e\u5728headers\u91cc\u9762\u4f20\u5165 \u4f9d\u65e7\u7528\u6211\u722c\u8fc7\u7684\u4f8b\u5b50 import requests import json import time params={ 'account':\"youraccount\", 'password':\"yourpassword\", \"phoneVersion\":19, \"platform\":1, \"deviceCode\":355757010701395, \"versionNumber\":\"9.4.0\", \"channel\":\"ppMarket\", \"phoneBrand\":\"samsung\", \"phoneModel\":\"SM-G955F\" } res=requests.post(\"http://120.55.151.61/V2/StudentSkip/loginCheckV4.action\",params) \u5176\u5b9e\u8ddfget\u5dee\u4e0d\u591a","title":"POST\u8bf7\u6c42"},{"location":"spider/base/#selenium","text":"selenium\u662f\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u53ef\u4ee5\u914d\u5408\u5404\u6d4f\u89c8\u5668\u4f7f\u7528\u3002 \u7528\u6765\u6a21\u62df\u4eba\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\uff0c\u70b9\u51fb\u6309\u94ae\uff0c\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6570\u636e\u3002 \u4e14\u4e5f\u652f\u6301xpath\u8bed\u6cd5\u662f\u722c\u53d6\u5f02\u6b65\u52a0\u8f7d\u7f51\u9875\u6216\u9700\u8981\u7528\u5230\u767b\u5f55\u65f6\u7684\u5229\u5668\uff0c\u867d\u7136\u53ef\u4ee5\u6293\u5305\uff0c\u4f46\u4e0d\u5982\u8fd9\u6837\u6765\u7684\u76f4\u63a5\u3002 \u8bb0\u5f55\u4e00\u4e0b\u9047\u5230\u7684\u5751\uff1a \u5728\u83b7\u53d6\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u4f8b\u5982\u7528class\u83b7\u53d6\u7684\u8bdd\uff0c\u8981\u7528 browser.find_element_by_class_name \u6ce8\u610f\u6ce8\u610f\u6ce8\u610f element\u4e0d\u8981\u52a0s \u4e0d\u7136\u5c31\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u4e86 2020 11.19\u8e29\u5751\u4e86\uff0c\u7279\u6765\u8bb0\u5f55\uff01","title":"selenium"},{"location":"spider/base/#scrapy","text":"Scrapy\u662f\u4e00\u4e2a\u722c\u866b\u6846\u67b6","title":"Scrapy"},{"location":"spider/thread_spider/","text":"\u591a\u7ebf\u7a0b\u722c\u866b \u591a\u7ebf\u7a0b\u722c\u866b\u793a\u4f8b\u3002 \u524d\u51e0\u5929\u722c\u8d77\u70b9\u7684\u4e66\uff0c\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\uff0c\u867d\u7136\u4ee3\u7801\u5f88\u7b80\u5355\u3002 \u4f46\u4ece\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b66\u5230\u4e86\u600e\u4e48\u6837\u5c06\u591a\u7ebf\u7a0b\u548c\u722c\u866b\u914d\u5408\u4ee5\u63d0\u9ad8\u6548\u7387\u3002 import queue import requests from lxml import etree import pymysql import logging from threading import Thread,Lock from queue import Queue import time # logging.basicConfig(level=logging.DEBUG, # format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') # logger = logging.getLogger('qidian') # class Qidian_Spider: # def __init__(self): # self.conn,self.cur = self.connet_mysql() # self.urls = self.create_urls() # self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} # def connet_mysql(self): # conn = pymysql.connect(host='localhost',user='root',passwd='',db='spider',port=3306,charset='utf8') # cur = conn.cursor() # return conn,cur # def create_urls(self): # urls = ['https://www.qidian.com/rank/collect?page={}'.format(i) for i in range(1,6)] # return urls # def insert_data1(self,url): # self.conn,self.cur = self.connet_mysql() # res = requests.get(url,headers=self.headers) # sel = etree.HTML(res.text) # infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') # titles = [] # authors = [] # classess = [] # for info in infos: # title = info.xpath('div[2]/h4/a/text()')[0] # author = info.xpath('div[2]/p[1]/a[1]/text()')[0] # classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] # self.cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) # # logger.info(\"---ok\") # self.conn.commit() # def insert_data(self,url): # self.conn,self.cur = self.connet_mysql() # # logger.info(\"start\") # res = requests.get(url,headers=self.headers) # sel = etree.HTML(res.text) # infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') # titles = [] # authors = [] # classess = [] # for info in infos: # title = info.xpath('div[2]/h4/a/text()')[0] # author = info.xpath('div[2]/p[1]/a[1]/text()')[0] # classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] # self.cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) # # logger.info(\"---ok\") # self.conn.commit() # def run(self): # print(\"\u6b63\u5e38\u7a0b\u5e8f\u5f00\u59cb\") # for url in self.urls: # # logger.info(\"Start---\") # self.insert_data1(url) # # logger.info(\"one OK\") # self.cur.close() # mains = Qidian_Spider() # start = time.time() # mains.run() # print(f\"\u6b63\u5e38\u8017\u65f6{time.time()-start:.4f}s\") conn = pymysql.connect(host='localhost',user='root',passwd='',db='spider',port=3306,charset='utf8') cur = conn.cursor() headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} lock = Lock() print('\u591a\u7ebf\u7a0b\u5f00\u59cb') def duo_spider(queues): while queues.empty() is not True: res = requests.get(queues.get(),headers=headers) sel = etree.HTML(res.text) infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') for info in infos: title = info.xpath('div[2]/h4/a/text()')[0] author = info.xpath('div[2]/p[1]/a[1]/text()')[0] classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] lock.acquire() cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) conn.commit() lock.release() queues.task_done() urls = ['https://www.qidian.com/rank/collect?page={}'.format(i) for i in range(1,6)] start = time.time() in_q = Queue() for u in urls: in_q.put(u) for _ in range(10): thread = Thread(target=duo_spider,args=(in_q,)) thread.daemon = True thread.start() in_q.join() print(f\"\u591a\u7ebf\u7a0b\u8017\u65f6{time.time()-start:.4f}s\") \u6ce8\u610f\u7684\u662f\uff0c\u8981\u5728\u7ed3\u675f\u540e\u8fd0\u884c queues.task_done() \u4e0d\u7136\u4f1a\u5f15\u53d1\u6570\u636e\u5e93\u9519\u8bef \u8fd8\u6709\u8981\u52a0\u4e0a\u4e00\u4e2a\u4e92\u65a5\u9501\uff0c\u56e0\u4e3a\u591a\u4e2a\u7ebf\u7a0b\u5171\u540c\u4fee\u6539\u540c\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u4e0d\u52a0\u9501\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8fd9\u4e00\u70b9\u4e5f\u8981\u6ce8\u610f \u901a\u8fc7\u5bf9\u6bd4\u6b63\u5e38\u7a0b\u5e8f\u548c\u591a\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u6548\u7387\u786e\u5b9e\u5feb\u4e86\u4e0d\u5c11\uff0c\u7528queue\u961f\u5217\u7684\u539f\u56e0\u662f\u5b89\u5168\u7cfb\u6570\u9ad8\u3002","title":"\u591a\u7ebf\u7a0b\u722c\u866b"},{"location":"spider/thread_spider/#_1","text":"\u591a\u7ebf\u7a0b\u722c\u866b\u793a\u4f8b\u3002 \u524d\u51e0\u5929\u722c\u8d77\u70b9\u7684\u4e66\uff0c\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\uff0c\u867d\u7136\u4ee3\u7801\u5f88\u7b80\u5355\u3002 \u4f46\u4ece\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b66\u5230\u4e86\u600e\u4e48\u6837\u5c06\u591a\u7ebf\u7a0b\u548c\u722c\u866b\u914d\u5408\u4ee5\u63d0\u9ad8\u6548\u7387\u3002 import queue import requests from lxml import etree import pymysql import logging from threading import Thread,Lock from queue import Queue import time # logging.basicConfig(level=logging.DEBUG, # format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') # logger = logging.getLogger('qidian') # class Qidian_Spider: # def __init__(self): # self.conn,self.cur = self.connet_mysql() # self.urls = self.create_urls() # self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} # def connet_mysql(self): # conn = pymysql.connect(host='localhost',user='root',passwd='',db='spider',port=3306,charset='utf8') # cur = conn.cursor() # return conn,cur # def create_urls(self): # urls = ['https://www.qidian.com/rank/collect?page={}'.format(i) for i in range(1,6)] # return urls # def insert_data1(self,url): # self.conn,self.cur = self.connet_mysql() # res = requests.get(url,headers=self.headers) # sel = etree.HTML(res.text) # infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') # titles = [] # authors = [] # classess = [] # for info in infos: # title = info.xpath('div[2]/h4/a/text()')[0] # author = info.xpath('div[2]/p[1]/a[1]/text()')[0] # classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] # self.cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) # # logger.info(\"---ok\") # self.conn.commit() # def insert_data(self,url): # self.conn,self.cur = self.connet_mysql() # # logger.info(\"start\") # res = requests.get(url,headers=self.headers) # sel = etree.HTML(res.text) # infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') # titles = [] # authors = [] # classess = [] # for info in infos: # title = info.xpath('div[2]/h4/a/text()')[0] # author = info.xpath('div[2]/p[1]/a[1]/text()')[0] # classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] # self.cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) # # logger.info(\"---ok\") # self.conn.commit() # def run(self): # print(\"\u6b63\u5e38\u7a0b\u5e8f\u5f00\u59cb\") # for url in self.urls: # # logger.info(\"Start---\") # self.insert_data1(url) # # logger.info(\"one OK\") # self.cur.close() # mains = Qidian_Spider() # start = time.time() # mains.run() # print(f\"\u6b63\u5e38\u8017\u65f6{time.time()-start:.4f}s\") conn = pymysql.connect(host='localhost',user='root',passwd='',db='spider',port=3306,charset='utf8') cur = conn.cursor() headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'} lock = Lock() print('\u591a\u7ebf\u7a0b\u5f00\u59cb') def duo_spider(queues): while queues.empty() is not True: res = requests.get(queues.get(),headers=headers) sel = etree.HTML(res.text) infos = sel.xpath('//*[@id=\"rank-view-list\"]/div/ul/li') for info in infos: title = info.xpath('div[2]/h4/a/text()')[0] author = info.xpath('div[2]/p[1]/a[1]/text()')[0] classes = info.xpath('div[2]/p[1]/a[2]/text()')[0] lock.acquire() cur.execute(\"insert into qidian (title,author,classes) values('{}','{}','{}');\".format(str(title),str(author),str(classes))) conn.commit() lock.release() queues.task_done() urls = ['https://www.qidian.com/rank/collect?page={}'.format(i) for i in range(1,6)] start = time.time() in_q = Queue() for u in urls: in_q.put(u) for _ in range(10): thread = Thread(target=duo_spider,args=(in_q,)) thread.daemon = True thread.start() in_q.join() print(f\"\u591a\u7ebf\u7a0b\u8017\u65f6{time.time()-start:.4f}s\") \u6ce8\u610f\u7684\u662f\uff0c\u8981\u5728\u7ed3\u675f\u540e\u8fd0\u884c queues.task_done() \u4e0d\u7136\u4f1a\u5f15\u53d1\u6570\u636e\u5e93\u9519\u8bef \u8fd8\u6709\u8981\u52a0\u4e0a\u4e00\u4e2a\u4e92\u65a5\u9501\uff0c\u56e0\u4e3a\u591a\u4e2a\u7ebf\u7a0b\u5171\u540c\u4fee\u6539\u540c\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u4e0d\u52a0\u9501\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8fd9\u4e00\u70b9\u4e5f\u8981\u6ce8\u610f \u901a\u8fc7\u5bf9\u6bd4\u6b63\u5e38\u7a0b\u5e8f\u548c\u591a\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u6548\u7387\u786e\u5b9e\u5feb\u4e86\u4e0d\u5c11\uff0c\u7528queue\u961f\u5217\u7684\u539f\u56e0\u662f\u5b89\u5168\u7cfb\u6570\u9ad8\u3002","title":"\u591a\u7ebf\u7a0b\u722c\u866b"}]}