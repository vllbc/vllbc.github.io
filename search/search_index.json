{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u200b \u8fd9\u662f\u6211\uff08vllbc\uff09\u7684\u7f51\u7ad9\uff0c\u6b22\u8fce\u5927\u5bb6\uff01 \u8fd9\u7b97\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2 \u7528\u6765\u5199\u4e00\u4e9b\u6211\u5e73\u65f6\u5b66\u4e60\u7684\u7b14\u8bb0\u4ec0\u4e48\u7684\uff0c\u6211\u5b66\u7684\u4e1c\u897f\u5f88\u591a\u5f88\u6742\uff0c\u603b\u4e4b\u4ec0\u4e48\u90fd\u6709\u3002 \u76ee\u524d\u6b63\u5728\u5b66\u4e60\u7b97\u6cd5\u548cpytorch\u5e93 \u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u548c\u6211\u591a\u591a\u4ea4\u6d41 \u8054\u7cfb\u65b9\u5f0f\uff1a qq\uff1a1683070754 \u672c\u7f51\u7ad9\u7528mkdocs\u7f16\u5199\uff0c\u76ee\u524d\u90e8\u7f72\u5728github.io\u4e0a\uff0c\u4ee5\u540e\u4f1a\u8d2d\u4e70\u57df\u540d\uff0c\u90e8\u7f72\u5728\u771f\u6b63\u5c5e\u4e8e\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u9762\uff01 \u6709\u4e9b\u60ca\u5947\u7684\u673a\u9047\uff0c\u6bd4\u65b9\u8bf4\u5f53\u6211\u9047\u89c1\u4f60\u3002 print(\"welcome to the my site!!\")","title":"\u9996\u9875"},{"location":"#_1","text":"\u200b \u8fd9\u662f\u6211\uff08vllbc\uff09\u7684\u7f51\u7ad9\uff0c\u6b22\u8fce\u5927\u5bb6\uff01 \u8fd9\u7b97\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2 \u7528\u6765\u5199\u4e00\u4e9b\u6211\u5e73\u65f6\u5b66\u4e60\u7684\u7b14\u8bb0\u4ec0\u4e48\u7684\uff0c\u6211\u5b66\u7684\u4e1c\u897f\u5f88\u591a\u5f88\u6742\uff0c\u603b\u4e4b\u4ec0\u4e48\u90fd\u6709\u3002 \u76ee\u524d\u6b63\u5728\u5b66\u4e60\u7b97\u6cd5\u548cpytorch\u5e93 \u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u548c\u6211\u591a\u591a\u4ea4\u6d41","title":"\u7b80\u4ecb"},{"location":"#_2","text":"","title":"\u8054\u7cfb\u65b9\u5f0f\uff1a"},{"location":"#qq1683070754","text":"\u672c\u7f51\u7ad9\u7528mkdocs\u7f16\u5199\uff0c\u76ee\u524d\u90e8\u7f72\u5728github.io\u4e0a\uff0c\u4ee5\u540e\u4f1a\u8d2d\u4e70\u57df\u540d\uff0c\u90e8\u7f72\u5728\u771f\u6b63\u5c5e\u4e8e\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u9762\uff01 \u6709\u4e9b\u60ca\u5947\u7684\u673a\u9047\uff0c\u6bd4\u65b9\u8bf4\u5f53\u6211\u9047\u89c1\u4f60\u3002 print(\"welcome to the my site!!\")","title":"qq\uff1a1683070754"},{"location":"AI_learn/AI_PATH/","text":"\u901a\u8fc7\u770b\u5434\u6069\u8fbe\u7684 \u673a\u5668\u5b66\u4e60 \u548c \u6df1\u5ea6\u5b66\u4e60 \u89c6\u9891\u5165\u95e8\uff0c\u7136\u540e\u770b\u914d\u5957\u7684\u8bfe\u540e\u4e60\u9898\u4e0e\u7b14\u8bb0 \u673a\u5668\u5b66\u4e60\u7b14\u8bb0 \u6df1\u5ea6\u5b66\u4e60\u7b14\u8bb0 \u4e70\u7684\u4e66\u4e5f\u8981\u8fc7\u8fc7\uff0c\u8ddf\u7740\u5b9e\u73b0\u4e00\u4e0b \u4e00\u5b9a\u8981\u5b9e\u8df5\uff01\u81ea\u5df1\u5199\u4ee3\u7801\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d github \u4e0a\u7684 100days \u9879\u76ee\u8ddf\u7740\u5b8c\u6210\u4e00\u4e0b \u5c3d\u91cf\u90fd\u7528 pytorch \u548c numpy \u5b9e\u73b0\u4e00\u4e0b \u6240\u4ee5\u4e5f\u8981\u5b66\u4e60 pytorch\uff01\uff01\uff01 \u6570\u636e\u5904\u7406\u53bb\u5b9e\u9a8c\u697c\u5b66\u4e60 pandas \u603b\u4e4b\u90fd\u5f88\u91cd\u8981\uff01\uff01","title":"\u5b66\u4e60\u9014\u5f84"},{"location":"AI_learn/AI_PATH/#_1","text":"\u673a\u5668\u5b66\u4e60\u7b14\u8bb0 \u6df1\u5ea6\u5b66\u4e60\u7b14\u8bb0","title":"\u901a\u8fc7\u770b\u5434\u6069\u8fbe\u7684\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u89c6\u9891\u5165\u95e8\uff0c\u7136\u540e\u770b\u914d\u5957\u7684\u8bfe\u540e\u4e60\u9898\u4e0e\u7b14\u8bb0"},{"location":"AI_learn/AI_PATH/#_2","text":"","title":"\u4e70\u7684\u4e66\u4e5f\u8981\u8fc7\u8fc7\uff0c\u8ddf\u7740\u5b9e\u73b0\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#_3","text":"","title":"\u4e00\u5b9a\u8981\u5b9e\u8df5\uff01\u81ea\u5df1\u5199\u4ee3\u7801\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d"},{"location":"AI_learn/AI_PATH/#github100days","text":"","title":"github\u4e0a\u7684100days\u9879\u76ee\u8ddf\u7740\u5b8c\u6210\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#pytorchnumpy","text":"","title":"\u5c3d\u91cf\u90fd\u7528pytorch\u548cnumpy\u5b9e\u73b0\u4e00\u4e0b"},{"location":"AI_learn/AI_PATH/#pytorch","text":"","title":"\u6240\u4ee5\u4e5f\u8981\u5b66\u4e60pytorch\uff01\uff01\uff01"},{"location":"AI_learn/AI_PATH/#pandas","text":"","title":"\u6570\u636e\u5904\u7406\u53bb\u5b9e\u9a8c\u697c\u5b66\u4e60pandas"},{"location":"AI_learn/AI_PATH/#_4","text":"","title":"\u603b\u4e4b\u90fd\u5f88\u91cd\u8981\uff01\uff01"},{"location":"python/","text":"python\u662f\u6211\u9ad8\u4e2d\u81ea\u5b66\u7684\u8bed\u8a00\uff0c\u672c\u8eab\u5176\u5c31\u6bd4\u8f83\u7b80\u5355\u3002 \u6240\u4ee5\u7b80\u5355\u7684python\u57fa\u7840\u7c7b\u7684\u4e1c\u897f\u6211\u4e0d\u4f1a\u5199\u7684 \u6211\u53ea\u4f1a\u5199\u4e00\u4e9b\u6211\u76ee\u524d\u6b63\u5728\u5b66\u4e60\u7684python\u7684\u77e5\u8bc6\u5185\u5bb9 \u6bd4\u5982\u591a\u7ebf\u7a0b\uff0c\u722c\u866b\u6848\u4f8b\uff0c\u5404\u79cd\u5e93\u7b49\u7b49 Then,START!","title":"\u4ecb\u7ecd"},{"location":"python/#thenstart","text":"","title":"Then,START!"},{"location":"python/jupyter/","text":"jupyter \u662fpython\u6570\u636e\u5206\u6790\u9886\u57df\u4e0d\u53ef\u7f3a\u5c11\u7684\u5229\u5668\uff0c\u800c\u6211\u4e5f\u5728\u4f7f\u7528\u8fc7\u540e\u7231\u4e0a\u4e86\u5b83\uff01 \u53ef\u4ee5\u7528 pip \u6216\u8005 anaconda \u6765\u5b89\u88c5 jupyter \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u4efb\u610f\u76ee\u5f55\u91cc\u542f\u52a8 jupyter \u4e86 jupyter notebook \u4e4b\u540e\u4f1a\u6253\u5f00\u754c\u9762\uff0c\u5177\u4f53\u64cd\u4f5c\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e0b\u9762\u5199\u4e00\u4e0b\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002 jupyter\u4e2d\u547d\u4ee4\u6a21\u5f0f m\u5207\u6362\u5230markdown\u6a21\u5f0f y\u5207\u6362\u56de\u6765 dd\u5220\u9664\u5f53\u524d\u884c esc\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f S\u4fdd\u5b58 j,k\u5206\u522b\u4e3a\u4e0b\uff0c\u4e0a\u79fb\u52a8\uff0c\u548cvim\u76f8\u540c l\u4e3a\u663e\u793a\u884c\u53f7\uff0c\u518d\u6309\u4e00\u904d\u53d6\u6d88\u663e\u793a \u6b64\u5916\uff0c plotly \u7b49\u5de5\u5177\u4e5f\u5c3d\u91cf\u5728 jupyter \u91cc\u9762\u4f7f\u7528\u4ee5\u65b9\u4fbf\u64cd\u4f5c\uff01","title":"jupyter"},{"location":"python/plotly/","text":"plotly \u5b66\u4e60\uff1a import plotly.graph_objects as go \u662f\u753b\u56fe\u7684\u4e3b\u8981\u5e93 \u9009\u62e9\u7c7b\u578b go.Scatter() \u753b\u70b9\u6216\u8005\u753b\u7ebf \u5728 Scatter() \u4e2d\u4f20\u5165 mode='markers\u2019 \u5373\u53ef\u521b\u5efa\u6563\u70b9\u56fe \u9ed8\u8ba4 mode='lines' \u5373\u76f4\u7ebf\u56fe \u4e5f\u53ef\u4ee5 mode='lines+markers' \u8bbe\u4e3a\u6298\u7ebf\u56fe go.Bar() \u5efa\u7acb\u67f1\u72b6\u56fe go.Scatter() \u5efa\u7acb\u6563\u70b9\u6216\u8005\u6298\u7ebf\u56fe go.Scatter3d() \u5efa\u7acb3d\u6563\u70b9\u56fe\uff0c\u53ef\u4ee5\u4f20\u5165mode\u53c2\u6570\u540c\u4e0a \u5728\u521b\u5efa\u8fd9\u4e9b\u56fe\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f20\u5165marker\u53c2\u6570\u4fee\u6539\u4e00\u4e9b\u7ec6\u8282 \u6bd4\u5982 marker={'size':3,'color':'red'} \u5c06\u989c\u8272\u8bbe\u7f6e\u4e3a\u7ea2\u8272\u3002 \u4e5f\u53ef\u4ee5\u4f20\u5165name\u53c2\u6570\u4fee\u6539\u56fe\u4f8b\u540d\u79f0\u3002 \u56fe\u8868\u4f18\u5316 \u5728\u521b\u5efa\u5b8c\u56fe\u8868\u4e4b\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316 fig = go...... fig.update_layout( title='title',#\u56fe\u8868\u6807\u9898 xaxis_title='xlable',#x\u8f74\u540d\u79f0 yaxis_title='ylable',#y\u8f74\u540d\u79f0 ) \u989c\u8272\u5206\u7c7b import plotly.express as px fig = px.scatter(data,x=data[],y=data[],color='\u67d0\u4e00\u5217') fig = px.scatter_3d(data,x=data[],y=data[],z=data[],color='\u67d0\u5217') fg.show() ~~\u6ce8\u610f\u8fd9\u4e2ascatter\u7684s\u662f\u5c0f\u5199\u7684\uff0c\u4e0d\u8981\u51fa\u9519\u54e6~~ \u7528\u8fd9\u4e2a\u53ef\u4ee5\u663e\u793a\u6e10\u53d8\u7684\u989c\u8272\u4ee5\u66f4\u597d\u7684\u5206\u7c7b\u3002 \u76f4\u65b9\u56fe \u521b\u7acb\u76f4\u65b9\u56fe \u7528 go.Histogram(data[''],xbins={'size':10})#xibns\u4fee\u6539\u7ec4\u8ddd \u5373\u6bcf\u4e00\u4e2a\u67f1\u7684\u5bbd\u5ea6 fig = go.Figure(hist) fig.update_layout(bargap=0.1)#\u4fee\u6539\u81f3\u6bcf\u4e00\u6bb5\u56fe\u7684\u95f4\u8ddd\uff0c\u5373\u4fee\u6539\u6bcf\u4e2a\u67f1\u95f4\u7684\u8ddd\u79bb \u591a\u7ef4\u56fe\u8868 \u591a\u7ef4\u7684\u56fe\u8868\u7684\u8bdd\u7528 plotly.express \u91cc\u7684\u51fd\u6570 fg = px.scatter_matrix(data,dimensions=[''],color='\u67d0\u4e00\u5217') \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4f20\u5165\u7684\u5404\u5217\u540d\u5b57\u7684\u5217\u8868 plotly \u753b\u56fe\u7684\u4e00\u822c\u6b65\u9aa4 1.\u5bfc\u5165\u6a21\u5757\uff1a import plotly import plotly.graph_objects as go import pandas 2.\u7528pandas\u8bfb\u5165csv\u6587\u4ef6 data = pandas.read_csv('') 3.\u9009\u62e9\u5efa\u7acb\u7684\u56fe\u6807\u7c7b\u578b\uff0c\u662f\u67f1\u72b6\u56fe\uff0c\u8fd8\u662f\u6563\u70b9\u56fe\uff0c\u8fd8\u662f\u6298\u7ebf\u56fe\uff0c\u8fd8\u662f3d\u56fe\u3002 4.\u4ee5\u6298\u7ebf\u56fe\u4e3a\u4f8b scatter = go.Scatter(x='x\u8f74\u6570\u636e',y=\u2018y\u8f74\u6570\u636e\u2019\uff0cname='\u56fe\u4f8b\u540d\u79f0') fg = go.Figure(scatter) fg.show() ps:\u82e5\u8981\u5efa\u7acb\u591a\u4e2a\u56fe\u4f8b\u7684\u8868\uff0c\u9700\u8981\u4ee5\u4e0b\u64cd\u4f5c\u3002 scatter1=go..... scatter2=go..... ........ scattern=go..... fg = go.Figure((scatter1,scatter2......)) \u53ef\u4ee5\u7528\u5faa\u73af\u5199\u5165 \u6700\u540e fg.show() 5.\u6ce8\u610f\u7684\u5730\u65b9\uff1a \u67f1\u72b6\u56fe\u6ce8\u610f\u8981\u663e\u793a\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u9762\u7684\u6570\u5b57\u7684\u8bdd\u8981\u52a0\u4e0a text \u53c2\u6570\uff0c\u7136\u540e\u4ee4 textposition \u53c2\u6570\u7684\u503c\u4e3a outside","title":"plotly"},{"location":"python/plotly/#plotly","text":"import plotly.graph_objects as go \u662f\u753b\u56fe\u7684\u4e3b\u8981\u5e93","title":"plotly\u5b66\u4e60\uff1a"},{"location":"python/plotly/#_1","text":"go.Scatter() \u753b\u70b9\u6216\u8005\u753b\u7ebf \u5728 Scatter() \u4e2d\u4f20\u5165 mode='markers\u2019 \u5373\u53ef\u521b\u5efa\u6563\u70b9\u56fe \u9ed8\u8ba4 mode='lines' \u5373\u76f4\u7ebf\u56fe \u4e5f\u53ef\u4ee5 mode='lines+markers' \u8bbe\u4e3a\u6298\u7ebf\u56fe go.Bar() \u5efa\u7acb\u67f1\u72b6\u56fe go.Scatter() \u5efa\u7acb\u6563\u70b9\u6216\u8005\u6298\u7ebf\u56fe go.Scatter3d() \u5efa\u7acb3d\u6563\u70b9\u56fe\uff0c\u53ef\u4ee5\u4f20\u5165mode\u53c2\u6570\u540c\u4e0a \u5728\u521b\u5efa\u8fd9\u4e9b\u56fe\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f20\u5165marker\u53c2\u6570\u4fee\u6539\u4e00\u4e9b\u7ec6\u8282 \u6bd4\u5982 marker={'size':3,'color':'red'} \u5c06\u989c\u8272\u8bbe\u7f6e\u4e3a\u7ea2\u8272\u3002 \u4e5f\u53ef\u4ee5\u4f20\u5165name\u53c2\u6570\u4fee\u6539\u56fe\u4f8b\u540d\u79f0\u3002","title":"\u9009\u62e9\u7c7b\u578b"},{"location":"python/plotly/#_2","text":"\u5728\u521b\u5efa\u5b8c\u56fe\u8868\u4e4b\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316 fig = go...... fig.update_layout( title='title',#\u56fe\u8868\u6807\u9898 xaxis_title='xlable',#x\u8f74\u540d\u79f0 yaxis_title='ylable',#y\u8f74\u540d\u79f0 )","title":"\u56fe\u8868\u4f18\u5316"},{"location":"python/plotly/#_3","text":"import plotly.express as px fig = px.scatter(data,x=data[],y=data[],color='\u67d0\u4e00\u5217') fig = px.scatter_3d(data,x=data[],y=data[],z=data[],color='\u67d0\u5217') fg.show() ~~\u6ce8\u610f\u8fd9\u4e2ascatter\u7684s\u662f\u5c0f\u5199\u7684\uff0c\u4e0d\u8981\u51fa\u9519\u54e6~~ \u7528\u8fd9\u4e2a\u53ef\u4ee5\u663e\u793a\u6e10\u53d8\u7684\u989c\u8272\u4ee5\u66f4\u597d\u7684\u5206\u7c7b\u3002","title":"\u989c\u8272\u5206\u7c7b"},{"location":"python/plotly/#_4","text":"\u521b\u7acb\u76f4\u65b9\u56fe \u7528 go.Histogram(data[''],xbins={'size':10})#xibns\u4fee\u6539\u7ec4\u8ddd \u5373\u6bcf\u4e00\u4e2a\u67f1\u7684\u5bbd\u5ea6 fig = go.Figure(hist) fig.update_layout(bargap=0.1)#\u4fee\u6539\u81f3\u6bcf\u4e00\u6bb5\u56fe\u7684\u95f4\u8ddd\uff0c\u5373\u4fee\u6539\u6bcf\u4e2a\u67f1\u95f4\u7684\u8ddd\u79bb","title":"\u76f4\u65b9\u56fe"},{"location":"python/plotly/#_5","text":"\u591a\u7ef4\u7684\u56fe\u8868\u7684\u8bdd\u7528 plotly.express \u91cc\u7684\u51fd\u6570 fg = px.scatter_matrix(data,dimensions=[''],color='\u67d0\u4e00\u5217') \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4f20\u5165\u7684\u5404\u5217\u540d\u5b57\u7684\u5217\u8868 plotly \u753b\u56fe\u7684\u4e00\u822c\u6b65\u9aa4 1.\u5bfc\u5165\u6a21\u5757\uff1a import plotly import plotly.graph_objects as go import pandas 2.\u7528pandas\u8bfb\u5165csv\u6587\u4ef6 data = pandas.read_csv('') 3.\u9009\u62e9\u5efa\u7acb\u7684\u56fe\u6807\u7c7b\u578b\uff0c\u662f\u67f1\u72b6\u56fe\uff0c\u8fd8\u662f\u6563\u70b9\u56fe\uff0c\u8fd8\u662f\u6298\u7ebf\u56fe\uff0c\u8fd8\u662f3d\u56fe\u3002 4.\u4ee5\u6298\u7ebf\u56fe\u4e3a\u4f8b scatter = go.Scatter(x='x\u8f74\u6570\u636e',y=\u2018y\u8f74\u6570\u636e\u2019\uff0cname='\u56fe\u4f8b\u540d\u79f0') fg = go.Figure(scatter) fg.show() ps:\u82e5\u8981\u5efa\u7acb\u591a\u4e2a\u56fe\u4f8b\u7684\u8868\uff0c\u9700\u8981\u4ee5\u4e0b\u64cd\u4f5c\u3002 scatter1=go..... scatter2=go..... ........ scattern=go..... fg = go.Figure((scatter1,scatter2......)) \u53ef\u4ee5\u7528\u5faa\u73af\u5199\u5165 \u6700\u540e fg.show() 5.\u6ce8\u610f\u7684\u5730\u65b9\uff1a \u67f1\u72b6\u56fe\u6ce8\u610f\u8981\u663e\u793a\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u9762\u7684\u6570\u5b57\u7684\u8bdd\u8981\u52a0\u4e0a text \u53c2\u6570\uff0c\u7136\u540e\u4ee4 textposition \u53c2\u6570\u7684\u503c\u4e3a outside","title":"\u591a\u7ef4\u56fe\u8868"},{"location":"pytorch/","text":"\u6559\u7ec3\uff0c\u6211\u60f3\u5b66\u4e60 pytorch \u6211\u9009\u62e9 pytorch \u4f5c\u4e3a\u6211\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177\u3002 \u4e3b\u8981\u662f\u6700\u8fd1\u5f88\u706b\u54c8\u54c8\u54c8\u3002 \u4e4b\u524d\u5b66\u4e60\u4e86 pandas \uff0c\u5b66\u4e60 pytorch \u5e94\u8be5\u4f1a\u7b80\u5355\u4e00\u70b9\u70b9\u5427\u3002 \u76ee\u524d\u5c31\u662f\u4e00\u4e2a\u7eaf\u5c0f\u767d\uff0c\u5565\u672f\u8bed\u90fd\u4e0d\u61c2\u6b38\u3002 \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7AI\u5b66\u4e60\u8def\u7ebf\u8ba9\u81ea\u5df1\u66f4\u5389\u5bb3\u70b9\u5427\u3002 \u4e00\u8d77\u52a0\u6cb9\uff01","title":"\u4ecb\u7ecd"},{"location":"pytorch/#pytorch","text":"\u6211\u9009\u62e9 pytorch \u4f5c\u4e3a\u6211\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177\u3002 \u4e3b\u8981\u662f\u6700\u8fd1\u5f88\u706b\u54c8\u54c8\u54c8\u3002 \u4e4b\u524d\u5b66\u4e60\u4e86 pandas \uff0c\u5b66\u4e60 pytorch \u5e94\u8be5\u4f1a\u7b80\u5355\u4e00\u70b9\u70b9\u5427\u3002 \u76ee\u524d\u5c31\u662f\u4e00\u4e2a\u7eaf\u5c0f\u767d\uff0c\u5565\u672f\u8bed\u90fd\u4e0d\u61c2\u6b38\u3002 \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7AI\u5b66\u4e60\u8def\u7ebf\u8ba9\u81ea\u5df1\u66f4\u5389\u5bb3\u70b9\u5427\u3002 \u4e00\u8d77\u52a0\u6cb9\uff01","title":"\u6559\u7ec3\uff0c\u6211\u60f3\u5b66\u4e60pytorch"},{"location":"pytorch/start/","text":"\u5f00\u59cb\uff01 \u7528 import torch \u5bfc\u5165 pytorch \u5e93 \u4e0d\u8981\u6253\u6210 import pytorch \u54e6~ \u4e0b\u9762\u662f\u6211\u7684\u5b66\u4e60\u8bb0\u5f55\uff1a import torch#\u5bfc\u5165\u6a21\u5757 x = torch.rand(5,3)#\u751f\u6210\u968f\u673a\u5f20\u91cf x tensor([[0.8241, 0.9623, 0.8265], [0.8875, 0.6775, 0.0678], [0.8438, 0.5565, 0.0824], [0.7778, 0.7368, 0.5326], [0.6096, 0.5767, 0.5788]]) x = x.new_ones(5,3,dtype=torch.double)#\u751f\u6210\u503c\u4e3a1\u7684\u5f20\u91cf\uff0c\u5e76\u5b9a\u4e49\u6570\u636e\u7c7b\u578b x tensor([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]], dtype=torch.float64) x = torch.randn_like(x,dtype=torch.float)#\u6539\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u6539\u53d8\u6570 x tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]) x.size()#\u83b7\u53d6\u5c3a\u5bf8 torch.Size([5, 3]) y = torch.rand(5,3) torch.add(x,y)#\u4e5f\u53ef\u4ee5\u5199\u6210x+y tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) result = torch.empty(5,3)#\u7a7a\u5f20\u91cf torch.add(x,y,out = result)#\u628a\u8fd0\u7b97\u7ed3\u679c\u50a8\u5b58\u5728result\u91cc tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) x,x[:,1]#\u7c7b\u4f3c\u4e8enumpy\u7684\u5207\u7247\u64cd\u4f5c,\u53d6\u7b2c\u4e8c\u5217 (tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]), tensor([ 0.1029, 1.4284, -0.3634, -1.0210, -0.2605])) x = torch.rand(4,4) y = x.view(16)#\u7c7b\u4f3c\u4e8enumpy\u7684resize()\u4f46\u7528\u6cd5\u4e0d\u592a\u76f8\u540c z = x.view(-1,8) x.size(),y.size(),z.size() (torch.Size([4, 4]), torch.Size([16]), torch.Size([2, 8])) x = torch.rand(1) print(x) print(x.item())#\u53d6\u503c tensor([0.5160]) 0.5160175561904907 import numpy as np a = torch.ones(5) a tensor([1., 1., 1., 1., 1.]) b=a.numpy()#\u5c06\u5f20\u91cf\u8f6c\u6362\u4e3anumpy\u7684array b array([1., 1., 1., 1., 1.], dtype=float32) a.add_(1) #a\u81ea\u52a01\uff0cb\u4e5f\u8ddf\u7740\u6539\u53d8 a,b (tensor([2., 2., 2., 2., 2.]), array([2., 2., 2., 2., 2.], dtype=float32)) a = np.ones(5) b=torch.from_numpy(a)#\u5c06array\u8f6c\u6362\u4e3a\u5f20\u91cf np.add(a,1,out=a) a,b (array([2., 2., 2., 2., 2.]), tensor([2., 2., 2., 2., 2.], dtype=torch.float64)) x = torch.ones(2,2,requires_grad=True)#requires_grad\u53c2\u6570\u7528\u4e8e\u8bf4\u660e\u5f53\u524d\u91cf\u662f\u5426\u9700\u8981\u5728\u8ba1\u7b97\u4e2d\u4fdd\u7559\u5bf9\u5e94\u7684\u68af\u5ea6\u4fe1\u606f\u4ee5\u7ebf\u6027\u56de\u5f52\u4e3a\u4f8b\uff0c\u4e3a\u4e86\u5f97\u5230\u6700\u5408\u9002\u7684\u53c2\u6570\u503c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5173\u7684\u635f\u5931\u51fd\u6570\uff0c\u6839\u636e\u68af\u5ea6\u56de\u4f20\u7684\u601d\u8def\u8fdb\u884c\u8bad\u7ec3\u3002 x tensor([[1., 1.], [1., 1.]], requires_grad=True) y = x+2 y tensor([[3., 3.], [3., 3.]], grad_fn=<AddBackward0>) y.grad_fn#\u7528\u4e8e\u6307\u5bfc\u53cd\u5411\u4f20\u64ad\uff0c\u6211\u73b0\u5728\u4e5f\u4e0d\u592a\u61c2 <AddBackward0 at 0x25b91b2c710> z = y*y*3 out = torch.mean(z) z,out (tensor([[27., 27.], [27., 27.]], grad_fn=<MulBackward0>), tensor(27., grad_fn=<MeanBackward0>)) a = torch.randn(2,2) print(a) print(a.requires_grad) a.requires_grad_(True)#\u4fee\u6539requires_grad\u7684\u503c print(a.requires_grad) b=(a*a).sum() print(b.grad_fn) tensor([[-0.6831, 1.5310], [-0.5836, 0.4117]]) False True <SumBackward0 object at 0x0000025B91B39828> \u548c numpy \u7684\u4e92\u76f8\u8f6c\u6362: import numpy as np import torch a = torch.Tensor([]) b=a.numpy()#a\u4e3a\u5f20\u91cf a = np.arange.randn() b = torch.from_numpy(a)#a\u4e3aarray","title":"start"},{"location":"pytorch/start/#_1","text":"\u7528 import torch \u5bfc\u5165 pytorch \u5e93 \u4e0d\u8981\u6253\u6210 import pytorch \u54e6~ \u4e0b\u9762\u662f\u6211\u7684\u5b66\u4e60\u8bb0\u5f55\uff1a import torch#\u5bfc\u5165\u6a21\u5757 x = torch.rand(5,3)#\u751f\u6210\u968f\u673a\u5f20\u91cf x tensor([[0.8241, 0.9623, 0.8265], [0.8875, 0.6775, 0.0678], [0.8438, 0.5565, 0.0824], [0.7778, 0.7368, 0.5326], [0.6096, 0.5767, 0.5788]]) x = x.new_ones(5,3,dtype=torch.double)#\u751f\u6210\u503c\u4e3a1\u7684\u5f20\u91cf\uff0c\u5e76\u5b9a\u4e49\u6570\u636e\u7c7b\u578b x tensor([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]], dtype=torch.float64) x = torch.randn_like(x,dtype=torch.float)#\u6539\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u6539\u53d8\u6570 x tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]) x.size()#\u83b7\u53d6\u5c3a\u5bf8 torch.Size([5, 3]) y = torch.rand(5,3) torch.add(x,y)#\u4e5f\u53ef\u4ee5\u5199\u6210x+y tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) result = torch.empty(5,3)#\u7a7a\u5f20\u91cf torch.add(x,y,out = result)#\u628a\u8fd0\u7b97\u7ed3\u679c\u50a8\u5b58\u5728result\u91cc tensor([[-0.8348, 0.5407, 0.6893], [-0.9977, 1.4544, -0.6345], [ 0.7664, -0.3510, 2.3684], [ 0.4159, -0.4354, -1.6096], [ 0.0588, -0.1941, 0.5014]]) x,x[:,1]#\u7c7b\u4f3c\u4e8enumpy\u7684\u5207\u7247\u64cd\u4f5c,\u53d6\u7b2c\u4e8c\u5217 (tensor([[-1.1167, 0.1029, 0.5996], [-1.2067, 1.4284, -1.0661], [-0.0320, -0.3634, 1.4178], [ 0.2564, -1.0210, -2.3204], [-0.0476, -0.2605, -0.1166]]), tensor([ 0.1029, 1.4284, -0.3634, -1.0210, -0.2605])) x = torch.rand(4,4) y = x.view(16)#\u7c7b\u4f3c\u4e8enumpy\u7684resize()\u4f46\u7528\u6cd5\u4e0d\u592a\u76f8\u540c z = x.view(-1,8) x.size(),y.size(),z.size() (torch.Size([4, 4]), torch.Size([16]), torch.Size([2, 8])) x = torch.rand(1) print(x) print(x.item())#\u53d6\u503c tensor([0.5160]) 0.5160175561904907 import numpy as np a = torch.ones(5) a tensor([1., 1., 1., 1., 1.]) b=a.numpy()#\u5c06\u5f20\u91cf\u8f6c\u6362\u4e3anumpy\u7684array b array([1., 1., 1., 1., 1.], dtype=float32) a.add_(1) #a\u81ea\u52a01\uff0cb\u4e5f\u8ddf\u7740\u6539\u53d8 a,b (tensor([2., 2., 2., 2., 2.]), array([2., 2., 2., 2., 2.], dtype=float32)) a = np.ones(5) b=torch.from_numpy(a)#\u5c06array\u8f6c\u6362\u4e3a\u5f20\u91cf np.add(a,1,out=a) a,b (array([2., 2., 2., 2., 2.]), tensor([2., 2., 2., 2., 2.], dtype=torch.float64)) x = torch.ones(2,2,requires_grad=True)#requires_grad\u53c2\u6570\u7528\u4e8e\u8bf4\u660e\u5f53\u524d\u91cf\u662f\u5426\u9700\u8981\u5728\u8ba1\u7b97\u4e2d\u4fdd\u7559\u5bf9\u5e94\u7684\u68af\u5ea6\u4fe1\u606f\u4ee5\u7ebf\u6027\u56de\u5f52\u4e3a\u4f8b\uff0c\u4e3a\u4e86\u5f97\u5230\u6700\u5408\u9002\u7684\u53c2\u6570\u503c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5173\u7684\u635f\u5931\u51fd\u6570\uff0c\u6839\u636e\u68af\u5ea6\u56de\u4f20\u7684\u601d\u8def\u8fdb\u884c\u8bad\u7ec3\u3002 x tensor([[1., 1.], [1., 1.]], requires_grad=True) y = x+2 y tensor([[3., 3.], [3., 3.]], grad_fn=<AddBackward0>) y.grad_fn#\u7528\u4e8e\u6307\u5bfc\u53cd\u5411\u4f20\u64ad\uff0c\u6211\u73b0\u5728\u4e5f\u4e0d\u592a\u61c2 <AddBackward0 at 0x25b91b2c710> z = y*y*3 out = torch.mean(z) z,out (tensor([[27., 27.], [27., 27.]], grad_fn=<MulBackward0>), tensor(27., grad_fn=<MeanBackward0>)) a = torch.randn(2,2) print(a) print(a.requires_grad) a.requires_grad_(True)#\u4fee\u6539requires_grad\u7684\u503c print(a.requires_grad) b=(a*a).sum() print(b.grad_fn) tensor([[-0.6831, 1.5310], [-0.5836, 0.4117]]) False True <SumBackward0 object at 0x0000025B91B39828> \u548c numpy \u7684\u4e92\u76f8\u8f6c\u6362: import numpy as np import torch a = torch.Tensor([]) b=a.numpy()#a\u4e3a\u5f20\u91cf a = np.arange.randn() b = torch.from_numpy(a)#a\u4e3aarray","title":"\u5f00\u59cb\uff01"},{"location":"pytorch/think/","text":"\u4e00\u4e9b\u601d\u8003 \u770b\u4e86\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u7684\u6559\u7a0b\uff0c\u53d1\u73b0\u6570\u5b66\u5728\u8fd9\u4e00\u5757\u975e\u5e38\u91cd\u8981\uff0c\u60f3\u5b66\u597d\u5fc5\u987b\u5148\u628a\u6570\u5b66\u5b66\u597d\uff0c\u6240\u4ee5\u5148\u4e0d\u7740\u6025\u5b66\u4e60\u66f4\u52a0\u6df1\u5965\u7684\u5185\u5bb9\uff0c\u5148\u628a\u4ee5\u76ee\u524d\u7684\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u5b9e\u73b0\u7684\u4e1c\u897f\u53bb\u5b9e\u73b0\u4e00\u4e0b\u5427\u3002 \u4e86\u89e3\u4e86\u4e00\u4e9b\u77e5\u8bc6\uff0c\u6bd4\u5982\u68af\u5ea6\u4e0b\u964d\uff0c\u68af\u5ea6\u4e0b\u964d\u5c5e\u4e8e\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u9886\u57df\u91cc\u3002\u68af\u5ea6\u4e0b\u964d\u91cc\u9762\u7684\u68af\u5ea6\u5c31\u662f\u6240\u5b66\u7684\u6c42\u5bfc\u6c42\u5fae\u5206\u3002 \u6709\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u7528\u4e8e\u6bd4\u8f83\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u4e0e\u6570\u636e\u96c6\u4e2d\u7684\u503c\u6709\u591a\u5927\u5dee\u522b\u3002 \u7c7b\u4f3c\u4e8e\u9ad8\u4e2d\u7ebf\u6027\u56de\u5f52\u5b66\u7684\u90a3\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u80af\u5b9a\u66f4\u52a0\u590d\u6742\u3002 \u5e38\u7528\u5e73\u65b9\u5dee \u6700\u7ec8\u7b80\u5316\u6210\u6700\u540e\u7684\u90a3\u6837 \u5728\u6700\u7b80\u5355\u7684\u4e8c\u6b21\u51fd\u6570\u4e2d\uff0c\u5c31\u662f\u6c42\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u539f\u70b9\u3002 \u5728\u4efb\u610f\u4e00\u70b9\u505a\u5207\u7ebf\uff0c\u5982\u679c\u5bfc\u6570\u503c\u4e0d\u4e3a0\uff0c\u5219\u6cbf\u7740\u8fc7\u8fd9\u70b9\u7684\u5207\u7ebf\u4e0b\u964d\uff0c\u7136\u540e\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6700\u540e\u4e0b\u964d\u5230\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u6211\u7406\u89e3\u7684\u8fd9\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u7684\u6982\u5ff5\u3002 \u5f53\u7136\u8fd9\u662f\u6700\u7b80\u5355\u7684\uff0c\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684W\u53ef\u4e0d\u6b62\u4e00\u4e2a \u800c\u4e14\u4e5f\u4e0d\u6b62\u4e00\u4e2a\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u6709\u5168\u5c40\u6700\u4f18\u7684\u70b9\uff0c\u4e5f\u6709\u5c40\u90e8\u6700\u4f18\u7684\u70b9\u3002 W\u7684\u521d\u59cb\u70b9\u4e0d\u540c\uff0c\u5bf9\u5e94\u7684\u6700\u4f18\u89e3\u4e5f\u4e0d\u4e00\u6837\u3002 \u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u53eb\u505a\u6fc0\u6d3b\u51fd\u6570\u3002 \u5b83\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u65b9\u7a0b\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u4e00\u822c\u7ebf\u6027\u65b9\u7a0b\u53ef\u4ee5\u7528 y=Wx \u6765\u8868\u793a \u6fc0\u6d3b\u51fd\u6570\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5\uff0c\u628a\u5b83\u63b0\u5f2f \u5e38\u7528\u7684\u6709 \u7ebf\u6027\u6574\u6d41\u51fd\u6570``Sigmoid\u51fd\u6570``\u53cc\u66f2\u6b63\u5207\u51fd\u6570 \u7b49 \u4ed6\u4eec\u4f7f\u8f93\u51fa\u7ed3\u679cy\u53d8\u5f2f\u4e86 \u8fd8\u6709 \u8bef\u5dee\u53cd\u5411\u4f20\u64ad \uff0c\u6211\u7406\u89e3\u5c31\u662f\u5c06\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u56de\u53bb\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\uff0c\u76f4\u5230\u8bef\u5dee\u6700\u5c0f\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u8fbe\u5230\u8bad\u7ec3\u7684\u76ee\u7684\u3002","title":"\u4e00\u4e9b\u601d\u8003"},{"location":"pytorch/think/#_1","text":"\u770b\u4e86\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u7684\u6559\u7a0b\uff0c\u53d1\u73b0\u6570\u5b66\u5728\u8fd9\u4e00\u5757\u975e\u5e38\u91cd\u8981\uff0c\u60f3\u5b66\u597d\u5fc5\u987b\u5148\u628a\u6570\u5b66\u5b66\u597d\uff0c\u6240\u4ee5\u5148\u4e0d\u7740\u6025\u5b66\u4e60\u66f4\u52a0\u6df1\u5965\u7684\u5185\u5bb9\uff0c\u5148\u628a\u4ee5\u76ee\u524d\u7684\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u5b9e\u73b0\u7684\u4e1c\u897f\u53bb\u5b9e\u73b0\u4e00\u4e0b\u5427\u3002 \u4e86\u89e3\u4e86\u4e00\u4e9b\u77e5\u8bc6\uff0c\u6bd4\u5982\u68af\u5ea6\u4e0b\u964d\uff0c\u68af\u5ea6\u4e0b\u964d\u5c5e\u4e8e\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u9886\u57df\u91cc\u3002\u68af\u5ea6\u4e0b\u964d\u91cc\u9762\u7684\u68af\u5ea6\u5c31\u662f\u6240\u5b66\u7684\u6c42\u5bfc\u6c42\u5fae\u5206\u3002 \u6709\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u7528\u4e8e\u6bd4\u8f83\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u4e0e\u6570\u636e\u96c6\u4e2d\u7684\u503c\u6709\u591a\u5927\u5dee\u522b\u3002 \u7c7b\u4f3c\u4e8e\u9ad8\u4e2d\u7ebf\u6027\u56de\u5f52\u5b66\u7684\u90a3\u4e2a\u8bef\u5dee\u65b9\u7a0b\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u80af\u5b9a\u66f4\u52a0\u590d\u6742\u3002 \u5e38\u7528\u5e73\u65b9\u5dee \u6700\u7ec8\u7b80\u5316\u6210\u6700\u540e\u7684\u90a3\u6837 \u5728\u6700\u7b80\u5355\u7684\u4e8c\u6b21\u51fd\u6570\u4e2d\uff0c\u5c31\u662f\u6c42\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u539f\u70b9\u3002 \u5728\u4efb\u610f\u4e00\u70b9\u505a\u5207\u7ebf\uff0c\u5982\u679c\u5bfc\u6570\u503c\u4e0d\u4e3a0\uff0c\u5219\u6cbf\u7740\u8fc7\u8fd9\u70b9\u7684\u5207\u7ebf\u4e0b\u964d\uff0c\u7136\u540e\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6700\u540e\u4e0b\u964d\u5230\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u6211\u7406\u89e3\u7684\u8fd9\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u7684\u6982\u5ff5\u3002 \u5f53\u7136\u8fd9\u662f\u6700\u7b80\u5355\u7684\uff0c\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684W\u53ef\u4e0d\u6b62\u4e00\u4e2a \u800c\u4e14\u4e5f\u4e0d\u6b62\u4e00\u4e2a\u5bfc\u6570\u4e3a0\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u6709\u5168\u5c40\u6700\u4f18\u7684\u70b9\uff0c\u4e5f\u6709\u5c40\u90e8\u6700\u4f18\u7684\u70b9\u3002 W\u7684\u521d\u59cb\u70b9\u4e0d\u540c\uff0c\u5bf9\u5e94\u7684\u6700\u4f18\u89e3\u4e5f\u4e0d\u4e00\u6837\u3002 \u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u53eb\u505a\u6fc0\u6d3b\u51fd\u6570\u3002 \u5b83\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u65b9\u7a0b\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u4e00\u822c\u7ebf\u6027\u65b9\u7a0b\u53ef\u4ee5\u7528 y=Wx \u6765\u8868\u793a \u6fc0\u6d3b\u51fd\u6570\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5\uff0c\u628a\u5b83\u63b0\u5f2f \u5e38\u7528\u7684\u6709 \u7ebf\u6027\u6574\u6d41\u51fd\u6570``Sigmoid\u51fd\u6570``\u53cc\u66f2\u6b63\u5207\u51fd\u6570 \u7b49 \u4ed6\u4eec\u4f7f\u8f93\u51fa\u7ed3\u679cy\u53d8\u5f2f\u4e86 \u8fd8\u6709 \u8bef\u5dee\u53cd\u5411\u4f20\u64ad \uff0c\u6211\u7406\u89e3\u5c31\u662f\u5c06\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u56de\u53bb\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\uff0c\u76f4\u5230\u8bef\u5dee\u6700\u5c0f\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u8fbe\u5230\u8bad\u7ec3\u7684\u76ee\u7684\u3002","title":"\u4e00\u4e9b\u601d\u8003"},{"location":"sf/","text":"\u8fd9\u91cc\u5c5e\u4e8e\u7b97\u6cd5 \u6211\u9ad8\u4e2d\u6ca1\u6709\u53c2\u52a0\u7b97\u6cd5\u6bd4\u8d5b\uff0c\u521a\u521a\u8fdb\u5165\u5927\u5b66\u624d\u5f00\u59cb\u5165\u95e8\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u7684\u7b97\u6cd5\u5f88\u83dc\uff0c\u8fd8\u5728\u52aa\u529b\u7684\u5b66\u4e60\u4e2d\uff0c\u5e0c\u671b\u4ee5\u540e\u53ef\u4ee5\u4f1a\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u6210\u957f\uff0c\u53ef\u4ee5\u53bb\u53c2\u52a0\u6bd4\u8d5b \u5982\u679c\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u5927\u4f6c\u7ed9\u6211\u63d0\u51fa\uff0c\u56e0\u4e3a\u6211\u7684\u7b97\u6cd5\u6c34\u5e73\u5b9e\u5728\u662f\u592a\u4f4e\u4e86\u3002 \u8054\u7cfb\u65b9\u5f0f\uff1a qq\uff1a1683070754 \u90ae\u7bb1\uff1a1683070754@qq.com \u8c22\u8c22\u5404\u4f4d\u7684\u6307\u5bfc\uff01\uff01","title":"\u4ecb\u7ecd"},{"location":"sf/#_1","text":"\u6211\u9ad8\u4e2d\u6ca1\u6709\u53c2\u52a0\u7b97\u6cd5\u6bd4\u8d5b\uff0c\u521a\u521a\u8fdb\u5165\u5927\u5b66\u624d\u5f00\u59cb\u5165\u95e8\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u7684\u7b97\u6cd5\u5f88\u83dc\uff0c\u8fd8\u5728\u52aa\u529b\u7684\u5b66\u4e60\u4e2d\uff0c\u5e0c\u671b\u4ee5\u540e\u53ef\u4ee5\u4f1a\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u6210\u957f\uff0c\u53ef\u4ee5\u53bb\u53c2\u52a0\u6bd4\u8d5b \u5982\u679c\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u5927\u4f6c\u7ed9\u6211\u63d0\u51fa\uff0c\u56e0\u4e3a\u6211\u7684\u7b97\u6cd5\u6c34\u5e73\u5b9e\u5728\u662f\u592a\u4f4e\u4e86\u3002","title":"\u8fd9\u91cc\u5c5e\u4e8e\u7b97\u6cd5"},{"location":"sf/#_2","text":"","title":"\u8054\u7cfb\u65b9\u5f0f\uff1a"},{"location":"sf/#qq1683070754","text":"","title":"qq\uff1a1683070754"},{"location":"sf/#1683070754qqcom","text":"\u8c22\u8c22\u5404\u4f4d\u7684\u6307\u5bfc\uff01\uff01","title":"\u90ae\u7bb1\uff1a1683070754@qq.com"},{"location":"sf/1/","text":"\u524d\u51e0\u5929\u5728\u6d1b\u8c37\u521a\u5237\u7684\u4e00\u4e2a\u9898\u76ee ~~\u5f53\u65f6\u5728\u4e00\u4e9b\u5730\u65b9\u8e29\u4e86\u5751\uff0c\u5199\u51fa\u6765\u5438\u53d6\u6559\u8bad~~ \u6d1b\u8c37\u94fe\u63a5 \uff1ahttps://www.luogu.com.cn/problem/P1055 \u5f53\u65f6\u83b7\u53d6\u8f93\u5165\u7684\u65f6\u5019\u662f\u7528%d\u6765\u83b7\u53d6\u7684\uff0c\u540e\u6765\u53d1\u73b0\u6570\u636e\u5341\u5206\u5f02\u5e38\uff0c\u901a\u8fc7\u6d4b\u8bd5\u53d1\u73b0 -\u53f7\u88ab\u8bc6\u522b\u6210\u4e86\u7b26\u53f7\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u8f93\u5165\u5f02\u5e38 \u7ecf\u8fc7\u5f88\u4e45\u7684\u601d\u8003 \u7136\u540e\u6211\u604d\u7136\u5927\u609f\uff0c\u7528%c\u83b7\u53d6\u5c31\u597d\u4e86\u554a\uff01 \u5148\u8d34\u4e0a\u4ee3\u7801 #include <iostream> #include <stdlib.h> #include <cstdio> using namespace std; int main(){ char temp; char num[9]; scanf(\"%c-%c%c%c-%c%c%c%c%c-%c\",&num[0],&num[1],&num[2],&num[3],&num[4],&num[5],&num[6],&num[7],&num[8],&temp); int sum = 0; int X = 'X'; for(int n =1;n<=9;n++){ sum=sum+((num[n-1]-48)*n); } if(sum%11 == 10){ if(temp=='X'){ printf(\"Right\"); } else { printf(\"%c-%c%c%c-%c%c%c%c%c-%c\",num[0],num[1],num[2],num[3],num[4],num[5],num[6],num[7],num[8],'X'); } } else if(sum%11 == (int)temp-48){ printf(\"Right\"); } else if(sum%11 != (int)temp-48) { printf(\"%c-%c%c%c-%c%c%c%c%c-%c\",num[0],num[1],num[2],num[3],num[4],num[5],num[6],num[7],num[8],(char)((sum%11)+48)); } system(\"pause\"); return 0; } \u867d\u7136\u6211\u5199\u7684\u5f88\u81c3\u80bf\uff0c\u4f46\u81f3\u5c11AC\u4e86 \u540e\u6765\u4e5f\u6ca1\u60f3\u7740\u4f18\u5316\u4ee3\u7801\u3002 \u603b\u4e4b\u6211\u5c31\u662f\u901a\u8fc7\u5b57\u7b26\u83b7\u53d6\u8f93\u5165\u7136\u540e\u8f6c\u6362\u6210\u6574\u6570\u578b\u5728\u8fdb\u884c\u5224\u65ad \u603b\u4f53\u7684\u96be\u70b9\u5c31\u5728\u8fd9\uff0c\u666e\u53ca\u9898\u7684\u96be\u5ea6\uff0c\u540e\u9762\u5c31\u5f88\u7b80\u5355\u4e86\uff01 \u6211\u83b7\u5f97\u7684\u6536\u83b7\u5982\u4e0b\uff1a \u83b7\u53d6\u8f93\u5165\u65f6\u8981\u7075\u6d3b\u5224\u65ad\u662f\u5b57\u7b26\u8fd8\u662f\u6574\u6570 \u7075\u6d3b\u4f7f\u7528\u6570\u7ec4 \u8981\u53ca\u65f6\u4f18\u5316\u4ee3\u7801 \u5411\u5927\u4f6c\u5b66\u4e60\uff01","title":"isbn\u53f7\u7801"},{"location":"sf/2/","text":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898 \u4eca\u5929\u5728\u6d1b\u8c37\u5237\u9898\uff0c\u4ece\u9898\u5355\u91cc\u9762\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5237\uff0c\u7136\u540e\u53d1\u73b0\u4e86\u8fd9\u9053\u9898 \u9636\u4e58\u4e4b\u548c \u9898\u76ee\u7684\u8981\u6c42\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c061-n\u7684\u6240\u6709\u6570\u7684\u9636\u4e58\u76f8\u52a0\u8d77\u6765\u3002 \u56e0\u4e3a\u4e4b\u524d\u505a\u8fc7\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u60f3\u5f53\u7136\u7684\u53bb\u4e0a\u624b\u4e86\u3002 \u5f00\u59cb\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a #include <iostream> #include <cstdio> using namespace std; int re_jie(int n){ if(n==1){ return 1; } else if(n==0){ return 0; } else{ return n*re_jie(n-1); } } int main(){ int i; long long sum; cin>>i; for(int n=1;n<=i;n++){ sum+=re_jie(n); } cout<<sum; return 0; } \u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u6837A\u8fc7\u53bb\u4e86 \u7ed3\u679c\u540e\u4e24\u4e2aWA\u4e86\uff0c\u7136\u540e\u6211\u518d\u4ed4\u7ec6\u4e00\u770b\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u53ca\u9898\uff0c\u6240\u4ee5\u80af\u5b9a\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\u7684\u3002 \u4e8e\u662f\u6211\u6709\u770b\u4e86\u770b\u9898\uff0c\u53d1\u73b0\u4e86\u4e0b\u9762\u7684\u63d0\u793a\u3002 \u539f\u6765\u8fd9\u4e2a\u9898\u8f93\u5165\u5927\u4e8e20\u4ee5\u540e\u6570\u636e\u8303\u56f4\u5c31\u8d85\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e2a\u9ad8\u7cbe\u5ea6\u95ee\u9898\u4e86\u3002 \u4e00\u770b\u9898\u76ee\u7684\u9650\u5236\uff0cn<=50 \u6570\u636e\u91cf\u4e0d\u662f\u5f88\u5927\u554a\u3002 \u4e8e\u662f\u60f3\u8d77\u4e86\u7f51\u4e0a\u5e38\u8bf4\u7684\u6253\u8868\u4e86\u3002 \u867d\u7136\u6211\u77e5\u9053\u4ec0\u4e48\u662f\u6253\u8868\uff0c\u4f46\u4e5f\u4e00\u76f4\u6ca1\u6709\u7528\u5230\u8fc7\u3002 \u53c8\u60f3\u8d77\u6765python\u91cc\u81ea\u5e26\u9ad8\u7cbe\u5ea6\u6570\u636e\u7c7b\u578b\uff0c\u4e8e\u662f\u6211\u60f3\u8d77\u4e86\u7528python\u5b9e\u73b0\u6253\u8868\u7684\u4efb\u52a1 python\u4ee3\u7801\u5982\u4e0b def re_jie(n): if n==1: return 1 else: return n*re_jie(n-1) def re_sum(m): sum=0 for i in range(1,m+1): sum+=re_jie(i) return sum for a in range(1,51): print('\"{}\",'.format(re_sum(a))) \u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u6240\u6709\u7684\u7ed3\u679c \u7136\u540e\u5c06\u8fd9\u4e9b\u7ed3\u679c\u590d\u5236\u5230cpp\u7a0b\u5e8f\u4e2d\u53bb #include <iostream> #include <cstdio> #include <stdlib.h> #include <string> using namespace std; int main(){ string st[60] = {\"0\", \"1\", \"3\", \"9\", \"33\", \"153\", \"873\", \"5913\", \"46233\", \"409113\", \"4037913\", \"43954713\", \"522956313\", \"6749977113\", \"93928268313\", \"1401602636313\", \"22324392524313\", \"378011820620313\", \"6780385526348313\", \"128425485935180313\", \"2561327494111820313\", \"53652269665821260313\", \"1177652997443428940313\", \"27029669736328405580313\", \"647478071469567844940313\", \"16158688114800553828940313\", \"419450149241406189412940313\", \"11308319599659758350180940313\", \"316196664211373618851684940313\", \"9157958657951075573395300940313\", \"274410818470142134209703780940313\", \"8497249472648064951935266660940313\", \"271628086406341595119153278820940313\", \"8954945705218228090637347680100940313\", \"304187744744822368938255957323620940313\", \"10637335711130967298604907294846820940313\", \"382630662501032184766604355445682020940313\", \"14146383753727377231082583937026584420940313\", \"537169001220328488991089808037100875620940313\", \"20935051082417771847631371547939998232420940313\", \"836850334330315506193242641144055892504420940313\", \"34289376947494122614363304694584807557656420940313\", \"1439295494700374021157505910939096377494040420940313\", \"61854558558074209658512637979453093884758552420940313\", \"2720126133346522977702138448994068984204397080420940313\", \"122342346998826717539665299944651784048588130840420940313\", \"5624964506810915667389970728744906677010239883800420940313\", \"264248206017979096310354325882356886646207872272920420940313\", \"12678163798554051767172643373255731925167694226950680420940313\", \"620960027832821612639424806694551108812720525606160920420940313\", \"31035053229546199656252032972759319953190362094566672920420940313\"}; int n; cin>>n; cout<<st[n]; system(\"pause\"); return 0; } \u6700\u540eAC\u6210\u529f\u4e86\uff0c\u7b2c\u4e00\u6b21\u505a\u6253\u8868\u9898\uff0c\u611f\u89c9\u826f\u597d\uff0c\u5341\u5206\u8212\u723d\u554a\uff01\u3002 \u6700\u540e\u603b\u7ed3\u4e00\u4e0b \u6570\u636e\u8fc7\u5927\u7684\u8bb0\u5f97\u4f7f\u7528\u9ad8\u7cbe\u5ea6 \u6570\u636e\u91cf\u4e0d\u5927\u7684\u7528\u6253\u8868\u6bd4\u8f83\u5feb","title":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898"},{"location":"sf/2/#_1","text":"\u4eca\u5929\u5728\u6d1b\u8c37\u5237\u9898\uff0c\u4ece\u9898\u5355\u91cc\u9762\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5237\uff0c\u7136\u540e\u53d1\u73b0\u4e86\u8fd9\u9053\u9898 \u9636\u4e58\u4e4b\u548c \u9898\u76ee\u7684\u8981\u6c42\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c061-n\u7684\u6240\u6709\u6570\u7684\u9636\u4e58\u76f8\u52a0\u8d77\u6765\u3002 \u56e0\u4e3a\u4e4b\u524d\u505a\u8fc7\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u60f3\u5f53\u7136\u7684\u53bb\u4e0a\u624b\u4e86\u3002 \u5f00\u59cb\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a #include <iostream> #include <cstdio> using namespace std; int re_jie(int n){ if(n==1){ return 1; } else if(n==0){ return 0; } else{ return n*re_jie(n-1); } } int main(){ int i; long long sum; cin>>i; for(int n=1;n<=i;n++){ sum+=re_jie(n); } cout<<sum; return 0; } \u672c\u4ee5\u4e3a\u8fd9\u4e2a\u9898\u5c31\u8fd9\u6837A\u8fc7\u53bb\u4e86 \u7ed3\u679c\u540e\u4e24\u4e2aWA\u4e86\uff0c\u7136\u540e\u6211\u518d\u4ed4\u7ec6\u4e00\u770b\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u53ca\u9898\uff0c\u6240\u4ee5\u80af\u5b9a\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\u7684\u3002 \u4e8e\u662f\u6211\u6709\u770b\u4e86\u770b\u9898\uff0c\u53d1\u73b0\u4e86\u4e0b\u9762\u7684\u63d0\u793a\u3002 \u539f\u6765\u8fd9\u4e2a\u9898\u8f93\u5165\u5927\u4e8e20\u4ee5\u540e\u6570\u636e\u8303\u56f4\u5c31\u8d85\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e2a\u9ad8\u7cbe\u5ea6\u95ee\u9898\u4e86\u3002 \u4e00\u770b\u9898\u76ee\u7684\u9650\u5236\uff0cn<=50 \u6570\u636e\u91cf\u4e0d\u662f\u5f88\u5927\u554a\u3002 \u4e8e\u662f\u60f3\u8d77\u4e86\u7f51\u4e0a\u5e38\u8bf4\u7684\u6253\u8868\u4e86\u3002 \u867d\u7136\u6211\u77e5\u9053\u4ec0\u4e48\u662f\u6253\u8868\uff0c\u4f46\u4e5f\u4e00\u76f4\u6ca1\u6709\u7528\u5230\u8fc7\u3002 \u53c8\u60f3\u8d77\u6765python\u91cc\u81ea\u5e26\u9ad8\u7cbe\u5ea6\u6570\u636e\u7c7b\u578b\uff0c\u4e8e\u662f\u6211\u60f3\u8d77\u4e86\u7528python\u5b9e\u73b0\u6253\u8868\u7684\u4efb\u52a1 python\u4ee3\u7801\u5982\u4e0b def re_jie(n): if n==1: return 1 else: return n*re_jie(n-1) def re_sum(m): sum=0 for i in range(1,m+1): sum+=re_jie(i) return sum for a in range(1,51): print('\"{}\",'.format(re_sum(a))) \u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u6240\u6709\u7684\u7ed3\u679c \u7136\u540e\u5c06\u8fd9\u4e9b\u7ed3\u679c\u590d\u5236\u5230cpp\u7a0b\u5e8f\u4e2d\u53bb #include <iostream> #include <cstdio> #include <stdlib.h> #include <string> using namespace std; int main(){ string st[60] = {\"0\", \"1\", \"3\", \"9\", \"33\", \"153\", \"873\", \"5913\", \"46233\", \"409113\", \"4037913\", \"43954713\", \"522956313\", \"6749977113\", \"93928268313\", \"1401602636313\", \"22324392524313\", \"378011820620313\", \"6780385526348313\", \"128425485935180313\", \"2561327494111820313\", \"53652269665821260313\", \"1177652997443428940313\", \"27029669736328405580313\", \"647478071469567844940313\", \"16158688114800553828940313\", \"419450149241406189412940313\", \"11308319599659758350180940313\", \"316196664211373618851684940313\", \"9157958657951075573395300940313\", \"274410818470142134209703780940313\", \"8497249472648064951935266660940313\", \"271628086406341595119153278820940313\", \"8954945705218228090637347680100940313\", \"304187744744822368938255957323620940313\", \"10637335711130967298604907294846820940313\", \"382630662501032184766604355445682020940313\", \"14146383753727377231082583937026584420940313\", \"537169001220328488991089808037100875620940313\", \"20935051082417771847631371547939998232420940313\", \"836850334330315506193242641144055892504420940313\", \"34289376947494122614363304694584807557656420940313\", \"1439295494700374021157505910939096377494040420940313\", \"61854558558074209658512637979453093884758552420940313\", \"2720126133346522977702138448994068984204397080420940313\", \"122342346998826717539665299944651784048588130840420940313\", \"5624964506810915667389970728744906677010239883800420940313\", \"264248206017979096310354325882356886646207872272920420940313\", \"12678163798554051767172643373255731925167694226950680420940313\", \"620960027832821612639424806694551108812720525606160920420940313\", \"31035053229546199656252032972759319953190362094566672920420940313\"}; int n; cin>>n; cout<<st[n]; system(\"pause\"); return 0; } \u6700\u540eAC\u6210\u529f\u4e86\uff0c\u7b2c\u4e00\u6b21\u505a\u6253\u8868\u9898\uff0c\u611f\u89c9\u826f\u597d\uff0c\u5341\u5206\u8212\u723d\u554a\uff01\u3002 \u6700\u540e\u603b\u7ed3\u4e00\u4e0b \u6570\u636e\u8fc7\u5927\u7684\u8bb0\u5f97\u4f7f\u7528\u9ad8\u7cbe\u5ea6 \u6570\u636e\u91cf\u4e0d\u5927\u7684\u7528\u6253\u8868\u6bd4\u8f83\u5feb","title":"\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u6253\u8868\u9898"}]}