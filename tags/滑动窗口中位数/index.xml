<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>滑动窗口中位数 - 标签 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
        <description>滑动窗口中位数 - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 25 Feb 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/" rel="self" type="application/rss+xml" /><item>
    <title>滑动窗口中位数</title>
    <link>https://blog.vllbc.top/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
    <pubDate>Thu, 25 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
    <description><![CDATA[<h1 id="滑动窗口中位数">滑动窗口中位数</h1>
<h2 id="题目">题目：</h2>
<p><a
href="https://leetcode-cn.com/problems/sliding-window-median/">https://leetcode-cn.com/problems/sliding-window-median/</a></p>
<h2 id="思路">思路：</h2>
<p>很明显的滑动窗口，首先定义一个求中位数的匿名函数，然后一点一点求出来</p>
<h2 id="代码">代码：</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Solution:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> medianSlidingWindow(<span class="va">self</span>, nums: List[<span class="bu">int</span>], k: <span class="bu">int</span>) <span class="op">-&gt;</span> List[<span class="bu">float</span>]:</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        median <span class="op">=</span> <span class="kw">lambda</span> a: (a[(<span class="bu">len</span>(a)<span class="op">-</span><span class="dv">1</span>)<span class="op">//</span><span class="dv">2</span>] <span class="op">+</span> a[<span class="bu">len</span>(a)<span class="op">//</span><span class="dv">2</span>]) <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        res <span class="op">=</span> []</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(nums)<span class="op">-</span>k<span class="op">+</span><span class="dv">1</span>):</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            res.append(median(<span class="bu">sorted</span>(nums[i:i<span class="op">+</span>k])))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> res</span></code></pre></div>]]></description>
</item>
</channel>
</rss>
