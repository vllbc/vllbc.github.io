<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sklearn - 标签 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/tags/sklearn/</link>
        <description>Sklearn - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Dec 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/tags/sklearn/" rel="self" type="application/rss+xml" /><item>
    <title>SelectFromModel</title>
    <link>https://blog.vllbc.top/selectfrommodel/</link>
    <pubDate>Sat, 10 Dec 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/selectfrommodel/</guid>
    <description><![CDATA[<h1
id="sklearn.feature_selection.selectfrommodel">Sklearn.feature_selection.SelectFromModel</h1>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> sklearn.feature_selection.SelectFromModel(estimator, </span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>, threshold<span class="op">=</span><span class="va">None</span>, prefit<span class="op">=</span><span class="va">False</span>, norm_order<span class="op">=</span><span class="dv">1</span>, </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        max_features<span class="op">=</span><span class="va">None</span>)[source]</span></code></pre></div>
<p>参数</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>Parameters</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>estimator_：一个估算器</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            用来建立变压器的基本估计器。</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            只有当一个不适合的估计器传递给SelectFromModel时，</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            才会存储这个值，即当prefit为False时。</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>threshold_：float</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            用于特征选择的阈值。</span></code></pre></div>
<p>方法:</p>]]></description>
</item>
<item>
    <title>Logistic Regression</title>
    <link>https://blog.vllbc.top/logistic-regression/</link>
    <pubDate>Tue, 06 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/logistic-regression/</guid>
    <description><![CDATA[<h2 id="导入包">导入包</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span></code></pre></div>
<h2 id="导入数据">导入数据</h2>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> pd.read_csv(<span class="st">&quot;./datasets/Social_Network_Ads.csv&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>data.head()</span></code></pre></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }


    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
User ID
</th>
<th>
Gender
</th>
<th>
Age
</th>
<th>
EstimatedSalary
</th>
<th>
Purchased
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
15624510
</td>
<td>
Male
</td>
<td>
19
</td>
<td>
19000
</td>
<td>
0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
15810944
</td>
<td>
Male
</td>
<td>
35
</td>
<td>
20000
</td>
<td>
0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
15668575
</td>
<td>
Female
</td>
<td>
26
</td>
<td>
43000
</td>
<td>
0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
15603246
</td>
<td>
Female
</td>
<td>
27
</td>
<td>
57000
</td>
<td>
0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
15804002
</td>
<td>
Male
</td>
<td>
19
</td>
<td>
76000
</td>
<td>
0
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> data.iloc[:,[<span class="dv">2</span>,<span class="dv">3</span>]].values</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> data.iloc[:,<span class="dv">4</span>].values</span></code></pre></div>
<h2 id="交叉验证">交叉验证</h2>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>X_train,X_test,Y_train,Y_test <span class="op">=</span> train_test_split(X,Y,train_size<span class="op">=</span><span class="dv">1</span><span class="op">/</span><span class="dv">4</span>,random_state<span class="op">=</span><span class="dv">0</span>)</span></code></pre></div>
<h2 id="标准化">标准化</h2>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.preprocessing <span class="im">import</span> StandardScaler</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>standardscaler <span class="op">=</span> StandardScaler()</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>X_train <span class="op">=</span> standardscaler.fit_transform(X_train)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>X_test <span class="op">=</span> standardscaler.transform(X_test)</span></code></pre></div>
<h2 id="训练模型">训练模型</h2>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LogisticRegression</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> LogisticRegression()</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>model.fit(X_train,Y_train)</span></code></pre></div>
<pre><code>LogisticRegression()</code></pre>
<h2 id="模型得分">模型得分</h2>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>model.score(X_test,Y_test)</span></code></pre></div>
<pre><code>0.7933333333333333</code></pre>]]></description>
</item>
<item>
    <title>数据预处理</title>
    <link>https://blog.vllbc.top/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</link>
    <pubDate>Sat, 02 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[<h2 id="导入必要的包">导入必要的包</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span></code></pre></div>
<p>读入数据</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> pd.read_csv(<span class="st">&quot;./datasets/Data.csv&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>data.head()</span></code></pre></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }


    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
Country
</th>
<th>
Age
</th>
<th>
Salary
</th>
<th>
Purchased
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
France
</td>
<td>
44.0
</td>
<td>
72000.0
</td>
<td>
No
</td>
</tr>
<tr>
<th>
1
</th>
<td>
Spain
</td>
<td>
27.0
</td>
<td>
48000.0
</td>
<td>
Yes
</td>
</tr>
<tr>
<th>
2
</th>
<td>
Germany
</td>
<td>
30.0
</td>
<td>
54000.0
</td>
<td>
No
</td>
</tr>
<tr>
<th>
3
</th>
<td>
Spain
</td>
<td>
38.0
</td>
<td>
61000.0
</td>
<td>
No
</td>
</tr>
<tr>
<th>
4
</th>
<td>
Germany
</td>
<td>
40.0
</td>
<td>
NaN
</td>
<td>
Yes
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="确定xy变量">确定X,Y变量</h2>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> data.iloc[:,:<span class="op">-</span><span class="dv">1</span>].values</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> data.iloc[:,<span class="dv">3</span>].values</span></code></pre></div>
<h2 id="数据空值处理">数据空值处理</h2>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.impute <span class="im">import</span> SimpleImputer</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>imputer <span class="op">=</span> SimpleImputer()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>X[:,<span class="dv">1</span>:<span class="dv">3</span>] <span class="op">=</span> imputer.fit_transform(X[:,<span class="dv">1</span>:<span class="dv">3</span>])</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>X</span></code></pre></div>
<pre><code>array([[&#39;France&#39;, 44.0, 72000.0],
       [&#39;Spain&#39;, 27.0, 48000.0],
       [&#39;Germany&#39;, 30.0, 54000.0],
       [&#39;Spain&#39;, 38.0, 61000.0],
       [&#39;Germany&#39;, 40.0, 63777.77777777778],
       [&#39;France&#39;, 35.0, 58000.0],
       [&#39;Spain&#39;, 38.77777777777778, 52000.0],
       [&#39;France&#39;, 48.0, 79000.0],
       [&#39;Germany&#39;, 50.0, 83000.0],
       [&#39;France&#39;, 37.0, 67000.0]], dtype=object)</code></pre>
<h2 id="编码处理">编码处理</h2>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.preprocessing <span class="im">import</span> LabelEncoder,OneHotEncoder</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>labelencoder <span class="op">=</span> LabelEncoder()</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>X[:,<span class="dv">0</span>] <span class="op">=</span> labelencoder.fit_transform(X[:,<span class="dv">0</span>])</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>onehotencoder <span class="op">=</span> OneHotEncoder()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> onehotencoder.fit_transform(X).toarray()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>labelencoder_Y <span class="op">=</span> LabelEncoder()</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> labelencoder_Y.fit_transform(Y)</span></code></pre></div>
<h2 id="分割数据">分割数据</h2>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>X_train,X_test,Y_train,Y_test <span class="op">=</span> train_test_split(X,Y,test_size<span class="op">=</span><span class="fl">0.2</span>,</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>                                                 random_state<span class="op">=</span><span class="dv">0</span>)</span></code></pre></div>
<h2 id="标准化">标准化</h2>
<div class="sourceCode" id="cb9"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.preprocessing <span class="im">import</span> StandardScaler</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>sc_X <span class="op">=</span> StandardScaler()</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>X_train <span class="op">=</span> sc_X.fit_transform(X_train)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>X_test <span class="op">=</span> sc_X.fit_transform(X_test)</span></code></pre></div>]]></description>
</item>
<item>
    <title>RFE</title>
    <link>https://blog.vllbc.top/rfe/</link>
    <pubDate>Fri, 29 Apr 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/rfe/</guid>
    <description><![CDATA[<h2
id="sklearn.feature_selection.rfe">sklearn.feature_selection.RFE</h2>
<p>RFE（Recursive feature
elimination）：递归特征消除，用来对特征进行重要性评级。主要用于特征选择
RFE阶段 1 初始的特征集为所有可用的特征。 2
使用当前特征集进行建模，然后计算每个特征的重要性。 3
删除最不重要的一个（或多个）特征，更新特征集。 4
跳转到步骤2，直到完成所有特征的重要性评级。</p>]]></description>
</item>
<item>
    <title>验证曲线</title>
    <link>https://blog.vllbc.top/%E9%AA%8C%E8%AF%81%E6%9B%B2%E7%BA%BF/</link>
    <pubDate>Mon, 04 Apr 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E9%AA%8C%E8%AF%81%E6%9B%B2%E7%BA%BF/</guid>
    <description><![CDATA[<blockquote>
<p>通过验证曲线判定过拟合于欠拟合。</p>
<p>验证曲线是一种通过定位过拟合于欠拟合等诸多问题的方法，帮助提高模型性能的有效工具。</p>
<p>验证曲线绘制的是准确率与模型参数之间的关系。</p>]]></description>
</item>
<item>
    <title>SVM_sklearn</title>
    <link>https://blog.vllbc.top/svm_sklearn/</link>
    <pubDate>Sun, 13 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/svm_sklearn/</guid>
    <description><![CDATA[<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> pd.read_csv(<span class="st">&quot;./datasets/Social_Network_Ads.csv&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> data.iloc[:, [<span class="dv">2</span>, <span class="dv">3</span>]].values</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> data.iloc[:, <span class="dv">4</span>].values</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>X_train, X_test, y_train, y_test <span class="op">=</span> train_test_split(X, y, test_size <span class="op">=</span> <span class="fl">0.25</span>, random_state <span class="op">=</span> <span class="dv">0</span>)</span></code></pre></div>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.preprocessing <span class="im">import</span> StandardScaler</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>sc <span class="op">=</span> StandardScaler()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>X_train <span class="op">=</span> sc.fit_transform(X_train)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>X_test <span class="op">=</span> sc.fit_transform(X_test)</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.svm <span class="im">import</span> SVC</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>classifier <span class="op">=</span> SVC(kernel <span class="op">=</span> <span class="st">&#39;linear&#39;</span>, random_state <span class="op">=</span> <span class="dv">0</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>classifier.fit(X_train, y_train)</span></code></pre></div>
<pre><code>SVC(kernel=&#39;linear&#39;, random_state=0)</code></pre>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>y_pred <span class="op">=</span> classifier.predict(X_test)</span></code></pre></div>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>classifier.score(X_test,y_test)</span></code></pre></div>
<pre><code>0.88</code></pre>
<div class="sourceCode" id="cb10"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.metrics <span class="im">import</span> confusion_matrix</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>cm <span class="op">=</span> confusion_matrix(y_test, y_pred)</span></code></pre></div>
<div class="sourceCode" id="cb11"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib.colors <span class="im">import</span> ListedColormap</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>X_set, y_set <span class="op">=</span> X_train, y_train</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>X1, X2 <span class="op">=</span> np.meshgrid(np.arange(start <span class="op">=</span> X_set[:, <span class="dv">0</span>].<span class="bu">min</span>() <span class="op">-</span> <span class="dv">1</span>, stop <span class="op">=</span> X_set[:, <span class="dv">0</span>].<span class="bu">max</span>() <span class="op">+</span> <span class="dv">1</span>, step <span class="op">=</span> <span class="fl">0.01</span>),</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>                     np.arange(start <span class="op">=</span> X_set[:, <span class="dv">1</span>].<span class="bu">min</span>() <span class="op">-</span> <span class="dv">1</span>, stop <span class="op">=</span> X_set[:, <span class="dv">1</span>].<span class="bu">max</span>() <span class="op">+</span> <span class="dv">1</span>, step <span class="op">=</span> <span class="fl">0.01</span>))</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>             alpha <span class="op">=</span> <span class="fl">0.75</span>, cmap <span class="op">=</span> ListedColormap((<span class="st">&#39;red&#39;</span>, <span class="st">&#39;green&#39;</span>)))</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>plt.xlim(X1.<span class="bu">min</span>(), X1.<span class="bu">max</span>())</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>plt.ylim(X2.<span class="bu">min</span>(), X2.<span class="bu">max</span>())</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i, j <span class="kw">in</span> <span class="bu">enumerate</span>(np.unique(y_set)):</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    plt.scatter(X_set[y_set <span class="op">==</span> j, <span class="dv">0</span>], X_set[y_set <span class="op">==</span> j, <span class="dv">1</span>],</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> ListedColormap((<span class="st">&#39;red&#39;</span>, <span class="st">&#39;green&#39;</span>))(i), label <span class="op">=</span> j)</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;SVM (Training set)&#39;</span>)</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;Age&#39;</span>)</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;Estimated Salary&#39;</span>)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p></p>]]></description>
</item>
<item>
    <title>简单的线性回归</title>
    <link>https://blog.vllbc.top/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
    <pubDate>Sat, 12 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
    <description><![CDATA[<h2 id="导入包">导入包</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span></code></pre></div>
<h2 id="导入数据">导入数据</h2>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> pd.read_csv(<span class="st">&quot;./datasets/studentscores.csv&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>data.head()</span></code></pre></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }


    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
Hours
</th>
<th>
Scores
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
2.5
</td>
<td>
21
</td>
</tr>
<tr>
<th>
1
</th>
<td>
5.1
</td>
<td>
47
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3.2
</td>
<td>
27
</td>
</tr>
<tr>
<th>
3
</th>
<td>
8.5
</td>
<td>
75
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3.5
</td>
<td>
30
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="数据处理">数据处理</h2>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> data.iloc[:,:<span class="dv">1</span>].values</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> data.iloc[:,<span class="dv">1</span>].values</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>X_train,X_test,Y_train,Y_test <span class="op">=</span> train_test_split(X,Y,test_size<span class="op">=</span><span class="dv">1</span><span class="op">/</span><span class="dv">4</span>,random_state<span class="op">=</span><span class="dv">0</span>)</span></code></pre></div>
<h2 id="训练模型">训练模型</h2>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>regressor <span class="op">=</span> LinearRegression()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>regressor <span class="op">=</span> regressor.fit(X_train,Y_train)</span></code></pre></div>
<h2 id="预测">预测</h2>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>Y_pred <span class="op">=</span> regressor.predict(X_test)</span></code></pre></div>
<h2 id="画图">画图</h2>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>plt.scatter(X_train,Y_train,color<span class="op">=</span><span class="st">&#39;red&#39;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>plt.plot(X_train,regressor.predict(X_train),color<span class="op">=</span><span class="st">&#39;blue&#39;</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>plt.scatter(X_test , Y_test, color <span class="op">=</span> <span class="st">&#39;red&#39;</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>plt.plot(X_test , regressor.predict(X_test), color <span class="op">=</span><span class="st">&#39;blue&#39;</span>)</span></code></pre></div>]]></description>
</item>
<item>
    <title>复杂的线性回归</title>
    <link>https://blog.vllbc.top/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
    <pubDate>Fri, 04 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
    <description><![CDATA[<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span></code></pre></div>
<h2 id="读入数据">读入数据</h2>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> pd.read_csv(<span class="st">&quot;./datasets/50_Startups.csv&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>data.head()</span></code></pre></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }


    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
R&amp;D Spend
</th>
<th>
Administration
</th>
<th>
Marketing Spend
</th>
<th>
State
</th>
<th>
Profit
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
165349.20
</td>
<td>
136897.80
</td>
<td>
471784.10
</td>
<td>
New York
</td>
<td>
192261.83
</td>
</tr>
<tr>
<th>
1
</th>
<td>
162597.70
</td>
<td>
151377.59
</td>
<td>
443898.53
</td>
<td>
California
</td>
<td>
191792.06
</td>
</tr>
<tr>
<th>
2
</th>
<td>
153441.51
</td>
<td>
101145.55
</td>
<td>
407934.54
</td>
<td>
Florida
</td>
<td>
191050.39
</td>
</tr>
<tr>
<th>
3
</th>
<td>
144372.41
</td>
<td>
118671.85
</td>
<td>
383199.62
</td>
<td>
New York
</td>
<td>
182901.99
</td>
</tr>
<tr>
<th>
4
</th>
<td>
142107.34
</td>
<td>
91391.77
</td>
<td>
366168.42
</td>
<td>
Florida
</td>
<td>
166187.94
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="分开xy">分开xy</h2>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> data.iloc[:,:<span class="op">-</span><span class="dv">1</span>].values</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> data.iloc[:,<span class="op">-</span><span class="dv">1</span>].values</span></code></pre></div>
<h2 id="编码">编码</h2>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.preprocessing <span class="im">import</span> LabelEncoder,OneHotEncoder</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>labelEncoder <span class="op">=</span> LabelEncoder()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>X[:,<span class="dv">3</span>] <span class="op">=</span> labelEncoder.fit_transform(X[:,<span class="dv">3</span>])</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>onehotencoder <span class="op">=</span> OneHotEncoder()</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> onehotencoder.fit_transform(X).toarray()</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> X[:,<span class="dv">1</span>:]</span></code></pre></div>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>X_train, X_test, Y_train, Y_test <span class="op">=</span> train_test_split(X, Y, test_size <span class="op">=</span> <span class="fl">0.2</span>, random_state <span class="op">=</span> <span class="dv">0</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>regressor <span class="op">=</span> LinearRegression()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>regressor.fit(X_train,Y_train)</span></code></pre></div>
<pre><code>LinearRegression()</code></pre>]]></description>
</item>
<item>
    <title>学习曲线</title>
    <link>https://blog.vllbc.top/%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF/</link>
    <pubDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF/</guid>
    <description><![CDATA[<p><strong>学习曲线能判定偏差和方差问题</strong></p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split,learning_curve</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.svm <span class="im">import</span> SVC</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.datasets <span class="im">import</span> load_digits</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>digits <span class="op">=</span> load_digits()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> digits.data</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>Y <span class="op">=</span> digits.target</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>train_sizes,train_loss,test_loss <span class="op">=</span> learning_curve(SVC(gamma<span class="op">=</span><span class="fl">0.001</span>),X,Y,cv<span class="op">=</span><span class="dv">10</span>,</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>                                                 scoring<span class="op">=</span><span class="st">&#39;neg_mean_squared_error&#39;</span>,</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>                                                train_sizes<span class="op">=</span>[<span class="fl">0.1</span>,<span class="fl">0.25</span>,<span class="fl">0.5</span>,<span class="fl">0.75</span>,<span class="dv">1</span>])</span></code></pre></div>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>train_sizes</span></code></pre></div>
<pre><code>array([ 161,  404,  808, 1212, 1617])</code></pre>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>train_loss</span></code></pre></div>
<pre><code>array([[-0.        , -0.09937888, -0.09937888, -0.09937888, -0.09937888,
        -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888],
       [-0.        , -0.03960396, -0.03960396, -0.03960396, -0.03960396,
        -0.03960396, -0.03960396, -0.03960396, -0.03960396, -0.03960396],
       [-0.        , -0.01980198, -0.01980198, -0.06435644, -0.01980198,
        -0.01980198, -0.01980198, -0.01980198, -0.01980198, -0.01980198],
       [-0.        , -0.01650165, -0.01320132, -0.01320132, -0.01320132,
        -0.01320132, -0.01320132, -0.01320132, -0.01320132, -0.01320132],
       [-0.02226345, -0.03215832, -0.00989487, -0.03215832, -0.03215832,
        -0.03215832, -0.03215832, -0.03215832, -0.03215832, -0.00989487]])</code></pre>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>test_loss</span></code></pre></div>
<pre><code>array([[-1.26666667e+00, -1.43333333e+00, -3.96666667e+00,
        -9.73888889e+00, -6.95000000e+00, -5.24444444e+00,
        -3.02777778e+00, -5.25139665e+00, -3.48044693e+00,
        -4.85474860e+00],
       [-1.81111111e+00, -1.13333333e+00, -1.35555556e+00,
        -3.06666667e+00, -2.08333333e+00, -2.85000000e+00,
        -8.38888889e-01, -1.94413408e+00, -5.41899441e-01,
        -1.35195531e+00],
       [-1.71111111e+00, -3.61111111e-01, -5.11111111e-01,
        -9.61111111e-01, -6.16666667e-01, -5.88888889e-01,
        -1.22222222e-01, -9.16201117e-01, -7.76536313e-01,
        -1.14525140e+00],
       [-1.22222222e+00, -3.61111111e-01, -4.44444444e-01,
        -7.00000000e-01, -5.55555556e-01, -2.66666667e-01,
        -8.88888889e-02, -1.11731844e-02, -9.21787709e-01,
        -8.43575419e-01],
       [-9.33333333e-01, -0.00000000e+00, -2.66666667e-01,
        -2.83333333e-01, -2.77777778e-01, -3.61111111e-01,
        -8.88888889e-02, -5.58659218e-03, -9.21787709e-01,
        -4.18994413e-01]])</code></pre>
<div class="sourceCode" id="cb10"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>train_mean <span class="op">=</span> <span class="op">-</span>np.mean(train_loss,axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>test_mean <span class="op">=</span> <span class="op">-</span>np.mean(test_loss,axis<span class="op">=</span><span class="dv">1</span>)</span></code></pre></div>
<div class="sourceCode" id="cb11"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>train_mean</span></code></pre></div>
<pre><code>array([0.08944099, 0.03564356, 0.02227723, 0.01221122, 0.02671614])</code></pre>
<div class="sourceCode" id="cb13"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>plt.plot(train_sizes,train_mean,label<span class="op">=</span><span class="st">&quot;Training&quot;</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>plt.plot(train_sizes,test_mean,label<span class="op">=</span><span class="st">&quot;Cross-validation&quot;</span>)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>​<br />

​</p>]]></description>
</item>
<item>
    <title>CountVectorizer</title>
    <link>https://blog.vllbc.top/countvectorizer/</link>
    <pubDate>Tue, 14 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/countvectorizer/</guid>
    <description><![CDATA[<p>将所有词语装进一个袋子里，不考虑其词法和语序的问题，即每个词语都是独立的</p>
<p>句子1：我 爱 北 京 天 安 门 转换为 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
0]</p>
<p>句子2：我 喜 欢 上 海 转换为 [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]</p>]]></description>
</item>
</channel>
</rss>
