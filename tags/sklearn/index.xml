<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sklearn - 标签 - vllbc02&#39;s blogs</title>
        <link>http://localhost:1313/tags/sklearn/</link>
        <description>Sklearn - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vllbc02@163.com (vllbc)</managingEditor>
            <webMaster>vllbc02@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Dec 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/sklearn/" rel="self" type="application/rss+xml" /><item>
    <title>SelectFromModel</title>
    <link>http://localhost:1313/selectfrommodel/</link>
    <pubDate>Sat, 10 Dec 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/selectfrommodel/</guid>
    <description><![CDATA[Sklearn.feature_selection.SelectFromModel class sklearn.feature_selection.SelectFromModel(estimator, *, threshold=None, prefit=False, norm_order=1, max_features=None)[source] 参数 Parameters - estimator_：一个估算器 用来建立变压器的基本估计器。 只有当一个不适合的估计器传递给SelectFromMod]]></description>
</item>
<item>
    <title>Logistic Regression</title>
    <link>http://localhost:1313/logistic-regression/</link>
    <pubDate>Tue, 06 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/logistic-regression/</guid>
    <description><![CDATA[导入包 import numpy as np import pandas as pd 导入数据 data = pd.read_csv(&quot;./datasets/Social_Network_Ads.csv&quot;) data.head() User ID Gender Age EstimatedSalary Purchased 0 15624510 Male 19 19000 0 1 15810944 Male 35 20000 0 2 15668575 Female 26 43000 0 3 15603246 Female 27 57000 0 4 15804002 Male 19 76000 0 X = data.iloc[:,[2,3]].values Y = data.iloc[:,4].values 交叉验证 from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test]]></description>
</item>
<item>
    <title>数据预处理</title>
    <link>http://localhost:1313/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</link>
    <pubDate>Sat, 02 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[导入必要的包 import pandas as pd import numpy as np 读入数据 data = pd.read_csv(&quot;./datasets/Data.csv&quot;) data.head() Country Age Salary Purchased 0 France 44.0 72000.0 No 1 Spain 27.0 48000.0 Yes 2 Germany 30.0 54000.0 No 3 Spain 38.0 61000.0 No 4 Germany 40.0 NaN Yes 确定X,Y变量 X = data.iloc[:,:-1].values Y = data.iloc[:,3].values 数据空值处理]]></description>
</item>
<item>
    <title>RFE</title>
    <link>http://localhost:1313/rfe/</link>
    <pubDate>Fri, 29 Apr 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/rfe/</guid>
    <description><![CDATA[sklearn.feature_selection.RFE RFE（Recursive feature elimination）：递归特征消除，用来对特征进行重要性评级。主要用于特征选择 RFE阶段 1 初始的特征集为所]]></description>
</item>
<item>
    <title>验证曲线</title>
    <link>http://localhost:1313/%E9%AA%8C%E8%AF%81%E6%9B%B2%E7%BA%BF/</link>
    <pubDate>Mon, 04 Apr 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/%E9%AA%8C%E8%AF%81%E6%9B%B2%E7%BA%BF/</guid>
    <description><![CDATA[通过验证曲线判定过拟合于欠拟合。 验证曲线是一种通过定位过拟合于欠拟合等诸多问题的方法，帮助提高模型性能的有效工具。 验证曲线绘制的是准确率与模]]></description>
</item>
<item>
    <title>SVM_sklearn</title>
    <link>http://localhost:1313/svm_sklearn/</link>
    <pubDate>Sun, 13 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/svm_sklearn/</guid>
    <description><![CDATA[import numpy as np import pandas as pd import matplotlib.pyplot as plt data = pd.read_csv(&quot;./datasets/Social_Network_Ads.csv&quot;) X = data.iloc[:, [2, 3]].values y = data.iloc[:, 4].values from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.fit_transform(X_test) from sklearn.svm import SVC classifier = SVC(kernel = &#39;linear&#39;, random_state = 0) classifier.fit(X_train, y_train) SVC(kernel=&#39;linear&#39;, random_state=0) y_pred = classifier.]]></description>
</item>
<item>
    <title>简单的线性回归</title>
    <link>http://localhost:1313/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
    <pubDate>Sat, 12 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
    <description><![CDATA[导入包 import pandas as pd import numpy as np import matplotlib.pyplot as plt 导入数据 data = pd.read_csv(&quot;./datasets/studentscores.csv&quot;) data.head() Hours Scores 0 2.5 21 1 5.1 47 2 3.2 27 3 8.5 75 4 3.5 30 数据处理 X = data.iloc[:,:1].values Y = data.iloc[:,1].values from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=1/4,random_state=0) 训练模型 from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor =]]></description>
</item>
<item>
    <title>复杂的线性回归</title>
    <link>http://localhost:1313/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
    <pubDate>Fri, 04 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
    <description><![CDATA[import pandas as pd import numpy as np 读入数据 data = pd.read_csv(&quot;./datasets/50_Startups.csv&quot;) data.head() R&amp;D Spend Administration Marketing Spend State Profit 0 165349.20 136897.80 471784.10 New York 192261.83 1 162597.70 151377.59 443898.53 California 191792.06 2 153441.51 101145.55 407934.54 Florida 191050.39 3 144372.41 118671.85 383199.62 New York 182901.99 4 142107.34 91391.77 366168.42 Florida 166187.94 分开xy X = data.iloc[:,:-1].values Y = data.iloc[:,-1].values 编码 from sklearn.preprocessing import]]></description>
</item>
<item>
    <title>学习曲线</title>
    <link>http://localhost:1313/%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF/</link>
    <pubDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF/</guid>
    <description><![CDATA[学习曲线能判定偏差和方差问题 from sklearn.model_selection import train_test_split,learning_curve import numpy as np from sklearn.svm import SVC from sklearn.datasets import load_digits import matplotlib.pyplot as plt digits = load_digits() X = digits.data Y = digits.target train_sizes,train_loss,test_loss = learning_curve(SVC(gamma=0.001),X,Y,cv=10, scoring=&#39;neg_mean_squared_error&#39;, train_sizes=[0.1,0.25,0.5,0.75,1]) train_sizes array([ 161, 404, 808, 1212, 1617]) train_loss array([[-0. , -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888, -0.09937888], [-0. , -0.03960396,]]></description>
</item>
<item>
    <title>CountVectorizer</title>
    <link>http://localhost:1313/countvectorizer/</link>
    <pubDate>Tue, 14 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/countvectorizer/</guid>
    <description><![CDATA[将所有词语装进一个袋子里，不考虑其词法和语序的问题，即每个词语都是独立的 句子1：我 爱 北 京 天 安 门 转换为 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0] 句子2：我 喜 欢 上 海]]></description>
</item>
</channel>
</rss>
