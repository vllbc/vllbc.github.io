<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Api - 标签 - vllbc02&#39;s blogs</title>
        <link>http://localhost:1313/tags/api/</link>
        <description>Api - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vllbc02@163.com (vllbc)</managingEditor>
            <webMaster>vllbc02@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 29 Nov 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/api/" rel="self" type="application/rss+xml" /><item>
    <title>bincount</title>
    <link>http://localhost:1313/bincount/</link>
    <pubDate>Tue, 29 Nov 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/bincount/</guid>
    <description><![CDATA[很简单，就是统计x中的数出现次数，返回结果的最大长度就是x中的最大值+1，idx为对应的数，值为出现的次数，没有出现的为0。 x = np.array([7, 6, 2, 1, 4]) #]]></description>
</item>
<item>
    <title>rot90</title>
    <link>http://localhost:1313/rot90/</link>
    <pubDate>Sat, 12 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/rot90/</guid>
    <description><![CDATA[正为逆时针转，负为顺时针转。 import numpy as np mat = np.array([[1,3,5], [2,4,6], [7,8,9] ]) print mat, &quot;# orignal&quot; mat90 = np.rot90(mat, 1) print mat90, &quot;# rorate 90 &lt;left&gt; anti-clockwise&quot; mat90 = np.rot90(mat, -1) print mat90, &quot;# rorate 90 &lt;right&gt; clockwise&quot; mat180 = np.rot90(mat, 2) print mat180, &quot;# rorate 180 &lt;left&gt; anti-clockwise&quot; mat270 = np.rot90(mat, 3) print mat270, &quot;# rorate 270]]></description>
</item>
<item>
    <title>melt</title>
    <link>http://localhost:1313/melt/</link>
    <pubDate>Wed, 12 Jan 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/melt/</guid>
    <description><![CDATA[pd.melt 用法 直观的看就是将宽数据转化为长数据。转化为variable-value这样的形式。 pandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name=&#39;value&#39;, col_level=None) 参数解释： frame:要处理的数据集。 id]]></description>
</item>
<item>
    <title>flip</title>
    <link>http://localhost:1313/flip/</link>
    <pubDate>Sat, 01 Jan 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/flip/</guid>
    <description><![CDATA[矩阵的反转，可以按照各个维度很好理解。 例子： cs_matrix = np.array([[ 4, 3, 2, 1, 0], [ 8, 7, 6, 5, 1], [11, 10, 9, 6, 2], [13, 12, 10, 7, 3], [14, 13, 11, 8, 4]]) np.flip(cs_matrix, 0) 变成了： np.flip(cs_matrix, 1) 变成了：]]></description>
</item>
<item>
    <title>apply_along_axis</title>
    <link>http://localhost:1313/apply_along_axis/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/apply_along_axis/</guid>
    <description><![CDATA[类似于pandas的apply，就是在某一维上进行定义的函数操作 apply_along_axis(func1d, axis, arr, *args, **kwargs) 官网的例子 def my_func(a): return (a[0] + a[-1]) * 0.5 b = np.array([[1,2,3], [4,5,6], [7,8,9]]) np.apply_along_axis(my_func, 0, b) # 结果 array([ 4., 5., 6.]) # 结果 array([ 2.,]]></description>
</item>
<item>
    <title>as_strided</title>
    <link>http://localhost:1313/as_strided/</link>
    <pubDate>Sun, 14 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/as_strided/</guid>
    <description><![CDATA[调用为np.lib.stride_tricks.as_strided() 可以分割一个数组为不同的shape块，有个问题就是什么是stride]]></description>
</item>
</channel>
</rss>
