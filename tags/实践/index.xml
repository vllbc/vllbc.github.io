<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>实践 - 标签 - vllbc02</title>
        <link>https://vllbc.top/tags/%E5%AE%9E%E8%B7%B5/</link>
        <description>实践 - 标签 - vllbc02</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>m18265090197@163.com (vllbc)</managingEditor>
            <webMaster>m18265090197@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 28 Dec 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://vllbc.top/tags/%E5%AE%9E%E8%B7%B5/" rel="self" type="application/rss+xml" /><item>
    <title>regression</title>
    <link>https://vllbc.top/regression/</link>
    <pubDate>Wed, 28 Dec 2022 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://vllbc.top/regression/</guid>
    <description><![CDATA[一个线性回归的神经网络模型 import torch import numpy as np import pandas as pd import plotly.graph_objects as go import torch.nn import torch.nn.functional as F from torch.autograd import Variable x = torch.unsqueeze(torch.linspace(-10,10,100),dim=1) y = x*2+10+torch.rand(x.size()) # scatter = go.Scatter(x = torch.squeeze(x),y = torch.squeeze(y),mode = &#39;markers&#39;) # fig = go.Figure(scatter) # fig.show() class Net(torch.nn.Module): def __init__(self): super(Net,self).__init__() self.hidden = torch.nn.Linear(1,10) self.linser = torch.nn.Linear(10,1)]]></description>
</item>
</channel>
</rss>
