<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Rwkv - 标签 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/tags/rwkv/</link>
        <description>Rwkv - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 04 Sep 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/tags/rwkv/" rel="self" type="application/rss+xml" /><item>
    <title>rwkv</title>
    <link>https://blog.vllbc.top/rwkv/</link>
    <pubDate>Wed, 04 Sep 2024 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/rwkv/</guid>
    <description><![CDATA[<h1 id="线性transformer">线性Transformer</h1>
<p><span class="math display">\[V_i&#39;=\frac{\sum_{j=1}^N
sim(Q_i,K_j)V_j}{\sum_{j=1}^N sim(Q_i,K_j)}\]</span> 注意下标i。
其中</p>
<p><span
class="math display">\[sim(Q_{i},K_{j})=\phi(Q_{i},K_{j})\]</span></p>
<p>此时有：</p>
<p><span
class="math display">\[V_{i}^{\prime}=\frac{\phi(Q_{i})\sum_{j=1}^{i}\phi(K_{j})^{T}V_{j}}{\phi(Q_{i})\sum_{j=1}^{i}\phi(K_{j})^{T}}\]</span></p>
<p>注意可以将<span
class="math inline">\(\phi(Q_{i})\)</span>提出来。</p>
<p>原始Transformer的计算复杂度随序列长N呈二次方增长，这是因为attention的计算包含两层for循环，外层是对于每一个Query，我们需要计算它对应token的新表征；内层for循环是为了计算每一个Query对应的新表征，需要让该Query与每一个Key进行计算。
所以外层是 for q in Queries，内层是 for k in
Keys。Queries数量和Keys数量都是N，所以复杂度是 O(N^2) 。而Linear
Transformer，它只有外层for q in
Queries这个循环了。因为求和项的计算与i无关，所以所有的 Qi
可以共享求和项的值。换言之，求和项的值可以只计算一次，然后存在内存中供所有
Qi 去使用。所以Linear Transformer的计算复杂度是O(N) 。</p>]]></description>
</item>
</channel>
</rss>
