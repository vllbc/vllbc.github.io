<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>最大数 - 标签 - vllbc02&#39;s blogs</title>
        <link>https://blog.vllbc.top/tags/%E6%9C%80%E5%A4%A7%E6%95%B0/</link>
        <description>最大数 - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 08 Nov 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.vllbc.top/tags/%E6%9C%80%E5%A4%A7%E6%95%B0/" rel="self" type="application/rss+xml" /><item>
    <title>最大数</title>
    <link>https://blog.vllbc.top/%E6%9C%80%E5%A4%A7%E6%95%B0/</link>
    <pubDate>Mon, 08 Nov 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>https://blog.vllbc.top/%E6%9C%80%E5%A4%A7%E6%95%B0/</guid>
    <description><![CDATA[<h1 id="最大数">最大数</h1>
<h2 id="题目">题目：</h2>
<p><a
href="https://leetcode-cn.com/problems/largest-number/">https://leetcode-cn.com/problems/largest-number/</a></p>
<h2 id="思路">思路：</h2>
<p>一开始直接暴力搜索，把所有的情况都列举然后比较，结果超时了，最后利用了自定义排序的方法</p>
<h2 id="代码">代码：</h2>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Solution:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> largestNumber(<span class="va">self</span>, nums: List[<span class="bu">int</span>]) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">class</span> Comapre(<span class="bu">str</span>):</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">def</span> <span class="fu">__lt__</span>(<span class="va">self</span>,other):</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="bu">int</span>(<span class="va">self</span><span class="op">+</span>other) <span class="op">&gt;</span> <span class="bu">int</span>(other<span class="op">+</span><span class="va">self</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        nums.sort(key<span class="op">=</span>Comapre)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">str</span>(<span class="bu">int</span>(<span class="st">&#39;&#39;</span>.join(<span class="bu">map</span>(<span class="bu">str</span>,nums))))</span></code></pre></div>
<p>注意的是这里利用了自定义的比较类型，继承了str，也可以从functools里导入cmp_to_key方法来实现比较</p>]]></description>
</item>
</channel>
</rss>
