<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Decision Tree - 标签 - vllbc02&#39;s blogs</title>
        <link>http://localhost:1313/tags/decision-tree/</link>
        <description>Decision Tree - 标签 - vllbc02&#39;s blogs</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vllbc02@163.com (vllbc)</managingEditor>
            <webMaster>vllbc02@163.com (vllbc)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 25 May 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/decision-tree/" rel="self" type="application/rss+xml" /><item>
    <title>Decision Tree</title>
    <link>http://localhost:1313/decision-tree/</link>
    <pubDate>Tue, 25 May 2021 00:00:00 &#43;0000</pubDate>
    <author>vllbc</author>
    <guid>http://localhost:1313/decision-tree/</guid>
    <description><![CDATA[import numpy as np import matplotlib.pyplot as plt import pandas as pd dataset = pd.read_csv(&#39;./datasets/Social_Network_Ads.csv&#39;) X = dataset.iloc[:, [2, 3]].values y = dataset.iloc[:, 4].values from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) from sklearn.tree import DecisionTreeClassifier classifier = DecisionTreeClassifier(criterion = &#39;entropy&#39;, random_state = 0) classifier.fit(X_train, y_train) DecisionTreeClassifier(criterion=&#39;entropy&#39;, random_state=0) classifier.]]></description>
</item>
</channel>
</rss>
